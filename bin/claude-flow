#!/bin/sh
# Claude-Flow Smart Dispatcher - Detects and uses the best available runtime

VERSION="2.0.0"
SCRIPT_DIR=$(dirname "$0")
ROOT_DIR=$(cd "$SCRIPT_DIR/.." && pwd)

# Show help if no arguments provided
if [ $# -eq 0 ]; then
  set -- "--help"
fi

# Quick version check and help
for arg in "$@"; do
  if [ "$arg" = "--version" ] || [ "$arg" = "-v" ]; then
    echo "v$VERSION"
    exit 0
  fi
  if [ "$arg" = "--help" ] || [ "$arg" = "-h" ] || [ "$arg" = "help" ]; then
    echo "üåä Claude-Flow v$VERSION - Enterprise-Grade AI Agent Orchestration Platform"
    echo ""
    echo "üéØ ENTERPRISE FEATURES: Complete ruv-swarm integration with 27 MCP tools, neural networking, and production-ready infrastructure"
    echo ""
    echo "USAGE:"
    echo "  claude-flow <command> [options]"
    echo ""
    echo "üöÄ INSTALLATION & ENTERPRISE SETUP:"
    echo "  npx claude-flow@2.0.0 init --sparc  # Enterprise SPARC + ruv-swarm integration"
    echo ""
    echo "üß† SWARM INTELLIGENCE COMMANDS (v2.0.0):"
    echo "  swarm \"objective\" [--strategy] [--mode] [--max-agents N] [--parallel] [--monitor]"
    echo ""
    echo "üêô GITHUB WORKFLOW AUTOMATION (v2.0.0):"
    echo "  github gh-coordinator        # GitHub workflow orchestration and coordination"
    echo "  github pr-manager           # Pull request management with multi-reviewer coordination"
    echo ""
    echo "üèóÔ∏è CORE ENTERPRISE COMMANDS:"
    echo "  init [--sparc]              # Initialize with enterprise environment + ruv-swarm"
    echo "  start [--ui] [--swarm]      # Start orchestration with swarm intelligence"
    echo "  status                      # Comprehensive system status with performance metrics"
    echo ""
    echo "üìö Documentation: https://github.com/ruvnet/claude-code-flow"
    echo "üêù ruv-swarm: https://github.com/ruvnet/ruv-FANN/tree/main/ruv-swarm"
    echo ""
    echo "üöÄ Enterprise-Grade AI Agent Orchestration - Built with ‚ù§Ô∏è by rUv for the Claude community"
    exit 0
  fi
done

# Try Deno first, but check if it actually works
if command -v deno >/dev/null 2>&1 && [ -f "$ROOT_DIR/src/cli/main.ts" ]; then
  # Test if Deno can actually run the main file
  if deno check "$ROOT_DIR/src/cli/main.ts" >/dev/null 2>&1; then
    # Use Deno for full functionality
    exec deno run --allow-all "$ROOT_DIR/src/cli/main.ts" "$@"
  fi
fi

# Fall back to Node.js version
if command -v tsx >/dev/null 2>&1 && [ -f "$ROOT_DIR/src/cli/simple-cli.ts" ]; then
  # Use tsx for Node.js functionality
  exec tsx "$ROOT_DIR/src/cli/simple-cli.ts" "$@"
elif [ -f "$ROOT_DIR/src/cli/simple-cli.ts" ]; then
  # Try to use npx tsx as fallback
  exec npx tsx "$ROOT_DIR/src/cli/simple-cli.ts" "$@"
else
  # No runtime available, show help
  echo "üß† Claude-Flow v$VERSION - Advanced AI Agent Orchestration System"
  echo ""
  echo "‚ö†Ô∏è  No compatible runtime found."
  echo ""
  echo "For full functionality (recommended):"
  echo "  1. Install Deno: curl -fsSL https://deno.land/x/install/install.sh | sh"
  echo "  2. Run: claude-flow <command>"
  echo ""
  echo "For Node.js compatibility mode:"
  echo "  1. Install tsx: npm install -g tsx"
  echo "  2. Run: claude-flow <command>"
  echo ""
  echo "Or use npx directly:"
  echo "  npx tsx src/cli/simple-cli.ts <command>"
  echo ""
  echo "Documentation: https://github.com/ruvnet/claude-code-flow"
  exit 1
fi