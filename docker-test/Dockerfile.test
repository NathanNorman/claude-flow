# Multi-stage Dockerfile for testing claude-flow features
# Tests NPX deployment, feature discovery, and transparency

# Stage 1: Base testing environment
FROM node:20-alpine AS test-base

WORKDIR /test

# Install system dependencies
RUN apk add --no-cache \
    bash \
    git \
    python3 \
    make \
    g++ \
    curl \
    jq

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Stage 2: Feature testing environment
FROM test-base AS feature-test

WORKDIR /test

# Copy entire project
COPY . .

# Build the project if needed
RUN npm run build || true

# Create test user to simulate real usage
RUN adduser -D testuser

# Stage 3: NPX deployment simulation
FROM node:20-alpine AS npx-test

WORKDIR /app

# Install necessary packages
RUN apk add --no-cache git bash curl jq

# Test installing the latest version
RUN npm install -g claude-flow@latest || npm install -g claude-flow@2.0.0-alpha.37

# Test NPX execution
RUN npx claude-flow --version

# Stage 4: Integration testing
FROM feature-test AS integration-test

WORKDIR /test

# Install test dependencies
RUN npm ci

# Copy test scripts
COPY docker-test/features /test/docker-test/features

# Create test script for feature system
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Testing claude-flow feature system..."\n\
\n\
# Test feature discovery\n\
echo "=== Feature Discovery Test ==="\n\
claude-flow features list || npx claude-flow features list\n\
\n\
# Test feature enable/disable\n\
echo "=== Feature Toggle Test ==="\n\
claude-flow features enable dark-mode || true\n\
claude-flow features disable analytics || true\n\
\n\
# Test configuration persistence\n\
echo "=== Configuration Test ==="\n\
claude-flow config set test.value "hello" || true\n\
claude-flow config get test.value || true\n\
\n\
# Test transparency\n\
echo "=== Transparency Test ==="\n\
claude-flow features status || true\n\
\n\
# Test MCP server\n\
echo "=== MCP Server Test ==="\n\
timeout 10s claude-flow mcp start || true\n\
\n\
echo "All tests completed successfully!"' > /test/run-tests.sh && chmod +x /test/run-tests.sh

# Run tests
CMD ["/test/run-tests.sh"]

# Stage 5: Performance benchmarking
FROM feature-test AS benchmark

WORKDIR /test

# Install benchmarking tools
RUN npm install -D clinic autocannon

# Copy benchmark scripts
COPY docker-test/features/performance /test/benchmarks

# Run benchmarks
CMD ["npm", "run", "benchmark"]

# Stage 6: Multi-platform testing
FROM --platform=$BUILDPLATFORM node:20-alpine AS multiplatform-test

ARG TARGETPLATFORM
ARG BUILDPLATFORM

WORKDIR /test

# Install dependencies
RUN apk add --no-cache bash git

# Copy and install
COPY . .
RUN npm ci

# Test on target platform
RUN echo "Testing on $TARGETPLATFORM from $BUILDPLATFORM"
RUN npm test || true

# Final stage: Complete test suite
FROM integration-test AS final

# Set test environment
ENV NODE_ENV=test
ENV CLAUDE_FLOW_TEST=true

# Expose ports for testing
EXPOSE 3000 8080 9229

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "console.log('healthy')" || exit 1

# Default command
CMD ["/test/run-tests.sh"]