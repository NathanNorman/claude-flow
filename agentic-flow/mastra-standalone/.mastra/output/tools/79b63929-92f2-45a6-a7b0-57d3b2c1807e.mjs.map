{"version":3,"file":"79b63929-92f2-45a6-a7b0-57d3b2c1807e.mjs","sources":["../../../src/mastra/tools/data-analysis-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// Helper functions for data analysis\nconst generateRandomData = (size, min = 0, max = 100) => {\n  return Array.from({ length: size }, () => Math.random() * (max - min) + min);\n};\n\nconst calculateMean = (data) => data.reduce((sum, val) => sum + val, 0) / data.length;\n\nconst calculateStdDev = (data) => {\n  const mean = calculateMean(data);\n  const variance = data.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / data.length;\n  return Math.sqrt(variance);\n};\n\nconst calculateCorrelation = (x, y) => {\n  const n = x.length;\n  const meanX = calculateMean(x);\n  const meanY = calculateMean(y);\n  \n  let numerator = 0;\n  let denomX = 0;\n  let denomY = 0;\n  \n  for (let i = 0; i < n; i++) {\n    const dx = x[i] - meanX;\n    const dy = y[i] - meanY;\n    numerator += dx * dy;\n    denomX += dx * dx;\n    denomY += dy * dy;\n  }\n  \n  return numerator / Math.sqrt(denomX * denomY);\n};\n\n// In-memory storage for datasets and analysis results\nconst dataStore = new Map();\nconst analysisResults = new Map();\n\n// 1. Statistical Analysis Tool\nexport const statisticalAnalysis = createTool({\n  id: 'statistical-analysis',\n  description: 'Perform comprehensive statistical analysis on a dataset',\n  inputSchema: z.object({\n    datasetId: z.string().describe('ID of the dataset to analyze'),\n    metrics: z.array(z.enum(['mean', 'median', 'mode', 'std_dev', 'variance', 'skewness', 'kurtosis', 'quantiles']))\n      .optional()\n      .describe('Specific metrics to calculate')\n  }),\n  outputSchema: z.object({\n    summary: z.object({\n      count: z.number(),\n      mean: z.number(),\n      median: z.number(),\n      std_dev: z.number(),\n      min: z.number(),\n      max: z.number(),\n      quantiles: z.object({\n        q25: z.number(),\n        q50: z.number(),\n        q75: z.number()\n      })\n    }),\n    distribution: z.object({\n      skewness: z.number(),\n      kurtosis: z.number(),\n      normality_test: z.object({\n        statistic: z.number(),\n        p_value: z.number(),\n        is_normal: z.boolean()\n      })\n    })\n  }),\n  execute: async ({ datasetId, metrics = ['mean', 'median', 'std_dev'] }) => {\n    // Simulate dataset retrieval\n    let data = dataStore.get(datasetId);\n    if (!data) {\n      data = generateRandomData(1000, 0, 100);\n      dataStore.set(datasetId, data);\n    }\n    \n    const sortedData = [...data].sort((a, b) => a - b);\n    const n = data.length;\n    \n    const summary = {\n      count: n,\n      mean: calculateMean(data),\n      median: sortedData[Math.floor(n / 2)],\n      std_dev: calculateStdDev(data),\n      min: sortedData[0],\n      max: sortedData[n - 1],\n      quantiles: {\n        q25: sortedData[Math.floor(n * 0.25)],\n        q50: sortedData[Math.floor(n * 0.5)],\n        q75: sortedData[Math.floor(n * 0.75)]\n      }\n    };\n    \n    // Simulate skewness and kurtosis calculations\n    const mean = summary.mean;\n    const stdDev = summary.std_dev;\n    const skewness = data.reduce((sum, val) => sum + Math.pow((val - mean) / stdDev, 3), 0) / n;\n    const kurtosis = data.reduce((sum, val) => sum + Math.pow((val - mean) / stdDev, 4), 0) / n - 3;\n    \n    // Simulate normality test\n    const distribution = {\n      skewness,\n      kurtosis,\n      normality_test: {\n        statistic: Math.abs(skewness) + Math.abs(kurtosis),\n        p_value: Math.random() * 0.1 + 0.05,\n        is_normal: Math.abs(skewness) < 0.5 && Math.abs(kurtosis) < 3\n      }\n    };\n    \n    const result = { summary, distribution };\n    analysisResults.set(`stats_${datasetId}`, result);\n    \n    return result;\n  }\n});\n\n// 2. Data Visualization Tool\nexport const dataVisualization = createTool({\n  id: 'data-visualization',\n  description: 'Generate data visualization configurations and insights',\n  inputSchema: z.object({\n    datasetId: z.string().describe('ID of the dataset to visualize'),\n    visualizationType: z.enum(['histogram', 'scatter', 'line', 'bar', 'box', 'heatmap', 'pie']),\n    options: z.object({\n      xAxis: z.string().optional(),\n      yAxis: z.string().optional(),\n      groupBy: z.string().optional(),\n      bins: z.number().optional(),\n      colors: z.array(z.string()).optional()\n    }).optional()\n  }),\n  outputSchema: z.object({\n    chartConfig: z.object({\n      type: z.string(),\n      data: z.array(z.any()),\n      layout: z.object({\n        title: z.string(),\n        xaxis: z.object({ title: z.string() }),\n        yaxis: z.object({ title: z.string() })\n      }),\n      insights: z.array(z.string())\n    }),\n    visualizationUrl: z.string(),\n    recommendations: z.array(z.string())\n  }),\n  execute: async ({ datasetId, visualizationType, options = {} }) => {\n    let data = dataStore.get(datasetId);\n    if (!data) {\n      data = generateRandomData(100);\n      dataStore.set(datasetId, data);\n    }\n    \n    const chartData = [];\n    const insights = [];\n    \n    switch (visualizationType) {\n      case 'histogram':\n        const bins = options.bins || 10;\n        const binWidth = (Math.max(...data) - Math.min(...data)) / bins;\n        const histogram = Array(bins).fill(0);\n        \n        data.forEach(value => {\n          const binIndex = Math.min(Math.floor((value - Math.min(...data)) / binWidth), bins - 1);\n          histogram[binIndex]++;\n        });\n        \n        chartData.push({\n          x: histogram.map((_, i) => `Bin ${i + 1}`),\n          y: histogram,\n          type: 'bar'\n        });\n        \n        insights.push(`Data shows ${histogram.filter(h => h > data.length / bins * 1.5).length} bins with above-average frequency`);\n        insights.push(`Distribution appears ${Math.max(...histogram) / Math.min(...histogram.filter(h => h > 0)) > 3 ? 'skewed' : 'relatively uniform'}`);\n        break;\n        \n      case 'scatter':\n        const xData = generateRandomData(100);\n        const yData = xData.map(x => x * 2 + Math.random() * 20);\n        \n        chartData.push({\n          x: xData,\n          y: yData,\n          mode: 'markers',\n          type: 'scatter'\n        });\n        \n        const correlation = calculateCorrelation(xData, yData);\n        insights.push(`Correlation coefficient: ${correlation.toFixed(3)}`);\n        insights.push(`Relationship appears ${Math.abs(correlation) > 0.7 ? 'strong' : Math.abs(correlation) > 0.3 ? 'moderate' : 'weak'}`);\n        break;\n        \n      default:\n        chartData.push({\n          x: Array.from({ length: data.length }, (_, i) => i),\n          y: data,\n          type: visualizationType\n        });\n        insights.push(`${visualizationType} chart generated with ${data.length} data points`);\n    }\n    \n    const recommendations = [\n      `Consider using ${visualizationType === 'histogram' ? 'box plot' : 'histogram'} for distribution analysis`,\n      `Add trend lines to identify patterns`,\n      `Use color coding to highlight outliers`\n    ];\n    \n    return {\n      chartConfig: {\n        type: visualizationType,\n        data: chartData,\n        layout: {\n          title: `${visualizationType.charAt(0).toUpperCase() + visualizationType.slice(1)} Chart Analysis`,\n          xaxis: { title: options.xAxis || 'X Axis' },\n          yaxis: { title: options.yAxis || 'Y Axis' }\n        },\n        insights\n      },\n      visualizationUrl: `https://charts.example.com/${datasetId}/${visualizationType}`,\n      recommendations\n    };\n  }\n});\n\n// 3. Correlation Analysis Tool\nexport const correlationAnalysis = createTool({\n  id: 'correlation-analysis',\n  description: 'Analyze correlations between variables in a dataset',\n  inputSchema: z.object({\n    datasetId: z.string().describe('ID of the dataset'),\n    variables: z.array(z.string()).min(2).describe('Variables to analyze for correlation'),\n    method: z.enum(['pearson', 'spearman', 'kendall']).default('pearson')\n  }),\n  outputSchema: z.object({\n    correlationMatrix: z.record(z.record(z.number())),\n    significantCorrelations: z.array(z.object({\n      var1: z.string(),\n      var2: z.string(),\n      correlation: z.number(),\n      p_value: z.number(),\n      strength: z.enum(['weak', 'moderate', 'strong'])\n    })),\n    insights: z.array(z.string())\n  }),\n  execute: async ({ datasetId, variables, method }) => {\n    // Simulate multi-variable dataset\n    const dataset = {};\n    variables.forEach(varName => {\n      dataset[varName] = generateRandomData(100);\n    });\n    \n    const correlationMatrix = {};\n    const significantCorrelations = [];\n    \n    // Calculate correlation matrix\n    variables.forEach(var1 => {\n      correlationMatrix[var1] = {};\n      variables.forEach(var2 => {\n        if (var1 === var2) {\n          correlationMatrix[var1][var2] = 1.0;\n        } else {\n          const corr = calculateCorrelation(dataset[var1], dataset[var2]);\n          correlationMatrix[var1][var2] = corr;\n          \n          if (Math.abs(corr) > 0.3 && var1 < var2) {\n            significantCorrelations.push({\n              var1,\n              var2,\n              correlation: corr,\n              p_value: Math.random() * 0.1,\n              strength: Math.abs(corr) > 0.7 ? 'strong' : Math.abs(corr) > 0.5 ? 'moderate' : 'weak'\n            });\n          }\n        }\n      });\n    });\n    \n    const insights = [\n      `Found ${significantCorrelations.length} significant correlations among ${variables.length} variables`,\n      `Strongest correlation: ${significantCorrelations.length > 0 ? \n        `${significantCorrelations[0].var1} and ${significantCorrelations[0].var2} (r=${significantCorrelations[0].correlation.toFixed(3)})` : \n        'No strong correlations found'}`,\n      `Analysis method: ${method} correlation`\n    ];\n    \n    return {\n      correlationMatrix,\n      significantCorrelations: significantCorrelations.sort((a, b) => Math.abs(b.correlation) - Math.abs(a.correlation)),\n      insights\n    };\n  }\n});\n\n// 4. Regression Analysis Tool\nexport const regressionAnalysis = createTool({\n  id: 'regression-analysis',\n  description: 'Perform regression analysis to model relationships between variables',\n  inputSchema: z.object({\n    datasetId: z.string(),\n    dependentVariable: z.string(),\n    independentVariables: z.array(z.string()).min(1),\n    regressionType: z.enum(['linear', 'polynomial', 'logistic', 'ridge', 'lasso']).default('linear')\n  }),\n  outputSchema: z.object({\n    model: z.object({\n      coefficients: z.record(z.number()),\n      intercept: z.number(),\n      r_squared: z.number(),\n      adjusted_r_squared: z.number(),\n      standard_error: z.number()\n    }),\n    diagnostics: z.object({\n      residuals: z.object({\n        mean: z.number(),\n        std: z.number(),\n        normality_p_value: z.number()\n      }),\n      multicollinearity: z.object({\n        vif_scores: z.record(z.number()),\n        condition_number: z.number()\n      })\n    }),\n    predictions: z.array(z.object({\n      actual: z.number(),\n      predicted: z.number(),\n      residual: z.number()\n    })).optional()\n  }),\n  execute: async ({ datasetId, dependentVariable, independentVariables, regressionType }) => {\n    // Simulate regression coefficients\n    const coefficients = {};\n    independentVariables.forEach(var_ => {\n      coefficients[var_] = Math.random() * 2 - 1; // Random coefficient between -1 and 1\n    });\n    \n    const intercept = Math.random() * 10;\n    const r_squared = 0.7 + Math.random() * 0.25; // R² between 0.7 and 0.95\n    const n = 100;\n    const p = independentVariables.length;\n    const adjusted_r_squared = 1 - (1 - r_squared) * (n - 1) / (n - p - 1);\n    \n    // Simulate VIF scores for multicollinearity\n    const vif_scores = {};\n    independentVariables.forEach(var_ => {\n      vif_scores[var_] = 1 + Math.random() * 4; // VIF between 1 and 5\n    });\n    \n    // Generate some predictions\n    const predictions = Array.from({ length: 10 }, () => {\n      const actual = Math.random() * 100;\n      const predicted = actual + (Math.random() - 0.5) * 10;\n      return {\n        actual,\n        predicted,\n        residual: actual - predicted\n      };\n    });\n    \n    return {\n      model: {\n        coefficients,\n        intercept,\n        r_squared,\n        adjusted_r_squared,\n        standard_error: Math.sqrt(1 - r_squared) * 10\n      },\n      diagnostics: {\n        residuals: {\n          mean: 0.02,\n          std: 5.3,\n          normality_p_value: 0.45\n        },\n        multicollinearity: {\n          vif_scores,\n          condition_number: Math.max(...Object.values(vif_scores)) * 2\n        }\n      },\n      predictions: predictions.slice(0, 5)\n    };\n  }\n});\n\n// 5. Clustering Analysis Tool\nexport const clusteringAnalysis = createTool({\n  id: 'clustering-analysis',\n  description: 'Perform clustering analysis to identify groups in data',\n  inputSchema: z.object({\n    datasetId: z.string(),\n    features: z.array(z.string()).min(2),\n    algorithm: z.enum(['kmeans', 'hierarchical', 'dbscan', 'gaussian_mixture']).default('kmeans'),\n    numClusters: z.number().min(2).max(10).optional()\n  }),\n  outputSchema: z.object({\n    clusters: z.array(z.object({\n      id: z.number(),\n      center: z.record(z.number()),\n      size: z.number(),\n      variance: z.number()\n    })),\n    assignments: z.array(z.object({\n      dataPoint: z.number(),\n      cluster: z.number(),\n      distance: z.number()\n    })),\n    metrics: z.object({\n      silhouette_score: z.number(),\n      davies_bouldin_score: z.number(),\n      calinski_harabasz_score: z.number()\n    }),\n    optimal_clusters: z.number()\n  }),\n  execute: async ({ datasetId, features, algorithm, numClusters }) => {\n    const k = numClusters || Math.floor(Math.random() * 3) + 3; // 3-5 clusters if not specified\n    \n    // Generate cluster centers\n    const clusters = Array.from({ length: k }, (_, i) => {\n      const center = {};\n      features.forEach(feature => {\n        center[feature] = Math.random() * 100;\n      });\n      \n      return {\n        id: i,\n        center,\n        size: Math.floor(Math.random() * 50) + 20,\n        variance: Math.random() * 10 + 5\n      };\n    });\n    \n    // Generate sample assignments\n    const assignments = Array.from({ length: 20 }, (_, i) => ({\n      dataPoint: i,\n      cluster: Math.floor(Math.random() * k),\n      distance: Math.random() * 20\n    }));\n    \n    // Clustering quality metrics\n    const metrics = {\n      silhouette_score: 0.4 + Math.random() * 0.4, // 0.4-0.8\n      davies_bouldin_score: 0.5 + Math.random() * 0.5, // 0.5-1.0 (lower is better)\n      calinski_harabasz_score: 100 + Math.random() * 200 // 100-300\n    };\n    \n    return {\n      clusters,\n      assignments: assignments.slice(0, 10),\n      metrics,\n      optimal_clusters: k\n    };\n  }\n});\n\n// 6. Time Series Analysis Tool\nexport const timeSeriesAnalysis = createTool({\n  id: 'time-series-analysis',\n  description: 'Analyze time series data for trends, seasonality, and forecasting',\n  inputSchema: z.object({\n    datasetId: z.string(),\n    timeColumn: z.string(),\n    valueColumn: z.string(),\n    frequency: z.enum(['daily', 'weekly', 'monthly', 'quarterly', 'yearly']).default('daily'),\n    forecastPeriods: z.number().min(1).max(365).optional()\n  }),\n  outputSchema: z.object({\n    decomposition: z.object({\n      trend: z.array(z.number()),\n      seasonal: z.array(z.number()),\n      residual: z.array(z.number())\n    }),\n    statistics: z.object({\n      mean: z.number(),\n      variance: z.number(),\n      autocorrelation: z.array(z.number()),\n      partial_autocorrelation: z.array(z.number()),\n      stationarity: z.object({\n        adf_statistic: z.number(),\n        p_value: z.number(),\n        is_stationary: z.boolean()\n      })\n    }),\n    forecast: z.object({\n      values: z.array(z.number()),\n      confidence_intervals: z.array(z.object({\n        lower: z.number(),\n        upper: z.number()\n      })),\n      model_type: z.string(),\n      accuracy_metrics: z.object({\n        mae: z.number(),\n        rmse: z.number(),\n        mape: z.number()\n      })\n    }).optional()\n  }),\n  execute: async ({ datasetId, timeColumn, valueColumn, frequency, forecastPeriods }) => {\n    const dataLength = 100;\n    const trend = Array.from({ length: dataLength }, (_, i) => i * 0.5 + 50);\n    const seasonal = Array.from({ length: dataLength }, (_, i) => \n      10 * Math.sin(2 * Math.PI * i / 12) // Monthly seasonality\n    );\n    const residual = Array.from({ length: dataLength }, () => (Math.random() - 0.5) * 5);\n    \n    const timeSeries = trend.map((t, i) => t + seasonal[i] + residual[i]);\n    \n    // Calculate autocorrelations\n    const autocorrelation = Array.from({ length: 10 }, (_, lag) => \n      Math.exp(-lag * 0.3) * (0.8 + Math.random() * 0.2)\n    );\n    \n    let forecast = null;\n    if (forecastPeriods) {\n      const lastValue = timeSeries[timeSeries.length - 1];\n      const trendSlope = 0.5;\n      \n      forecast = {\n        values: Array.from({ length: forecastPeriods }, (_, i) => \n          lastValue + trendSlope * (i + 1) + seasonal[i % 12]\n        ),\n        confidence_intervals: Array.from({ length: forecastPeriods }, (_, i) => ({\n          lower: lastValue + trendSlope * (i + 1) - 10 * (1 + i * 0.1),\n          upper: lastValue + trendSlope * (i + 1) + 10 * (1 + i * 0.1)\n        })),\n        model_type: 'SARIMA(1,1,1)(1,1,1)12',\n        accuracy_metrics: {\n          mae: 3.2,\n          rmse: 4.5,\n          mape: 5.8\n        }\n      };\n    }\n    \n    return {\n      decomposition: {\n        trend: trend.slice(-20),\n        seasonal: seasonal.slice(-20),\n        residual: residual.slice(-20)\n      },\n      statistics: {\n        mean: calculateMean(timeSeries),\n        variance: calculateStdDev(timeSeries) ** 2,\n        autocorrelation,\n        partial_autocorrelation: autocorrelation.map(ac => ac * 0.8),\n        stationarity: {\n          adf_statistic: -3.45,\n          p_value: 0.01,\n          is_stationary: true\n        }\n      },\n      forecast\n    };\n  }\n});\n\n// 7. Data Quality Check Tool\nexport const dataQualityCheck = createTool({\n  id: 'data-quality-check',\n  description: 'Perform comprehensive data quality assessment',\n  inputSchema: z.object({\n    datasetId: z.string(),\n    columns: z.array(z.string()).optional(),\n    checks: z.array(z.enum(['completeness', 'uniqueness', 'validity', 'consistency', 'accuracy'])).optional()\n  }),\n  outputSchema: z.object({\n    overview: z.object({\n      totalRows: z.number(),\n      totalColumns: z.number(),\n      overallQualityScore: z.number()\n    }),\n    columnMetrics: z.record(z.object({\n      dataType: z.string(),\n      nullCount: z.number(),\n      nullPercentage: z.number(),\n      uniqueCount: z.number(),\n      duplicateCount: z.number(),\n      outlierCount: z.number(),\n      validityScore: z.number()\n    })),\n    issues: z.array(z.object({\n      column: z.string(),\n      issueType: z.string(),\n      severity: z.enum(['low', 'medium', 'high']),\n      description: z.string(),\n      affectedRows: z.number()\n    })),\n    recommendations: z.array(z.string())\n  }),\n  execute: async ({ datasetId, columns = ['col1', 'col2', 'col3'], checks }) => {\n    const totalRows = 10000;\n    const totalColumns = columns.length;\n    \n    const columnMetrics = {};\n    const issues = [];\n    \n    columns.forEach(col => {\n      const nullCount = Math.floor(Math.random() * 0.1 * totalRows);\n      const uniqueCount = Math.floor(totalRows * (0.7 + Math.random() * 0.3));\n      const duplicateCount = totalRows - uniqueCount;\n      const outlierCount = Math.floor(Math.random() * 0.05 * totalRows);\n      \n      columnMetrics[col] = {\n        dataType: ['numeric', 'string', 'date'][Math.floor(Math.random() * 3)],\n        nullCount,\n        nullPercentage: (nullCount / totalRows) * 100,\n        uniqueCount,\n        duplicateCount,\n        outlierCount,\n        validityScore: 0.85 + Math.random() * 0.15\n      };\n      \n      if (nullCount > totalRows * 0.05) {\n        issues.push({\n          column: col,\n          issueType: 'missing_data',\n          severity: nullCount > totalRows * 0.1 ? 'high' : 'medium',\n          description: `${nullCount} missing values detected`,\n          affectedRows: nullCount\n        });\n      }\n      \n      if (outlierCount > totalRows * 0.03) {\n        issues.push({\n          column: col,\n          issueType: 'outliers',\n          severity: 'medium',\n          description: `${outlierCount} potential outliers detected`,\n          affectedRows: outlierCount\n        });\n      }\n    });\n    \n    const overallQualityScore = \n      Object.values(columnMetrics).reduce((sum, metric) => sum + metric.validityScore, 0) / columns.length;\n    \n    const recommendations = [\n      'Consider imputing missing values using mean/median for numeric columns',\n      'Investigate and handle outliers based on domain knowledge',\n      'Standardize date formats across all date columns',\n      'Create data validation rules to prevent future quality issues'\n    ];\n    \n    return {\n      overview: {\n        totalRows,\n        totalColumns,\n        overallQualityScore\n      },\n      columnMetrics,\n      issues: issues.sort((a, b) => {\n        const severityOrder = { high: 0, medium: 1, low: 2 };\n        return severityOrder[a.severity] - severityOrder[b.severity];\n      }),\n      recommendations\n    };\n  }\n});\n\n// 8. Data Sampling Tool\nexport const dataSampling = createTool({\n  id: 'data-sampling',\n  description: 'Create representative samples from large datasets',\n  inputSchema: z.object({\n    datasetId: z.string(),\n    samplingMethod: z.enum(['random', 'stratified', 'systematic', 'cluster', 'bootstrap']),\n    sampleSize: z.number().min(1),\n    stratifyColumn: z.string().optional(),\n    randomSeed: z.number().optional()\n  }),\n  outputSchema: z.object({\n    sample: z.object({\n      size: z.number(),\n      method: z.string(),\n      representativeness: z.object({\n        populationSize: z.number(),\n        samplingRatio: z.number(),\n        confidenceLevel: z.number(),\n        marginOfError: z.number()\n      })\n    }),\n    statistics: z.object({\n      population: z.object({\n        mean: z.number(),\n        std: z.number()\n      }),\n      sample: z.object({\n        mean: z.number(),\n        std: z.number()\n      }),\n      bias: z.number()\n    }),\n    stratumDistribution: z.record(z.object({\n      populationCount: z.number(),\n      sampleCount: z.number(),\n      percentage: z.number()\n    })).optional()\n  }),\n  execute: async ({ datasetId, samplingMethod, sampleSize, stratifyColumn, randomSeed }) => {\n    const populationSize = 100000;\n    const actualSampleSize = Math.min(sampleSize, populationSize);\n    const samplingRatio = actualSampleSize / populationSize;\n    \n    // Population statistics\n    const popMean = 50 + Math.random() * 10;\n    const popStd = 15 + Math.random() * 5;\n    \n    // Sample statistics (should be close to population)\n    const sampleMean = popMean + (Math.random() - 0.5) * 2;\n    const sampleStd = popStd + (Math.random() - 0.5) * 1;\n    \n    let stratumDistribution = null;\n    if (samplingMethod === 'stratified' && stratifyColumn) {\n      const strata = ['A', 'B', 'C', 'D'];\n      stratumDistribution = {};\n      \n      strata.forEach(stratum => {\n        const populationCount = Math.floor(populationSize * (0.15 + Math.random() * 0.2));\n        const sampleCount = Math.floor(populationCount * samplingRatio);\n        \n        stratumDistribution[stratum] = {\n          populationCount,\n          sampleCount,\n          percentage: (sampleCount / actualSampleSize) * 100\n        };\n      });\n    }\n    \n    // Calculate confidence metrics\n    const confidenceLevel = 0.95;\n    const z = 1.96; // for 95% confidence\n    const marginOfError = z * (popStd / Math.sqrt(actualSampleSize));\n    \n    return {\n      sample: {\n        size: actualSampleSize,\n        method: samplingMethod,\n        representativeness: {\n          populationSize,\n          samplingRatio,\n          confidenceLevel,\n          marginOfError\n        }\n      },\n      statistics: {\n        population: {\n          mean: popMean,\n          std: popStd\n        },\n        sample: {\n          mean: sampleMean,\n          std: sampleStd\n        },\n        bias: sampleMean - popMean\n      },\n      stratumDistribution\n    };\n  }\n});\n\n// 9. Hypothesis Testing Tool\nexport const hypothesisTesting = createTool({\n  id: 'hypothesis-testing',\n  description: 'Perform statistical hypothesis testing',\n  inputSchema: z.object({\n    testType: z.enum(['t-test', 'chi-square', 'anova', 'mann-whitney', 'correlation', 'proportion']),\n    data: z.object({\n      group1: z.string().describe('Dataset ID or column for group 1'),\n      group2: z.string().optional().describe('Dataset ID or column for group 2'),\n      additionalGroups: z.array(z.string()).optional()\n    }),\n    hypotheses: z.object({\n      null: z.string(),\n      alternative: z.string(),\n      direction: z.enum(['two-tailed', 'left-tailed', 'right-tailed']).default('two-tailed')\n    }),\n    alpha: z.number().min(0).max(1).default(0.05)\n  }),\n  outputSchema: z.object({\n    testResults: z.object({\n      statistic: z.number(),\n      pValue: z.number(),\n      degreesOfFreedom: z.number().optional(),\n      criticalValue: z.number(),\n      rejectNull: z.boolean()\n    }),\n    effectSize: z.object({\n      value: z.number(),\n      interpretation: z.enum(['negligible', 'small', 'medium', 'large'])\n    }),\n    powerAnalysis: z.object({\n      observedPower: z.number(),\n      requiredSampleSize: z.number()\n    }),\n    assumptions: z.object({\n      normality: z.object({\n        passed: z.boolean(),\n        details: z.string()\n      }),\n      homogeneity: z.object({\n        passed: z.boolean(),\n        details: z.string()\n      }).optional()\n    }),\n    conclusion: z.string()\n  }),\n  execute: async ({ testType, data, hypotheses, alpha }) => {\n    // Simulate test results based on test type\n    let statistic, pValue, degreesOfFreedom, effectSizeValue;\n    \n    switch (testType) {\n      case 't-test':\n        statistic = (Math.random() - 0.5) * 4; // t-statistic between -2 and 2\n        degreesOfFreedom = 98;\n        pValue = Math.random() * 0.1;\n        effectSizeValue = Math.abs(statistic) / Math.sqrt(100); // Cohen's d\n        break;\n        \n      case 'chi-square':\n        statistic = Math.random() * 20;\n        degreesOfFreedom = 4;\n        pValue = Math.random() * 0.1;\n        effectSizeValue = Math.sqrt(statistic / 100); // Cramér's V\n        break;\n        \n      case 'anova':\n        statistic = Math.random() * 10; // F-statistic\n        degreesOfFreedom = 3;\n        pValue = Math.random() * 0.1;\n        effectSizeValue = statistic / (statistic + degreesOfFreedom); // Eta squared\n        break;\n        \n      default:\n        statistic = Math.random() * 3;\n        pValue = Math.random() * 0.1;\n        effectSizeValue = Math.random() * 0.8;\n    }\n    \n    const rejectNull = pValue < alpha;\n    const criticalValue = hypotheses.direction === 'two-tailed' ? 1.96 : 1.645;\n    \n    // Effect size interpretation\n    const effectInterpretation = \n      effectSizeValue < 0.2 ? 'negligible' :\n      effectSizeValue < 0.5 ? 'small' :\n      effectSizeValue < 0.8 ? 'medium' : 'large';\n    \n    // Power analysis\n    const observedPower = rejectNull ? 0.8 + Math.random() * 0.15 : 0.3 + Math.random() * 0.3;\n    const requiredSampleSize = Math.ceil((2.8 / effectSizeValue) ** 2) * 2;\n    \n    const conclusion = rejectNull\n      ? `Reject the null hypothesis. There is sufficient evidence to support the alternative hypothesis (p = ${pValue.toFixed(4)} < α = ${alpha}).`\n      : `Fail to reject the null hypothesis. There is insufficient evidence to support the alternative hypothesis (p = ${pValue.toFixed(4)} > α = ${alpha}).`;\n    \n    return {\n      testResults: {\n        statistic,\n        pValue,\n        degreesOfFreedom,\n        criticalValue,\n        rejectNull\n      },\n      effectSize: {\n        value: effectSizeValue,\n        interpretation: effectInterpretation\n      },\n      powerAnalysis: {\n        observedPower,\n        requiredSampleSize\n      },\n      assumptions: {\n        normality: {\n          passed: Math.random() > 0.2,\n          details: 'Shapiro-Wilk test suggests data is approximately normal'\n        },\n        homogeneity: testType === 't-test' ? {\n          passed: Math.random() > 0.3,\n          details: \"Levene's test indicates equal variances\"\n        } : undefined\n      },\n      conclusion\n    };\n  }\n});\n\n// 10. Report Generation Tool\nexport const reportGeneration = createTool({\n  id: 'report-generation',\n  description: 'Generate comprehensive data analysis reports',\n  inputSchema: z.object({\n    analysisIds: z.array(z.string()).describe('IDs of completed analyses to include'),\n    reportType: z.enum(['executive', 'technical', 'dashboard', 'presentation']),\n    sections: z.array(z.enum(['summary', 'methodology', 'findings', 'visualizations', 'recommendations', 'appendix'])).optional(),\n    format: z.enum(['pdf', 'html', 'markdown', 'powerpoint']).default('pdf')\n  }),\n  outputSchema: z.object({\n    report: z.object({\n      id: z.string(),\n      title: z.string(),\n      generatedAt: z.string(),\n      sections: z.array(z.object({\n        title: z.string(),\n        content: z.string(),\n        charts: z.array(z.string()).optional(),\n        tables: z.array(z.string()).optional()\n      })),\n      metadata: z.object({\n        pageCount: z.number(),\n        wordCount: z.number(),\n        analysisCount: z.number()\n      })\n    }),\n    downloadUrl: z.string(),\n    shareableLinks: z.array(z.object({\n      type: z.string(),\n      url: z.string(),\n      expiresAt: z.string()\n    }))\n  }),\n  execute: async ({ analysisIds, reportType, sections = ['summary', 'findings', 'recommendations'], format }) => {\n    const reportId = `report_${Date.now()}`;\n    const reportSections = [];\n    \n    // Executive Summary\n    if (sections.includes('summary')) {\n      reportSections.push({\n        title: 'Executive Summary',\n        content: `This report presents a comprehensive analysis of ${analysisIds.length} datasets. Key findings indicate significant patterns and correlations that provide actionable insights for decision-making. The analysis employed advanced statistical methods including regression analysis, clustering, and time series forecasting.`,\n        charts: ['summary_dashboard.png'],\n        tables: ['key_metrics_table.csv']\n      });\n    }\n    \n    // Methodology\n    if (sections.includes('methodology')) {\n      reportSections.push({\n        title: 'Methodology',\n        content: 'The analysis utilized state-of-the-art statistical techniques including:\\n- Descriptive statistics and distribution analysis\\n- Correlation and regression modeling\\n- Machine learning clustering algorithms\\n- Time series decomposition and forecasting\\n- Hypothesis testing with p < 0.05 significance level',\n        charts: ['methodology_flowchart.png']\n      });\n    }\n    \n    // Key Findings\n    if (sections.includes('findings')) {\n      reportSections.push({\n        title: 'Key Findings',\n        content: `1. Identified 3 distinct customer segments with unique behavioral patterns\\n2. Strong correlation (r=0.78) between marketing spend and revenue\\n3. Seasonal trends show 23% increase in Q4 activity\\n4. Predictive model achieves 92% accuracy for customer churn\\n5. Data quality assessment reveals 95% completeness across critical fields`,\n        charts: ['correlation_heatmap.png', 'cluster_visualization.png', 'time_series_forecast.png'],\n        tables: ['regression_coefficients.csv', 'cluster_characteristics.csv']\n      });\n    }\n    \n    // Recommendations\n    if (sections.includes('recommendations')) {\n      reportSections.push({\n        title: 'Recommendations',\n        content: '1. Increase marketing budget allocation to high-ROI channels identified in the analysis\\n2. Implement targeted retention strategies for at-risk customer segments\\n3. Optimize inventory levels based on seasonal demand patterns\\n4. Establish automated data quality monitoring processes\\n5. Deploy predictive models in production for real-time decision support',\n        tables: ['action_plan.csv']\n      });\n    }\n    \n    const totalWords = reportSections.reduce((sum, section) => \n      sum + section.content.split(' ').length, 0\n    );\n    \n    return {\n      report: {\n        id: reportId,\n        title: `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Data Analysis Report`,\n        generatedAt: new Date().toISOString(),\n        sections: reportSections,\n        metadata: {\n          pageCount: Math.ceil(totalWords / 250), // ~250 words per page\n          wordCount: totalWords,\n          analysisCount: analysisIds.length\n        }\n      },\n      downloadUrl: `https://reports.example.com/download/${reportId}.${format}`,\n      shareableLinks: [\n        {\n          type: 'view',\n          url: `https://reports.example.com/view/${reportId}`,\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days\n        },\n        {\n          type: 'collaborate',\n          url: `https://reports.example.com/collaborate/${reportId}`,\n          expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days\n        }\n      ]\n    };\n  }\n});\n\n// Export all tools\nexport const dataAnalysisTools = {\n  statisticalAnalysis,\n  dataVisualization,\n  correlationAnalysis,\n  regressionAnalysis,\n  clusteringAnalysis,\n  timeSeriesAnalysis,\n  dataQualityCheck,\n  dataSampling,\n  hypothesisTesting,\n  reportGeneration\n};"],"names":["z"],"mappings":"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"}