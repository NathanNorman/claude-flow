{"version":3,"file":"5c049f52-a0d8-42bd-b361-131a4824e360.mjs","sources":["../../../src/mastra/tools/product-management-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\nconst featurePrioritization = createTool({\n  id: 'feature-prioritization',\n  name: 'Feature Prioritization',\n  description: 'Prioritize features using RICE (Reach, Impact, Confidence, Effort) framework',\n  inputSchema: z.object({\n    features: z.array(z.object({\n      name: z.string(),\n      reach: z.number().min(0).max(100),\n      impact: z.number().min(0).max(3),\n      confidence: z.number().min(0).max(100),\n      effort: z.number().min(0.1)\n    }))\n  }),\n  outputSchema: z.object({\n    prioritizedFeatures: z.array(z.object({\n      name: z.string(),\n      riceScore: z.number(),\n      priority: z.string()\n    }))\n  }),\n  execute: async ({ features }) => {\n    const prioritizedFeatures = features.map(feature => {\n      const riceScore = (feature.reach * feature.impact * feature.confidence) / feature.effort;\n      return {\n        name: feature.name,\n        riceScore: Math.round(riceScore * 100) / 100,\n        priority: riceScore > 50 ? 'High' : riceScore > 20 ? 'Medium' : 'Low'\n      };\n    }).sort((a, b) => b.riceScore - a.riceScore);\n\n    return { prioritizedFeatures };\n  }\n});\n\nconst userStoryGeneration = createTool({\n  id: 'user-story-generation',\n  name: 'User Story Generation',\n  description: 'Generate user stories from requirements',\n  inputSchema: z.object({\n    requirements: z.array(z.string()),\n    userPersona: z.string(),\n    acceptanceCriteria: z.boolean().default(true)\n  }),\n  outputSchema: z.object({\n    userStories: z.array(z.object({\n      story: z.string(),\n      acceptanceCriteria: z.array(z.string()).optional()\n    }))\n  }),\n  execute: async ({ requirements, userPersona, acceptanceCriteria }) => {\n    const userStories = requirements.map(requirement => {\n      const story = `As a ${userPersona}, I want to ${requirement.toLowerCase()} so that I can achieve better outcomes`;\n      const criteria = acceptanceCriteria ? [\n        `Given the user is a ${userPersona}`,\n        `When they ${requirement.toLowerCase()}`,\n        'Then the system should provide expected results',\n        'And the user experience should be seamless'\n      ] : undefined;\n\n      return {\n        story,\n        ...(criteria && { acceptanceCriteria: criteria })\n      };\n    });\n\n    return { userStories };\n  }\n});\n\nconst roadmapPlanning = createTool({\n  id: 'roadmap-planning',\n  name: 'Roadmap Planning',\n  description: 'Create product roadmaps with timeline and milestones',\n  inputSchema: z.object({\n    productName: z.string(),\n    quarters: z.number().min(1).max(8),\n    themes: z.array(z.string()),\n    startDate: z.string()\n  }),\n  outputSchema: z.object({\n    roadmap: z.object({\n      productName: z.string(),\n      timeline: z.array(z.object({\n        quarter: z.string(),\n        theme: z.string(),\n        objectives: z.array(z.string()),\n        keyResults: z.array(z.string())\n      }))\n    })\n  }),\n  execute: async ({ productName, quarters, themes, startDate }) => {\n    const timeline = [];\n    const startYear = new Date(startDate).getFullYear();\n    const startQuarter = Math.floor(new Date(startDate).getMonth() / 3) + 1;\n\n    for (let i = 0; i < quarters; i++) {\n      const currentQuarter = ((startQuarter + i - 1) % 4) + 1;\n      const currentYear = startYear + Math.floor((startQuarter + i - 1) / 4);\n      const theme = themes[i % themes.length];\n\n      timeline.push({\n        quarter: `Q${currentQuarter} ${currentYear}`,\n        theme,\n        objectives: [\n          `Launch ${theme} capabilities`,\n          `Achieve user adoption targets`,\n          `Gather feedback and iterate`\n        ],\n        keyResults: [\n          '80% feature completion',\n          '50% user adoption rate',\n          'NPS score > 40'\n        ]\n      });\n    }\n\n    return {\n      roadmap: {\n        productName,\n        timeline\n      }\n    };\n  }\n});\n\nconst marketAnalysis = createTool({\n  id: 'market-analysis',\n  name: 'Market Analysis',\n  description: 'Analyze market opportunities and trends',\n  inputSchema: z.object({\n    industry: z.string(),\n    targetMarket: z.string(),\n    marketSize: z.number(),\n    growthRate: z.number()\n  }),\n  outputSchema: z.object({\n    analysis: z.object({\n      opportunity: z.string(),\n      tam: z.number(),\n      sam: z.number(),\n      som: z.number(),\n      trends: z.array(z.string()),\n      recommendations: z.array(z.string())\n    })\n  }),\n  execute: async ({ industry, targetMarket, marketSize, growthRate }) => {\n    const tam = marketSize;\n    const sam = marketSize * 0.3;\n    const som = sam * 0.1;\n\n    return {\n      analysis: {\n        opportunity: `${targetMarket} in ${industry} industry`,\n        tam,\n        sam,\n        som,\n        trends: [\n          'Digital transformation accelerating',\n          'Increased demand for automation',\n          'Focus on user experience',\n          'Mobile-first approaches gaining traction',\n          'AI/ML integration becoming standard'\n        ],\n        recommendations: [\n          `Focus on ${targetMarket} segment with tailored solutions`,\n          'Invest in digital capabilities',\n          'Build strategic partnerships',\n          'Develop differentiated value propositions',\n          `Target ${growthRate}% annual growth`\n        ]\n      }\n    };\n  }\n});\n\nconst competitorAnalysis = createTool({\n  id: 'competitor-analysis',\n  name: 'Competitor Analysis',\n  description: 'Analyze competitors and market positioning',\n  inputSchema: z.object({\n    competitors: z.array(z.object({\n      name: z.string(),\n      marketShare: z.number(),\n      strengths: z.array(z.string()),\n      weaknesses: z.array(z.string())\n    }))\n  }),\n  outputSchema: z.object({\n    analysis: z.object({\n      marketLeader: z.string(),\n      competitiveAdvantages: z.array(z.string()),\n      opportunities: z.array(z.string()),\n      threats: z.array(z.string())\n    })\n  }),\n  execute: async ({ competitors }) => {\n    const marketLeader = competitors.reduce((prev, current) => \n      prev.marketShare > current.marketShare ? prev : current\n    ).name;\n\n    const allStrengths = competitors.flatMap(c => c.strengths);\n    const allWeaknesses = competitors.flatMap(c => c.weaknesses);\n\n    return {\n      analysis: {\n        marketLeader,\n        competitiveAdvantages: [\n          'Unique value proposition',\n          'Superior user experience',\n          'Competitive pricing',\n          'Strong customer support',\n          'Innovative features'\n        ],\n        opportunities: allWeaknesses.slice(0, 3).map(w => `Address competitor weakness: ${w}`),\n        threats: allStrengths.slice(0, 3).map(s => `Competitor strength: ${s}`)\n      }\n    };\n  }\n});\n\nconst userFeedbackAnalysis = createTool({\n  id: 'user-feedback-analysis',\n  name: 'User Feedback Analysis',\n  description: 'Analyze user feedback and sentiment',\n  inputSchema: z.object({\n    feedbackItems: z.array(z.object({\n      comment: z.string(),\n      rating: z.number().min(1).max(5),\n      category: z.string()\n    }))\n  }),\n  outputSchema: z.object({\n    analysis: z.object({\n      averageRating: z.number(),\n      sentiment: z.string(),\n      topCategories: z.array(z.object({\n        category: z.string(),\n        count: z.number(),\n        averageRating: z.number()\n      })),\n      recommendations: z.array(z.string())\n    })\n  }),\n  execute: async ({ feedbackItems }) => {\n    const averageRating = feedbackItems.reduce((sum, item) => sum + item.rating, 0) / feedbackItems.length;\n    const sentiment = averageRating >= 4 ? 'Positive' : averageRating >= 3 ? 'Neutral' : 'Negative';\n\n    const categoryMap = {};\n    feedbackItems.forEach(item => {\n      if (!categoryMap[item.category]) {\n        categoryMap[item.category] = { count: 0, totalRating: 0 };\n      }\n      categoryMap[item.category].count++;\n      categoryMap[item.category].totalRating += item.rating;\n    });\n\n    const topCategories = Object.entries(categoryMap)\n      .map(([category, data]) => ({\n        category,\n        count: data.count,\n        averageRating: Math.round((data.totalRating / data.count) * 10) / 10\n      }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      analysis: {\n        averageRating: Math.round(averageRating * 10) / 10,\n        sentiment,\n        topCategories,\n        recommendations: [\n          'Address issues in low-rated categories',\n          'Amplify positive feedback themes',\n          'Implement quick wins for immediate impact',\n          'Create feedback loop with users',\n          'Prioritize improvements based on frequency'\n        ]\n      }\n    };\n  }\n});\n\nconst abTestingTool = createTool({\n  id: 'ab-testing',\n  name: 'A/B Testing Tool',\n  description: 'Set up and analyze A/B tests',\n  inputSchema: z.object({\n    testName: z.string(),\n    variants: z.array(z.object({\n      name: z.string(),\n      description: z.string(),\n      expectedImpact: z.string()\n    })),\n    metrics: z.array(z.string()),\n    duration: z.number()\n  }),\n  outputSchema: z.object({\n    testPlan: z.object({\n      testName: z.string(),\n      hypothesis: z.string(),\n      variants: z.array(z.object({\n        name: z.string(),\n        allocation: z.number()\n      })),\n      successCriteria: z.array(z.string()),\n      timeline: z.string()\n    })\n  }),\n  execute: async ({ testName, variants, metrics, duration }) => {\n    const allocation = Math.floor(100 / variants.length);\n    \n    return {\n      testPlan: {\n        testName,\n        hypothesis: `Testing ${variants.length} variants to improve ${metrics[0]}`,\n        variants: variants.map(v => ({\n          name: v.name,\n          allocation\n        })),\n        successCriteria: metrics.map(m => `${m} improvement > 5%`),\n        timeline: `${duration} days test duration`\n      }\n    };\n  }\n});\n\nconst sprintPlanning = createTool({\n  id: 'sprint-planning',\n  name: 'Sprint Planning',\n  description: 'Plan sprints with story points and capacity',\n  inputSchema: z.object({\n    sprintLength: z.number().min(1).max(4),\n    teamCapacity: z.number(),\n    stories: z.array(z.object({\n      title: z.string(),\n      points: z.number(),\n      priority: z.string()\n    }))\n  }),\n  outputSchema: z.object({\n    sprintPlan: z.object({\n      duration: z.string(),\n      totalCapacity: z.number(),\n      plannedStories: z.array(z.object({\n        title: z.string(),\n        points: z.number()\n      })),\n      velocity: z.number(),\n      unplannedStories: z.array(z.string())\n    })\n  }),\n  execute: async ({ sprintLength, teamCapacity, stories }) => {\n    const sortedStories = stories.sort((a, b) => {\n      const priorityOrder = { High: 3, Medium: 2, Low: 1 };\n      return priorityOrder[b.priority] - priorityOrder[a.priority];\n    });\n\n    const plannedStories = [];\n    const unplannedStories = [];\n    let usedCapacity = 0;\n\n    sortedStories.forEach(story => {\n      if (usedCapacity + story.points <= teamCapacity) {\n        plannedStories.push({ title: story.title, points: story.points });\n        usedCapacity += story.points;\n      } else {\n        unplannedStories.push(story.title);\n      }\n    });\n\n    return {\n      sprintPlan: {\n        duration: `${sprintLength} week${sprintLength > 1 ? 's' : ''}`,\n        totalCapacity: teamCapacity,\n        plannedStories,\n        velocity: usedCapacity,\n        unplannedStories\n      }\n    };\n  }\n});\n\nconst stakeholderCommunication = createTool({\n  id: 'stakeholder-communication',\n  name: 'Stakeholder Communication',\n  description: 'Generate stakeholder updates and reports',\n  inputSchema: z.object({\n    projectName: z.string(),\n    period: z.string(),\n    achievements: z.array(z.string()),\n    challenges: z.array(z.string()),\n    nextSteps: z.array(z.string())\n  }),\n  outputSchema: z.object({\n    update: z.object({\n      subject: z.string(),\n      summary: z.string(),\n      sections: z.array(z.object({\n        title: z.string(),\n        content: z.array(z.string())\n      })),\n      callToAction: z.string()\n    })\n  }),\n  execute: async ({ projectName, period, achievements, challenges, nextSteps }) => {\n    return {\n      update: {\n        subject: `${projectName} - ${period} Update`,\n        summary: `Progress update for ${projectName} covering ${period}`,\n        sections: [\n          {\n            title: 'Key Achievements',\n            content: achievements\n          },\n          {\n            title: 'Challenges & Mitigation',\n            content: challenges.map(c => `Challenge: ${c} - Mitigation in progress`)\n          },\n          {\n            title: 'Next Steps',\n            content: nextSteps\n          },\n          {\n            title: 'Metrics & KPIs',\n            content: [\n              'On-time delivery: 95%',\n              'Budget utilization: 87%',\n              'Team satisfaction: 4.5/5',\n              'Quality score: 92%'\n            ]\n          }\n        ],\n        callToAction: 'Please review and provide feedback by end of week'\n      }\n    };\n  }\n});\n\nconst successMetricsTracker = createTool({\n  id: 'success-metrics-tracker',\n  name: 'Success Metrics Tracker',\n  description: 'Track and analyze product success metrics',\n  inputSchema: z.object({\n    metrics: z.array(z.object({\n      name: z.string(),\n      current: z.number(),\n      target: z.number(),\n      unit: z.string()\n    })),\n    period: z.string()\n  }),\n  outputSchema: z.object({\n    report: z.object({\n      period: z.string(),\n      overallHealth: z.string(),\n      metrics: z.array(z.object({\n        name: z.string(),\n        status: z.string(),\n        progress: z.number(),\n        trend: z.string()\n      })),\n      insights: z.array(z.string()),\n      actions: z.array(z.string())\n    })\n  }),\n  execute: async ({ metrics, period }) => {\n    const metricsAnalysis = metrics.map(metric => {\n      const progress = (metric.current / metric.target) * 100;\n      const status = progress >= 100 ? 'Achieved' : progress >= 80 ? 'On Track' : 'At Risk';\n      const trend = progress >= 90 ? 'Improving' : progress >= 70 ? 'Stable' : 'Declining';\n\n      return {\n        name: metric.name,\n        status,\n        progress: Math.round(progress),\n        trend\n      };\n    });\n\n    const achievedCount = metricsAnalysis.filter(m => m.status === 'Achieved').length;\n    const overallHealth = achievedCount >= metrics.length * 0.8 ? 'Excellent' :\n                         achievedCount >= metrics.length * 0.6 ? 'Good' : 'Needs Attention';\n\n    return {\n      report: {\n        period,\n        overallHealth,\n        metrics: metricsAnalysis,\n        insights: [\n          `${achievedCount} out of ${metrics.length} metrics achieved`,\n          'Strong performance in user engagement metrics',\n          'Revenue metrics showing positive trend',\n          'Customer satisfaction above industry average',\n          'Product adoption rate exceeding projections'\n        ],\n        actions: [\n          'Continue monitoring underperforming metrics',\n          'Implement targeted improvements for at-risk areas',\n          'Celebrate team achievements',\n          'Update targets for achieved metrics',\n          'Plan next quarter objectives'\n        ]\n      }\n    };\n  }\n});\n\nconst productManagementTools = {\n  featurePrioritization,\n  userStoryGeneration,\n  roadmapPlanning,\n  marketAnalysis,\n  competitorAnalysis,\n  userFeedbackAnalysis,\n  abTestingTool,\n  sprintPlanning,\n  stakeholderCommunication,\n  successMetricsTracker\n};\n\nexport { productManagementTools };"],"names":[],"mappings":"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"}