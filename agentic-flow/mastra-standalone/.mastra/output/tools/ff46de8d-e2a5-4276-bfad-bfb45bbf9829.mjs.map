{"version":3,"file":"ff46de8d-e2a5-4276-bfad-bfb45bbf9829.mjs","sources":["../../../src/mastra/tools/index.js"],"sourcesContent":["// Comprehensive Tool Collection for Claude Flow and Agentic Flow\n// Export all tool categories for easy integration\n\n// Import all tool collections\nimport { swarmOrchestrationTools } from './swarm-orchestration-tools.js';\nimport { learningMemoryTools } from './learning-memory-tools.js';\nimport { performanceMonitoringTools } from './performance-monitoring-tools.js';\nimport { aiMlTools } from './ai-ml-tools.js';\nimport { workflowAutomationTools } from './workflow-automation-tools.js';\n\n// Combine all tools into a single collection\nexport const allTools = {\n  // Swarm Orchestration Tools (10 tools)\n  ...swarmOrchestrationTools,\n  \n  // Learning & Memory Tools (10 tools)\n  ...learningMemoryTools,\n  \n  // Performance Monitoring Tools (10 tools)\n  ...performanceMonitoringTools,\n  \n  // AI/ML Integration Tools (10 tools)\n  ...aiMlTools,\n  \n  // Workflow Automation Tools (10 tools)\n  ...workflowAutomationTools\n};\n\n// Export tool categories\nexport {\n  swarmOrchestrationTools,\n  learningMemoryTools,\n  performanceMonitoringTools,\n  aiMlTools,\n  workflowAutomationTools\n};\n\n// Tool statistics\nexport const toolStatistics = {\n  totalTools: Object.keys(allTools).length,\n  categories: {\n    swarmOrchestration: Object.keys(swarmOrchestrationTools).length,\n    learningMemory: Object.keys(learningMemoryTools).length,\n    performanceMonitoring: Object.keys(performanceMonitoringTools).length,\n    aiMl: Object.keys(aiMlTools).length,\n    workflowAutomation: Object.keys(workflowAutomationTools).length\n  },\n  toolList: Object.keys(allTools).sort()\n};\n\n// Tool documentation\nexport const toolDocumentation = {\n  swarmOrchestration: {\n    description: 'Tools for managing and orchestrating agent swarms',\n    tools: [\n      'swarmInit - Initialize new swarms with various topologies',\n      'agentSpawn - Spawn specialized agents dynamically',\n      'taskOrchestrate - Orchestrate complex tasks across agents',\n      'swarmStatus - Monitor comprehensive swarm status',\n      'swarmScale - Dynamically scale swarms up or down',\n      'swarmDestroy - Gracefully shutdown swarms',\n      'topologyOptimize - Optimize swarm topology for performance',\n      'loadBalance - Distribute tasks efficiently across agents',\n      'coordinationSync - Synchronize agent coordination',\n      'agentMetrics - Get detailed agent performance metrics'\n    ]\n  },\n  learningMemory: {\n    description: 'Tools for persistent memory and learning capabilities',\n    tools: [\n      'memoryStore - Store persistent memories with TTL',\n      'memoryRetrieve - Retrieve memories with pattern matching',\n      'memorySearch - Advanced memory search with filters',\n      'learningCapture - Capture and store learning experiences',\n      'patternRecognize - Recognize patterns in data',\n      'knowledgeGraph - Build and query knowledge graphs',\n      'memoryBackup - Backup memory stores',\n      'memoryRestore - Restore memory from backups',\n      'contextSave - Save execution context',\n      'contextRestore - Restore execution context'\n    ]\n  },\n  performanceMonitoring: {\n    description: 'Tools for monitoring and optimizing system performance',\n    tools: [\n      'performanceReport - Generate detailed performance reports',\n      'bottleneckAnalyze - Identify performance bottlenecks',\n      'metricsCollect - Collect comprehensive system metrics',\n      'trendAnalysis - Analyze performance trends',\n      'healthCheck - Monitor system health',\n      'errorAnalysis - Analyze error patterns',\n      'usageStats - Track usage statistics',\n      'costAnalysis - Analyze resource costs',\n      'qualityAssess - Assess output quality',\n      'benchmarkRun - Run performance benchmarks'\n    ]\n  },\n  aiMl: {\n    description: 'Tools for AI/ML model training and inference',\n    tools: [\n      'neuralTrain - Train neural networks with WASM SIMD',\n      'neuralPredict - Make predictions with trained models',\n      'modelLoad - Load pre-trained models',\n      'modelSave - Save trained models',\n      'inferenceRun - Run neural inference',\n      'ensembleCreate - Create model ensembles',\n      'transferLearn - Transfer learning capabilities',\n      'neuralExplain - AI explainability',\n      'cognitiveAnalyze - Cognitive behavior analysis',\n      'adaptiveLearning - Implement adaptive learning'\n    ]\n  },\n  workflowAutomation: {\n    description: 'Tools for workflow creation and automation',\n    tools: [\n      'workflowCreate - Create custom workflows',\n      'workflowExecute - Execute workflows with parameters',\n      'workflowSchedule - Schedule workflow execution',\n      'pipelineCreate - Create CI/CD pipelines',\n      'automationSetup - Setup automation rules',\n      'triggerSetup - Configure event triggers',\n      'batchProcess - Process items in batches',\n      'parallelExecute - Execute tasks in parallel',\n      'workflowTemplate - Manage workflow templates',\n      'workflowExport - Export workflow definitions'\n    ]\n  }\n};\n\n// Helper function to get tool by ID\nexport const getToolById = (toolId) => allTools[toolId];\n\n// Helper function to get tools by category\nexport const getToolsByCategory = (category) => {\n  switch (category) {\n    case 'swarmOrchestration':\n      return swarmOrchestrationTools;\n    case 'learningMemory':\n      return learningMemoryTools;\n    case 'performanceMonitoring':\n      return performanceMonitoringTools;\n    case 'aiMl':\n      return aiMlTools;\n    case 'workflowAutomation':\n      return workflowAutomationTools;\n    default:\n      return {};\n  }\n};\n\n// Helper function to search tools\nexport const searchTools = (query) => {\n  const lowerQuery = query.toLowerCase();\n  return Object.entries(allTools)\n    .filter(([id, tool]) => \n      id.toLowerCase().includes(lowerQuery) ||\n      tool.description.toLowerCase().includes(lowerQuery)\n    )\n    .reduce((acc, [id, tool]) => ({ ...acc, [id]: tool }), {});\n};\n\nconsole.log('ðŸ”§ Claude Flow & Agentic Flow Tool Collection Loaded');\nconsole.log(`ðŸ“Š Total Tools: ${toolStatistics.totalTools}`);\nconsole.log('ðŸ“¦ Categories:', Object.entries(toolStatistics.categories).map(([cat, count]) => `${cat}: ${count}`).join(', '));\n\nexport default allTools;"],"names":[],"mappings":"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"}