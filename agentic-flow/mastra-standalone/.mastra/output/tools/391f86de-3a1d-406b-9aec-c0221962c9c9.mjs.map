{"version":3,"file":"391f86de-3a1d-406b-9aec-c0221962c9c9.mjs","sources":["../../../src/mastra/tools/security-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// Helper functions for security operations\nconst generateSecurityReport = (type, severity, findings) => ({\n  timestamp: new Date().toISOString(),\n  type,\n  severity,\n  findings,\n  reportId: `SEC-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n});\n\nconst calculateRiskScore = (vulnerabilities) => {\n  const weights = { critical: 10, high: 7, medium: 4, low: 1 };\n  return vulnerabilities.reduce((score, vuln) => score + (weights[vuln.severity] || 0), 0);\n};\n\n// Simulated security data\nconst knownVulnerabilities = {\n  'SQL Injection': { severity: 'critical', cvss: 9.8, cve: 'CVE-2024-1234' },\n  'XSS': { severity: 'high', cvss: 7.5, cve: 'CVE-2024-1235' },\n  'CSRF': { severity: 'medium', cvss: 6.1, cve: 'CVE-2024-1236' },\n  'Weak Encryption': { severity: 'high', cvss: 7.8, cve: 'CVE-2024-1237' },\n  'Outdated Dependencies': { severity: 'medium', cvss: 5.3, cve: 'CVE-2024-1238' }\n};\n\nconst complianceFrameworks = {\n  'SOC2': ['access-control', 'encryption', 'monitoring', 'incident-response'],\n  'ISO27001': ['risk-assessment', 'access-management', 'security-policy', 'audit'],\n  'GDPR': ['data-protection', 'privacy', 'consent', 'breach-notification'],\n  'HIPAA': ['encryption', 'access-control', 'audit-logs', 'integrity']\n};\n\n// 1. Vulnerability Scanner Tool\nconst vulnerabilityScanner = createTool({\n  name: 'vulnerability-scanner',\n  description: 'Scan systems and applications for known vulnerabilities',\n  inputSchema: z.object({\n    target: z.string().describe('Target system or application to scan'),\n    scanType: z.enum(['quick', 'full', 'custom']).describe('Type of vulnerability scan'),\n    includePatches: z.boolean().optional().describe('Include patch recommendations')\n  }),\n  outputSchema: z.object({\n    vulnerabilities: z.array(z.object({\n      name: z.string(),\n      severity: z.enum(['critical', 'high', 'medium', 'low']),\n      cvss: z.number(),\n      cve: z.string(),\n      affected: z.string(),\n      recommendation: z.string()\n    })),\n    riskScore: z.number(),\n    scanDuration: z.number(),\n    reportId: z.string()\n  }),\n  execute: async ({ target, scanType, includePatches = true }) => {\n    // Simulate scanning delay\n    const scanDuration = scanType === 'full' ? 2500 : scanType === 'quick' ? 800 : 1500;\n    await new Promise(resolve => setTimeout(resolve, scanDuration));\n\n    // Generate simulated vulnerabilities\n    const vulnerabilities = Object.entries(knownVulnerabilities)\n      .filter(() => Math.random() > 0.4)\n      .map(([name, details]) => ({\n        name,\n        ...details,\n        affected: `${target}/${Math.random() > 0.5 ? 'api' : 'web'}`,\n        recommendation: includePatches ? \n          `Apply security patch ${details.cve}-FIX or upgrade to latest version` : \n          'Contact security team for remediation'\n      }));\n\n    const riskScore = calculateRiskScore(vulnerabilities);\n\n    return {\n      vulnerabilities,\n      riskScore,\n      scanDuration,\n      reportId: `VULN-${Date.now()}`\n    };\n  }\n});\n\n// 2. Penetration Testing Tool\nconst penetrationTester = createTool({\n  name: 'penetration-tester',\n  description: 'Conduct penetration testing to identify security weaknesses',\n  inputSchema: z.object({\n    target: z.string().describe('Target system for penetration testing'),\n    testType: z.enum(['blackbox', 'whitebox', 'graybox']).describe('Type of penetration test'),\n    scope: z.array(z.string()).describe('Specific areas to test')\n  }),\n  outputSchema: z.object({\n    exploits: z.array(z.object({\n      technique: z.string(),\n      success: z.boolean(),\n      impact: z.enum(['critical', 'high', 'medium', 'low']),\n      details: z.string()\n    })),\n    recommendations: z.array(z.string()),\n    overallRisk: z.enum(['critical', 'high', 'medium', 'low']),\n    reportId: z.string()\n  }),\n  execute: async ({ target, testType, scope }) => {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    const techniques = [\n      'SQL Injection', 'XSS Attack', 'Buffer Overflow', 'Privilege Escalation',\n      'Session Hijacking', 'Directory Traversal', 'CSRF Attack'\n    ];\n\n    const exploits = techniques\n      .filter(() => Math.random() > 0.6)\n      .map(technique => ({\n        technique,\n        success: Math.random() > 0.3,\n        impact: ['critical', 'high', 'medium', 'low'][Math.floor(Math.random() * 4)],\n        details: `${testType} test attempted ${technique} on ${target} - ${scope.join(', ')}`\n      }));\n\n    const criticalCount = exploits.filter(e => e.success && e.impact === 'critical').length;\n    const overallRisk = criticalCount > 0 ? 'critical' : \n                       exploits.some(e => e.success && e.impact === 'high') ? 'high' : 'medium';\n\n    return {\n      exploits,\n      recommendations: [\n        'Implement input validation and sanitization',\n        'Use parameterized queries to prevent SQL injection',\n        'Enable security headers (CSP, X-Frame-Options)',\n        'Implement rate limiting and CAPTCHA',\n        'Regular security training for development team'\n      ].slice(0, Math.floor(Math.random() * 3) + 3),\n      overallRisk,\n      reportId: `PENTEST-${Date.now()}`\n    };\n  }\n});\n\n// 3. Access Control Auditor\nconst accessControlAuditor = createTool({\n  name: 'access-control-auditor',\n  description: 'Audit user access controls and permissions',\n  inputSchema: z.object({\n    system: z.string().describe('System to audit'),\n    auditType: z.enum(['users', 'roles', 'permissions', 'full']).describe('Type of access audit'),\n    includeInactive: z.boolean().optional().describe('Include inactive accounts')\n  }),\n  outputSchema: z.object({\n    findings: z.array(z.object({\n      type: z.string(),\n      severity: z.enum(['critical', 'high', 'medium', 'low']),\n      description: z.string(),\n      affectedUsers: z.number()\n    })),\n    totalUsers: z.number(),\n    privilegedUsers: z.number(),\n    recommendations: z.array(z.string()),\n    reportId: z.string()\n  }),\n  execute: async ({ system, auditType, includeInactive = false }) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    const totalUsers = Math.floor(Math.random() * 500) + 100;\n    const privilegedUsers = Math.floor(totalUsers * 0.15);\n\n    const findings = [\n      {\n        type: 'Excessive Privileges',\n        severity: 'high',\n        description: 'Users with admin access who haven\\'t logged in for 90+ days',\n        affectedUsers: Math.floor(Math.random() * 20) + 5\n      },\n      {\n        type: 'Weak Password Policy',\n        severity: 'medium',\n        description: 'Accounts without MFA enabled',\n        affectedUsers: Math.floor(Math.random() * 50) + 20\n      },\n      {\n        type: 'Orphaned Accounts',\n        severity: 'high',\n        description: 'Active accounts for terminated employees',\n        affectedUsers: Math.floor(Math.random() * 10) + 2\n      },\n      {\n        type: 'Shared Credentials',\n        severity: 'critical',\n        description: 'Service accounts with shared passwords',\n        affectedUsers: Math.floor(Math.random() * 5) + 1\n      }\n    ].filter(() => Math.random() > 0.3);\n\n    return {\n      findings,\n      totalUsers,\n      privilegedUsers,\n      recommendations: [\n        'Implement principle of least privilege',\n        'Enable MFA for all privileged accounts',\n        'Regular access reviews (quarterly)',\n        'Automate user deprovisioning',\n        'Implement password rotation policy'\n      ],\n      reportId: `ACCESS-${Date.now()}`\n    };\n  }\n});\n\n// 4. Encryption Analyzer\nconst encryptionAnalyzer = createTool({\n  name: 'encryption-analyzer',\n  description: 'Analyze encryption methods and identify weaknesses',\n  inputSchema: z.object({\n    target: z.string().describe('System or data to analyze'),\n    checkType: z.enum(['atRest', 'inTransit', 'both']).describe('Type of encryption to check'),\n    includeAlgorithms: z.boolean().optional().describe('Include algorithm analysis')\n  }),\n  outputSchema: z.object({\n    encryptionStatus: z.object({\n      atRest: z.boolean().optional(),\n      inTransit: z.boolean().optional()\n    }),\n    algorithms: z.array(z.object({\n      name: z.string(),\n      strength: z.enum(['strong', 'moderate', 'weak', 'broken']),\n      keySize: z.number(),\n      recommendation: z.string()\n    })),\n    vulnerabilities: z.array(z.string()),\n    complianceStatus: z.object({\n      pci: z.boolean(),\n      hipaa: z.boolean(),\n      gdpr: z.boolean()\n    }),\n    reportId: z.string()\n  }),\n  execute: async ({ target, checkType, includeAlgorithms = true }) => {\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    const algorithms = includeAlgorithms ? [\n      { name: 'AES-256', strength: 'strong', keySize: 256, recommendation: 'Continue using' },\n      { name: 'RSA-2048', strength: 'moderate', keySize: 2048, recommendation: 'Consider upgrading to RSA-4096' },\n      { name: 'SHA-1', strength: 'broken', keySize: 160, recommendation: 'Migrate to SHA-256 immediately' },\n      { name: 'TLS 1.3', strength: 'strong', keySize: 256, recommendation: 'Current best practice' }\n    ].filter(() => Math.random() > 0.3) : [];\n\n    const vulnerabilities = [];\n    if (algorithms.some(a => a.strength === 'weak' || a.strength === 'broken')) {\n      vulnerabilities.push('Weak encryption algorithms detected');\n    }\n    if (Math.random() > 0.5) {\n      vulnerabilities.push('SSL/TLS configuration allows weak ciphers');\n    }\n    if (Math.random() > 0.7) {\n      vulnerabilities.push('Encryption keys stored in plaintext');\n    }\n\n    return {\n      encryptionStatus: {\n        ...(checkType !== 'inTransit' && { atRest: Math.random() > 0.2 }),\n        ...(checkType !== 'atRest' && { inTransit: Math.random() > 0.1 })\n      },\n      algorithms,\n      vulnerabilities,\n      complianceStatus: {\n        pci: vulnerabilities.length === 0,\n        hipaa: algorithms.every(a => a.strength !== 'broken'),\n        gdpr: vulnerabilities.length < 2\n      },\n      reportId: `ENCRYPT-${Date.now()}`\n    };\n  }\n});\n\n// 5. Threat Modeler\nconst threatModeler = createTool({\n  name: 'threat-modeler',\n  description: 'Create threat models and identify potential attack vectors',\n  inputSchema: z.object({\n    system: z.string().describe('System to model'),\n    methodology: z.enum(['STRIDE', 'PASTA', 'VAST']).describe('Threat modeling methodology'),\n    includeActors: z.boolean().optional().describe('Include threat actor analysis')\n  }),\n  outputSchema: z.object({\n    threats: z.array(z.object({\n      category: z.string(),\n      description: z.string(),\n      likelihood: z.enum(['high', 'medium', 'low']),\n      impact: z.enum(['critical', 'high', 'medium', 'low']),\n      mitigations: z.array(z.string())\n    })),\n    attackVectors: z.array(z.string()),\n    threatActors: z.array(z.object({\n      type: z.string(),\n      motivation: z.string(),\n      capability: z.enum(['advanced', 'intermediate', 'basic'])\n    })).optional(),\n    riskMatrix: z.object({\n      critical: z.number(),\n      high: z.number(),\n      medium: z.number(),\n      low: z.number()\n    }),\n    reportId: z.string()\n  }),\n  execute: async ({ system, methodology, includeActors = false }) => {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n\n    const strideCategories = ['Spoofing', 'Tampering', 'Repudiation', 'Information Disclosure', 'Denial of Service', 'Elevation of Privilege'];\n    \n    const threats = strideCategories\n      .filter(() => Math.random() > 0.4)\n      .map(category => ({\n        category,\n        description: `${category} threat identified in ${system} using ${methodology}`,\n        likelihood: ['high', 'medium', 'low'][Math.floor(Math.random() * 3)],\n        impact: ['critical', 'high', 'medium', 'low'][Math.floor(Math.random() * 4)],\n        mitigations: [\n          'Implement strong authentication',\n          'Add audit logging',\n          'Enable encryption',\n          'Apply rate limiting',\n          'Use input validation'\n        ].slice(0, Math.floor(Math.random() * 3) + 2)\n      }));\n\n    const threatActors = includeActors ? [\n      { type: 'Nation State', motivation: 'Espionage', capability: 'advanced' },\n      { type: 'Cybercriminal', motivation: 'Financial Gain', capability: 'intermediate' },\n      { type: 'Hacktivist', motivation: 'Ideological', capability: 'intermediate' },\n      { type: 'Insider Threat', motivation: 'Revenge/Profit', capability: 'basic' }\n    ].filter(() => Math.random() > 0.5) : undefined;\n\n    const riskMatrix = threats.reduce((matrix, threat) => {\n      matrix[threat.impact]++;\n      return matrix;\n    }, { critical: 0, high: 0, medium: 0, low: 0 });\n\n    return {\n      threats,\n      attackVectors: [\n        'Phishing emails',\n        'Malware injection',\n        'Supply chain compromise',\n        'Zero-day exploits',\n        'Social engineering',\n        'Physical access'\n      ].filter(() => Math.random() > 0.5),\n      threatActors,\n      riskMatrix,\n      reportId: `THREAT-${Date.now()}`\n    };\n  }\n});\n\n// 6. Incident Response Simulator\nconst incidentResponseSimulator = createTool({\n  name: 'incident-response-simulator',\n  description: 'Simulate security incidents and test response procedures',\n  inputSchema: z.object({\n    incidentType: z.enum(['breach', 'malware', 'ddos', 'insider', 'ransomware']).describe('Type of incident to simulate'),\n    severity: z.enum(['critical', 'high', 'medium', 'low']).describe('Incident severity'),\n    testResponse: z.boolean().optional().describe('Test current response procedures')\n  }),\n  outputSchema: z.object({\n    incident: z.object({\n      type: z.string(),\n      severity: z.string(),\n      timeline: z.array(z.object({\n        time: z.string(),\n        event: z.string(),\n        action: z.string()\n      })),\n      affectedSystems: z.array(z.string())\n    }),\n    responseMetrics: z.object({\n      detectionTime: z.number(),\n      containmentTime: z.number(),\n      recoveryTime: z.number(),\n      totalDowntime: z.number()\n    }),\n    recommendations: z.array(z.string()),\n    lessonsLearned: z.array(z.string()),\n    reportId: z.string()\n  }),\n  execute: async ({ incidentType, severity, testResponse = true }) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    const baseTime = new Date();\n    const timeline = [\n      { time: baseTime.toISOString(), event: 'Initial compromise detected', action: 'Alert triggered' },\n      { time: new Date(baseTime.getTime() + 300000).toISOString(), event: 'Incident confirmed', action: 'Response team activated' },\n      { time: new Date(baseTime.getTime() + 900000).toISOString(), event: 'Containment initiated', action: 'Affected systems isolated' },\n      { time: new Date(baseTime.getTime() + 1800000).toISOString(), event: 'Recovery started', action: 'Systems restoration begun' },\n      { time: new Date(baseTime.getTime() + 3600000).toISOString(), event: 'Incident resolved', action: 'Normal operations resumed' }\n    ];\n\n    const affectedSystems = [\n      'Web Server Farm',\n      'Database Cluster',\n      'API Gateway',\n      'User Authentication Service',\n      'File Storage System'\n    ].filter(() => Math.random() > 0.5);\n\n    const detectionTime = severity === 'critical' ? 5 : severity === 'high' ? 15 : 30;\n    const containmentTime = severity === 'critical' ? 30 : severity === 'high' ? 60 : 120;\n    const recoveryTime = severity === 'critical' ? 240 : severity === 'high' ? 360 : 480;\n\n    return {\n      incident: {\n        type: incidentType,\n        severity,\n        timeline,\n        affectedSystems\n      },\n      responseMetrics: {\n        detectionTime,\n        containmentTime,\n        recoveryTime,\n        totalDowntime: detectionTime + containmentTime + recoveryTime\n      },\n      recommendations: [\n        'Improve monitoring and alerting systems',\n        'Update incident response playbooks',\n        'Conduct regular incident response drills',\n        'Implement automated containment procedures',\n        'Enhance backup and recovery processes'\n      ],\n      lessonsLearned: [\n        'Need faster detection mechanisms',\n        'Communication protocols require improvement',\n        'Automation can reduce response time',\n        'Regular training improves team effectiveness'\n      ].filter(() => Math.random() > 0.3),\n      reportId: `INCIDENT-${Date.now()}`\n    };\n  }\n});\n\n// 7. Compliance Checker\nconst complianceChecker = createTool({\n  name: 'compliance-checker',\n  description: 'Check compliance with security standards and regulations',\n  inputSchema: z.object({\n    framework: z.enum(['SOC2', 'ISO27001', 'GDPR', 'HIPAA', 'PCI-DSS']).describe('Compliance framework to check'),\n    scope: z.array(z.string()).describe('Systems or processes to audit'),\n    generateReport: z.boolean().optional().describe('Generate detailed compliance report')\n  }),\n  outputSchema: z.object({\n    complianceScore: z.number(),\n    requirements: z.array(z.object({\n      category: z.string(),\n      requirement: z.string(),\n      status: z.enum(['compliant', 'partial', 'non-compliant']),\n      evidence: z.string(),\n      gap: z.string().optional()\n    })),\n    criticalGaps: z.array(z.string()),\n    recommendations: z.array(z.object({\n      priority: z.enum(['immediate', 'high', 'medium', 'low']),\n      action: z.string(),\n      timeline: z.string()\n    })),\n    certificationReady: z.boolean(),\n    reportId: z.string()\n  }),\n  execute: async ({ framework, scope, generateReport = true }) => {\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    const frameworkRequirements = complianceFrameworks[framework] || [];\n    const requirements = frameworkRequirements.map(category => {\n      const status = Math.random() > 0.7 ? 'non-compliant' : Math.random() > 0.3 ? 'compliant' : 'partial';\n      return {\n        category,\n        requirement: `${framework} requirement for ${category}`,\n        status,\n        evidence: status === 'compliant' ? 'Documentation and controls verified' : 'Limited evidence available',\n        gap: status !== 'compliant' ? `Missing controls for ${category} in ${scope.join(', ')}` : undefined\n      };\n    });\n\n    const complianceScore = Math.round(\n      (requirements.filter(r => r.status === 'compliant').length / requirements.length) * 100\n    );\n\n    const criticalGaps = requirements\n      .filter(r => r.status === 'non-compliant')\n      .map(r => r.gap)\n      .filter(Boolean);\n\n    return {\n      complianceScore,\n      requirements,\n      criticalGaps,\n      recommendations: [\n        { priority: 'immediate', action: 'Implement missing security controls', timeline: '30 days' },\n        { priority: 'high', action: 'Update security policies and procedures', timeline: '60 days' },\n        { priority: 'medium', action: 'Conduct security awareness training', timeline: '90 days' },\n        { priority: 'low', action: 'Review and update documentation', timeline: '120 days' }\n      ].filter(() => Math.random() > 0.3),\n      certificationReady: complianceScore >= 80,\n      reportId: `COMPLIANCE-${Date.now()}`\n    };\n  }\n});\n\n// 8. Security Monitor\nconst securityMonitor = createTool({\n  name: 'security-monitor',\n  description: 'Monitor security events and detect anomalies',\n  inputSchema: z.object({\n    timeRange: z.enum(['1h', '24h', '7d', '30d']).describe('Time range to monitor'),\n    systems: z.array(z.string()).describe('Systems to monitor'),\n    alertThreshold: z.enum(['low', 'medium', 'high']).optional().describe('Alert sensitivity')\n  }),\n  outputSchema: z.object({\n    events: z.array(z.object({\n      timestamp: z.string(),\n      type: z.string(),\n      severity: z.enum(['critical', 'high', 'medium', 'low']),\n      source: z.string(),\n      description: z.string()\n    })),\n    anomalies: z.array(z.object({\n      type: z.string(),\n      confidence: z.number(),\n      details: z.string()\n    })),\n    metrics: z.object({\n      totalEvents: z.number(),\n      criticalEvents: z.number(),\n      falsePositives: z.number(),\n      meanTimeToDetect: z.number()\n    }),\n    trends: z.array(z.string()),\n    reportId: z.string()\n  }),\n  execute: async ({ timeRange, systems, alertThreshold = 'medium' }) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    const eventTypes = [\n      'Failed Login Attempt', 'Privilege Escalation', 'Unusual Network Traffic',\n      'File Integrity Change', 'Malware Detection', 'Policy Violation'\n    ];\n\n    const numEvents = timeRange === '1h' ? 50 : timeRange === '24h' ? 500 : timeRange === '7d' ? 2000 : 5000;\n    const events = Array.from({ length: Math.min(numEvents, 20) }, () => ({\n      timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),\n      type: eventTypes[Math.floor(Math.random() * eventTypes.length)],\n      severity: ['critical', 'high', 'medium', 'low'][Math.floor(Math.random() * 4)],\n      source: systems[Math.floor(Math.random() * systems.length)],\n      description: 'Automated security event detection'\n    }));\n\n    const anomalies = [\n      { type: 'Unusual Login Pattern', confidence: 0.85, details: 'Multiple login attempts from new locations' },\n      { type: 'Data Exfiltration Attempt', confidence: 0.72, details: 'Large data transfer to external IP' },\n      { type: 'Suspicious Process Execution', confidence: 0.91, details: 'Unknown process with elevated privileges' }\n    ].filter(() => Math.random() > 0.6);\n\n    return {\n      events: events.slice(0, 10),\n      anomalies,\n      metrics: {\n        totalEvents: numEvents,\n        criticalEvents: Math.floor(numEvents * 0.05),\n        falsePositives: Math.floor(numEvents * 0.02),\n        meanTimeToDetect: alertThreshold === 'low' ? 2 : alertThreshold === 'medium' ? 5 : 10\n      },\n      trends: [\n        'Increase in failed authentication attempts',\n        'Decrease in malware detections',\n        'Stable network traffic patterns',\n        'Rising privilege escalation attempts'\n      ].filter(() => Math.random() > 0.5),\n      reportId: `MONITOR-${Date.now()}`\n    };\n  }\n});\n\n// 9. Authentication Tester\nconst authenticationTester = createTool({\n  name: 'authentication-tester',\n  description: 'Test authentication mechanisms and identify weaknesses',\n  inputSchema: z.object({\n    authSystem: z.string().describe('Authentication system to test'),\n    testTypes: z.array(z.enum(['password', 'mfa', 'sso', 'biometric', 'token'])).describe('Types of auth to test'),\n    includeBypass: z.boolean().optional().describe('Include bypass attempt tests')\n  }),\n  outputSchema: z.object({\n    testResults: z.array(z.object({\n      testType: z.string(),\n      method: z.string(),\n      result: z.enum(['passed', 'failed', 'vulnerable']),\n      details: z.string()\n    })),\n    vulnerabilities: z.array(z.object({\n      type: z.string(),\n      severity: z.enum(['critical', 'high', 'medium', 'low']),\n      exploitability: z.enum(['easy', 'moderate', 'difficult'])\n    })),\n    securityScore: z.number(),\n    recommendations: z.array(z.string()),\n    reportId: z.string()\n  }),\n  execute: async ({ authSystem, testTypes, includeBypass = false }) => {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n\n    const testMethods = {\n      password: ['Brute Force', 'Dictionary Attack', 'Password Spray'],\n      mfa: ['MFA Bypass', 'Token Prediction', 'Recovery Flow'],\n      sso: ['SAML Injection', 'Token Manipulation', 'Session Fixation'],\n      biometric: ['Presentation Attack', 'Template Extraction', 'Liveness Detection'],\n      token: ['Token Forging', 'Replay Attack', 'Token Leakage']\n    };\n\n    const testResults = testTypes.flatMap(type => \n      (testMethods[type] || []).map(method => ({\n        testType: type,\n        method,\n        result: Math.random() > 0.7 ? 'vulnerable' : Math.random() > 0.3 ? 'passed' : 'failed',\n        details: `Testing ${method} on ${authSystem} authentication system`\n      }))\n    );\n\n    const vulnerabilities = testResults\n      .filter(r => r.result === 'vulnerable')\n      .map(r => ({\n        type: r.method,\n        severity: ['critical', 'high', 'medium'][Math.floor(Math.random() * 3)],\n        exploitability: ['easy', 'moderate', 'difficult'][Math.floor(Math.random() * 3)]\n      }));\n\n    const passedTests = testResults.filter(r => r.result === 'passed').length;\n    const securityScore = Math.round((passedTests / testResults.length) * 100);\n\n    return {\n      testResults,\n      vulnerabilities,\n      securityScore,\n      recommendations: [\n        'Implement account lockout policies',\n        'Enable MFA for all accounts',\n        'Use secure token generation',\n        'Implement session timeout',\n        'Add CAPTCHA for failed attempts',\n        'Monitor authentication logs'\n      ].filter(() => Math.random() > 0.4),\n      reportId: `AUTH-${Date.now()}`\n    };\n  }\n});\n\n// 10. Firewall Configuration Analyzer\nconst firewallAnalyzer = createTool({\n  name: 'firewall-analyzer',\n  description: 'Analyze firewall rules and configurations for security issues',\n  inputSchema: z.object({\n    firewallType: z.enum(['network', 'application', 'cloud', 'host']).describe('Type of firewall'),\n    configFile: z.string().optional().describe('Configuration file path or content'),\n    checkCompliance: z.boolean().optional().describe('Check against best practices')\n  }),\n  outputSchema: z.object({\n    rules: z.array(z.object({\n      ruleId: z.string(),\n      source: z.string(),\n      destination: z.string(),\n      port: z.string(),\n      protocol: z.string(),\n      action: z.enum(['allow', 'deny']),\n      risk: z.enum(['high', 'medium', 'low', 'none'])\n    })),\n    issues: z.array(z.object({\n      type: z.string(),\n      severity: z.enum(['critical', 'high', 'medium', 'low']),\n      description: z.string(),\n      affectedRules: z.array(z.string())\n    })),\n    statistics: z.object({\n      totalRules: z.number(),\n      allowRules: z.number(),\n      denyRules: z.number(),\n      riskyRules: z.number()\n    }),\n    recommendations: z.array(z.string()),\n    reportId: z.string()\n  }),\n  execute: async ({ firewallType, configFile, checkCompliance = true }) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Generate simulated firewall rules\n    const rules = Array.from({ length: Math.floor(Math.random() * 20) + 10 }, (_, i) => {\n      const isAllow = Math.random() > 0.3;\n      const isRisky = isAllow && Math.random() > 0.7;\n      \n      return {\n        ruleId: `FW-${i + 1}`,\n        source: Math.random() > 0.5 ? '0.0.0.0/0' : `192.168.${Math.floor(Math.random() * 255)}.0/24`,\n        destination: Math.random() > 0.5 ? 'any' : `10.0.${Math.floor(Math.random() * 255)}.0/24`,\n        port: ['22', '80', '443', '3389', 'any'][Math.floor(Math.random() * 5)],\n        protocol: ['tcp', 'udp', 'any'][Math.floor(Math.random() * 3)],\n        action: isAllow ? 'allow' : 'deny',\n        risk: isRisky ? 'high' : isAllow && Math.random() > 0.5 ? 'medium' : 'low'\n      };\n    });\n\n    const issues = [];\n    \n    // Check for common firewall misconfigurations\n    if (rules.some(r => r.source === '0.0.0.0/0' && r.port === '22' && r.action === 'allow')) {\n      issues.push({\n        type: 'SSH Open to Internet',\n        severity: 'critical',\n        description: 'SSH port exposed to the entire internet',\n        affectedRules: rules.filter(r => r.port === '22' && r.source === '0.0.0.0/0').map(r => r.ruleId)\n      });\n    }\n\n    if (rules.some(r => r.port === 'any' && r.action === 'allow')) {\n      issues.push({\n        type: 'Overly Permissive Rule',\n        severity: 'high',\n        description: 'Rules allowing any port increase attack surface',\n        affectedRules: rules.filter(r => r.port === 'any' && r.action === 'allow').map(r => r.ruleId)\n      });\n    }\n\n    const statistics = {\n      totalRules: rules.length,\n      allowRules: rules.filter(r => r.action === 'allow').length,\n      denyRules: rules.filter(r => r.action === 'deny').length,\n      riskyRules: rules.filter(r => r.risk === 'high').length\n    };\n\n    return {\n      rules: rules.slice(0, 10), // Return first 10 rules for brevity\n      issues,\n      statistics,\n      recommendations: [\n        'Implement principle of least privilege for firewall rules',\n        'Remove or restrict rules with source 0.0.0.0/0',\n        'Use specific ports instead of \"any\"',\n        'Regularly review and audit firewall rules',\n        'Implement egress filtering',\n        'Enable logging for all deny rules'\n      ].filter(() => Math.random() > 0.3),\n      reportId: `FIREWALL-${Date.now()}`\n    };\n  }\n});\n\n// Export all security tools\nexport const securityTools = {\n  vulnerabilityScanner,\n  penetrationTester,\n  accessControlAuditor,\n  encryptionAnalyzer,\n  threatModeler,\n  incidentResponseSimulator,\n  complianceChecker,\n  securityMonitor,\n  authenticationTester,\n  firewallAnalyzer\n};"],"names":[],"mappings":";;;AAYA,MAAM,kBAAA,GAAqB,CAAC,eAAA,KAAoB;AAC9C,EAAA,MAAM,OAAA,GAAU,EAAE,QAAA,EAAU,EAAA,EAAI,MAAM,CAAA,EAAG,MAAA,EAAQ,CAAA,EAAG,GAAA,EAAK,CAAA,EAAE;AAC3D,EAAA,OAAO,eAAA,CAAgB,MAAA,CAAO,CAAC,KAAA,EAAO,IAAA,KAAS,KAAA,IAAS,OAAA,CAAQ,IAAA,CAAK,QAAQ,CAAA,IAAK,CAAA,CAAA,EAAI,CAAC,CAAA;AACzF,CAAA;AAGA,MAAM,oBAAA,GAAuB;AAAA,EAC3B,iBAAiB,EAAE,QAAA,EAAU,YAAY,IAAA,EAAM,GAAA,EAAK,KAAK,eAAA,EAAgB;AAAA,EACzE,OAAO,EAAE,QAAA,EAAU,QAAQ,IAAA,EAAM,GAAA,EAAK,KAAK,eAAA,EAAgB;AAAA,EAC3D,QAAQ,EAAE,QAAA,EAAU,UAAU,IAAA,EAAM,GAAA,EAAK,KAAK,eAAA,EAAgB;AAAA,EAC9D,mBAAmB,EAAE,QAAA,EAAU,QAAQ,IAAA,EAAM,GAAA,EAAK,KAAK,eAAA,EAAgB;AAAA,EACvE,yBAAyB,EAAE,QAAA,EAAU,UAAU,IAAA,EAAM,GAAA,EAAK,KAAK,eAAA;AACjE,CAAA;AAEA,MAAM,oBAAA,GAAuB;AAAA,EAC3B,MAAA,EAAQ,CAAC,gBAAA,EAAkB,YAAA,EAAc,cAAc,mBAAmB,CAAA;AAAA,EAC1E,UAAA,EAAY,CAAC,iBAAA,EAAmB,mBAAA,EAAqB,mBAAmB,OAAO,CAAA;AAAA,EAC/E,MAAA,EAAQ,CAAC,iBAAA,EAAmB,SAAA,EAAW,WAAW,qBAAqB,CAAA;AAAA,EACvE,OAAA,EAAS,CAAC,YAAA,EAAc,gBAAA,EAAkB,cAAc,WAAW;AACrE,CAAA;AAGA,MAAM,uBAAuB,UAAA,CAAW;AAAA,EACtC,IAAA,EAAM,uBAAA;AAAA,EACN,WAAA,EAAa,yDAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,MAAA,EAAQ,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,sCAAsC,CAAA;AAAA,IAClE,QAAA,EAAU,CAAA,CAAE,IAAA,CAAK,CAAC,OAAA,EAAS,QAAQ,QAAQ,CAAC,CAAA,CAAE,QAAA,CAAS,4BAA4B,CAAA;AAAA,IACnF,gBAAgB,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,+BAA+B;AAAA,GAChF,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAChC,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACtD,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,GAAA,EAAK,EAAE,MAAA,EAAO;AAAA,MACd,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,cAAA,EAAgB,EAAE,MAAA;AAAO,KAC1B,CAAC,CAAA;AAAA,IACF,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,IACpB,YAAA,EAAc,EAAE,MAAA,EAAO;AAAA,IACvB,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,QAAQ,QAAA,EAAU,cAAA,GAAiB,MAAK,KAAM;AAE9D,IAAA,MAAM,eAAe,QAAA,KAAa,MAAA,GAAS,IAAA,GAAO,QAAA,KAAa,UAAU,GAAA,GAAM,IAAA;AAC/E,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,YAAY,CAAC,CAAA;AAG9D,IAAA,MAAM,kBAAkB,MAAA,CAAO,OAAA,CAAQ,oBAAoB,CAAA,CACxD,OAAO,MAAM,IAAA,CAAK,MAAA,EAAO,GAAI,GAAG,CAAA,CAChC,GAAA,CAAI,CAAC,CAAC,IAAA,EAAM,OAAO,CAAA,MAAO;AAAA,MACzB,IAAA;AAAA,MACA,GAAG,OAAA;AAAA,MACH,QAAA,EAAU,GAAG,MAAM,CAAA,CAAA,EAAI,KAAK,MAAA,EAAO,GAAI,GAAA,GAAM,KAAA,GAAQ,KAAK,CAAA,CAAA;AAAA,MAC1D,cAAA,EAAgB,cAAA,GACd,CAAA,qBAAA,EAAwB,OAAA,CAAQ,GAAG,CAAA,iCAAA,CAAA,GACnC;AAAA,KACJ,CAAE,CAAA;AAEJ,IAAA,MAAM,SAAA,GAAY,mBAAmB,eAAe,CAAA;AAEpD,IAAA,OAAO;AAAA,MACL,eAAA;AAAA,MACA,SAAA;AAAA,MACA,YAAA;AAAA,MACA,QAAA,EAAU,CAAA,KAAA,EAAQ,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KAC9B;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,oBAAoB,UAAA,CAAW;AAAA,EACnC,IAAA,EAAM,oBAAA;AAAA,EACN,WAAA,EAAa,6DAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,MAAA,EAAQ,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,uCAAuC,CAAA;AAAA,IACnE,QAAA,EAAU,CAAA,CAAE,IAAA,CAAK,CAAC,UAAA,EAAY,YAAY,SAAS,CAAC,CAAA,CAAE,QAAA,CAAS,0BAA0B,CAAA;AAAA,IACzF,KAAA,EAAO,EAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA,CAAE,SAAS,wBAAwB;AAAA,GAC7D,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACzB,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,MACpB,OAAA,EAAS,EAAE,OAAA,EAAQ;AAAA,MACnB,MAAA,EAAQ,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACpD,OAAA,EAAS,EAAE,MAAA;AAAO,KACnB,CAAC,CAAA;AAAA,IACF,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,WAAA,EAAa,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,IACzD,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,MAAA,EAAQ,QAAA,EAAU,OAAM,KAAM;AAC9C,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,IAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,UAAA,GAAa;AAAA,MACjB,eAAA;AAAA,MAAiB,YAAA;AAAA,MAAc,iBAAA;AAAA,MAAmB,sBAAA;AAAA,MAClD,mBAAA;AAAA,MAAqB,qBAAA;AAAA,MAAuB;AAAA,KAC9C;AAEA,IAAA,MAAM,QAAA,GAAW,UAAA,CACd,MAAA,CAAO,MAAM,IAAA,CAAK,QAAO,GAAI,GAAG,CAAA,CAChC,GAAA,CAAI,CAAA,SAAA,MAAc;AAAA,MACjB,SAAA;AAAA,MACA,OAAA,EAAS,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA;AAAA,MACzB,MAAA,EAAQ,CAAC,UAAA,EAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,MAC3E,OAAA,EAAS,CAAA,EAAG,QAAQ,CAAA,gBAAA,EAAmB,SAAS,CAAA,IAAA,EAAO,MAAM,CAAA,GAAA,EAAM,KAAA,CAAM,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA,KACrF,CAAE,CAAA;AAEJ,IAAA,MAAM,aAAA,GAAgB,SAAS,MAAA,CAAO,CAAA,CAAA,KAAK,EAAE,OAAA,IAAW,CAAA,CAAE,MAAA,KAAW,UAAU,CAAA,CAAE,MAAA;AACjF,IAAA,MAAM,WAAA,GAAc,aAAA,GAAgB,CAAA,GAAI,UAAA,GACrB,QAAA,CAAS,IAAA,CAAK,CAAA,CAAA,KAAK,CAAA,CAAE,OAAA,IAAW,CAAA,CAAE,MAAA,KAAW,MAAM,IAAI,MAAA,GAAS,QAAA;AAEnF,IAAA,OAAO;AAAA,MACL,QAAA;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,6CAAA;AAAA,QACA,oDAAA;AAAA,QACA,gDAAA;AAAA,QACA,qCAAA;AAAA,QACA;AAAA,OACF,CAAE,KAAA,CAAM,CAAA,EAAG,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,CAAC,CAAA,GAAI,CAAC,CAAA;AAAA,MAC5C,WAAA;AAAA,MACA,QAAA,EAAU,CAAA,QAAA,EAAW,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KACjC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,uBAAuB,UAAA,CAAW;AAAA,EACtC,IAAA,EAAM,wBAAA;AAAA,EACN,WAAA,EAAa,4CAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,MAAA,EAAQ,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,iBAAiB,CAAA;AAAA,IAC7C,SAAA,EAAW,CAAA,CAAE,IAAA,CAAK,CAAC,OAAA,EAAS,OAAA,EAAS,aAAA,EAAe,MAAM,CAAC,CAAA,CAAE,QAAA,CAAS,sBAAsB,CAAA;AAAA,IAC5F,iBAAiB,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,2BAA2B;AAAA,GAC7E,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACzB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACtD,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,aAAA,EAAe,EAAE,MAAA;AAAO,KACzB,CAAC,CAAA;AAAA,IACF,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,IACrB,eAAA,EAAiB,EAAE,MAAA,EAAO;AAAA,IAC1B,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,QAAQ,SAAA,EAAW,eAAA,GAAkB,OAAM,KAAM;AACjE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,aAAa,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,GAAG,CAAA,GAAI,GAAA;AACrD,IAAA,MAAM,eAAA,GAAkB,IAAA,CAAK,KAAA,CAAM,UAAA,GAAa,IAAI,CAAA;AAEpD,IAAA,MAAM,QAAA,GAAW;AAAA,MACf;AAAA,QACE,IAAA,EAAM,sBAAA;AAAA,QACN,QAAA,EAAU,MAAA;AAAA,QACV,WAAA,EAAa,4DAAA;AAAA,QACb,eAAe,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,EAAE,CAAA,GAAI;AAAA,OAClD;AAAA,MACA;AAAA,QACE,IAAA,EAAM,sBAAA;AAAA,QACN,QAAA,EAAU,QAAA;AAAA,QACV,WAAA,EAAa,8BAAA;AAAA,QACb,eAAe,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,EAAE,CAAA,GAAI;AAAA,OAClD;AAAA,MACA;AAAA,QACE,IAAA,EAAM,mBAAA;AAAA,QACN,QAAA,EAAU,MAAA;AAAA,QACV,WAAA,EAAa,0CAAA;AAAA,QACb,eAAe,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,EAAE,CAAA,GAAI;AAAA,OAClD;AAAA,MACA;AAAA,QACE,IAAA,EAAM,oBAAA;AAAA,QACN,QAAA,EAAU,UAAA;AAAA,QACV,WAAA,EAAa,wCAAA;AAAA,QACb,eAAe,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,CAAC,CAAA,GAAI;AAAA;AACjD,MACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAElC,IAAA,OAAO;AAAA,MACL,QAAA;AAAA,MACA,UAAA;AAAA,MACA,eAAA;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,wCAAA;AAAA,QACA,wCAAA;AAAA,QACA,oCAAA;AAAA,QACA,8BAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,QAAA,EAAU,CAAA,OAAA,EAAU,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KAChC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,qBAAqB,UAAA,CAAW;AAAA,EACpC,IAAA,EAAM,qBAAA;AAAA,EACN,WAAA,EAAa,oDAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,MAAA,EAAQ,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,2BAA2B,CAAA;AAAA,IACvD,SAAA,EAAW,CAAA,CAAE,IAAA,CAAK,CAAC,QAAA,EAAU,aAAa,MAAM,CAAC,CAAA,CAAE,QAAA,CAAS,6BAA6B,CAAA;AAAA,IACzF,mBAAmB,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,4BAA4B;AAAA,GAChF,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,gBAAA,EAAkB,EAAE,MAAA,CAAO;AAAA,MACzB,MAAA,EAAQ,CAAA,CAAE,OAAA,EAAQ,CAAE,QAAA,EAAS;AAAA,MAC7B,SAAA,EAAW,CAAA,CAAE,OAAA,EAAQ,CAAE,QAAA;AAAS,KACjC,CAAA;AAAA,IACD,UAAA,EAAY,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC3B,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,UAAU,UAAA,EAAY,MAAA,EAAQ,QAAQ,CAAC,CAAA;AAAA,MACzD,OAAA,EAAS,EAAE,MAAA,EAAO;AAAA,MAClB,cAAA,EAAgB,EAAE,MAAA;AAAO,KAC1B,CAAC,CAAA;AAAA,IACF,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,gBAAA,EAAkB,EAAE,MAAA,CAAO;AAAA,MACzB,GAAA,EAAK,EAAE,OAAA,EAAQ;AAAA,MACf,KAAA,EAAO,EAAE,OAAA,EAAQ;AAAA,MACjB,IAAA,EAAM,EAAE,OAAA;AAAQ,KACjB,CAAA;AAAA,IACD,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,QAAQ,SAAA,EAAW,iBAAA,GAAoB,MAAK,KAAM;AAClE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAG,CAAC,CAAA;AAErD,IAAA,MAAM,aAAa,iBAAA,GAAoB;AAAA,MACrC,EAAE,MAAM,SAAA,EAAW,QAAA,EAAU,UAAU,OAAA,EAAS,GAAA,EAAK,gBAAgB,gBAAA,EAAiB;AAAA,MACtF,EAAE,MAAM,UAAA,EAAY,QAAA,EAAU,YAAY,OAAA,EAAS,IAAA,EAAM,gBAAgB,gCAAA,EAAiC;AAAA,MAC1G,EAAE,MAAM,OAAA,EAAS,QAAA,EAAU,UAAU,OAAA,EAAS,GAAA,EAAK,gBAAgB,gCAAA,EAAiC;AAAA,MACpG,EAAE,MAAM,SAAA,EAAW,QAAA,EAAU,UAAU,OAAA,EAAS,GAAA,EAAK,gBAAgB,uBAAA;AAAwB,KAC/F,CAAE,OAAO,MAAM,IAAA,CAAK,QAAO,GAAI,GAAG,IAAI,EAAC;AAEvC,IAAA,MAAM,kBAAkB,EAAC;AACzB,IAAA,IAAI,UAAA,CAAW,KAAK,CAAA,CAAA,KAAK,CAAA,CAAE,aAAa,MAAA,IAAU,CAAA,CAAE,QAAA,KAAa,QAAQ,CAAA,EAAG;AAC1E,MAAA,eAAA,CAAgB,KAAK,qCAAqC,CAAA;AAAA,IAC5D;AACA,IAAA,IAAI,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,EAAK;AACvB,MAAA,eAAA,CAAgB,KAAK,2CAA2C,CAAA;AAAA,IAClE;AACA,IAAA,IAAI,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,EAAK;AACvB,MAAA,eAAA,CAAgB,KAAK,qCAAqC,CAAA;AAAA,IAC5D;AAEA,IAAA,OAAO;AAAA,MACL,gBAAA,EAAkB;AAAA,QAChB,GAAI,cAAc,WAAA,IAAe,EAAE,QAAQ,IAAA,CAAK,MAAA,KAAW,GAAA,EAAI;AAAA,QAC/D,GAAI,cAAc,QAAA,IAAY,EAAE,WAAW,IAAA,CAAK,MAAA,KAAW,GAAA;AAAI,OACjE;AAAA,MACA,UAAA;AAAA,MACA,eAAA;AAAA,MACA,gBAAA,EAAkB;AAAA,QAChB,GAAA,EAAK,gBAAgB,MAAA,KAAW,CAAA;AAAA,QAChC,OAAO,UAAA,CAAW,KAAA,CAAM,CAAA,CAAA,KAAK,CAAA,CAAE,aAAa,QAAQ,CAAA;AAAA,QACpD,IAAA,EAAM,gBAAgB,MAAA,GAAS;AAAA,OACjC;AAAA,MACA,QAAA,EAAU,CAAA,QAAA,EAAW,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KACjC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,gBAAgB,UAAA,CAAW;AAAA,EAC/B,IAAA,EAAM,gBAAA;AAAA,EACN,WAAA,EAAa,4DAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,MAAA,EAAQ,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,iBAAiB,CAAA;AAAA,IAC7C,WAAA,EAAa,CAAA,CAAE,IAAA,CAAK,CAAC,QAAA,EAAU,SAAS,MAAM,CAAC,CAAA,CAAE,QAAA,CAAS,6BAA6B,CAAA;AAAA,IACvF,eAAe,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,+BAA+B;AAAA,GAC/E,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,OAAA,EAAS,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACxB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,YAAY,CAAA,CAAE,IAAA,CAAK,CAAC,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MAC5C,MAAA,EAAQ,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACpD,WAAA,EAAa,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ;AAAA,KAChC,CAAC,CAAA;AAAA,IACF,aAAA,EAAe,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACjC,YAAA,EAAc,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC7B,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,MACrB,YAAY,CAAA,CAAE,IAAA,CAAK,CAAC,UAAA,EAAY,cAAA,EAAgB,OAAO,CAAC;AAAA,KACzD,CAAC,CAAA,CAAE,QAAA,EAAS;AAAA,IACb,UAAA,EAAY,EAAE,MAAA,CAAO;AAAA,MACnB,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,MACjB,GAAA,EAAK,EAAE,MAAA;AAAO,KACf,CAAA;AAAA,IACD,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,QAAQ,WAAA,EAAa,aAAA,GAAgB,OAAM,KAAM;AACjE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,IAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,mBAAmB,CAAC,UAAA,EAAY,aAAa,aAAA,EAAe,wBAAA,EAA0B,qBAAqB,wBAAwB,CAAA;AAEzI,IAAA,MAAM,OAAA,GAAU,gBAAA,CACb,MAAA,CAAO,MAAM,IAAA,CAAK,QAAO,GAAI,GAAG,CAAA,CAChC,GAAA,CAAI,CAAA,QAAA,MAAa;AAAA,MAChB,QAAA;AAAA,MACA,aAAa,CAAA,EAAG,QAAQ,CAAA,sBAAA,EAAyB,MAAM,UAAU,WAAW,CAAA,CAAA;AAAA,MAC5E,UAAA,EAAY,CAAC,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,MACnE,MAAA,EAAQ,CAAC,UAAA,EAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,MAC3E,WAAA,EAAa;AAAA,QACX,iCAAA;AAAA,QACA,mBAAA;AAAA,QACA,mBAAA;AAAA,QACA,qBAAA;AAAA,QACA;AAAA,OACF,CAAE,KAAA,CAAM,CAAA,EAAG,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,CAAC,CAAA,GAAI,CAAC;AAAA,KAC9C,CAAE,CAAA;AAEJ,IAAA,MAAM,eAAe,aAAA,GAAgB;AAAA,MACnC,EAAE,IAAA,EAAM,cAAA,EAAgB,UAAA,EAAY,WAAA,EAAa,YAAY,UAAA,EAAW;AAAA,MACxE,EAAE,IAAA,EAAM,eAAA,EAAiB,UAAA,EAAY,gBAAA,EAAkB,YAAY,cAAA,EAAe;AAAA,MAClF,EAAE,IAAA,EAAM,YAAA,EAAc,UAAA,EAAY,aAAA,EAAe,YAAY,cAAA,EAAe;AAAA,MAC5E,EAAE,IAAA,EAAM,gBAAA,EAAkB,UAAA,EAAY,gBAAA,EAAkB,YAAY,OAAA;AAAQ,MAC5E,MAAA,CAAO,MAAM,KAAK,MAAA,EAAO,GAAI,GAAG,CAAA,GAAI,MAAA;AAEtC,IAAA,MAAM,UAAA,GAAa,OAAA,CAAQ,MAAA,CAAO,CAAC,QAAQ,MAAA,KAAW;AACpD,MAAA,MAAA,CAAO,OAAO,MAAM,CAAA,EAAA;AACpB,MAAA,OAAO,MAAA;AAAA,IACT,CAAA,EAAG,EAAE,QAAA,EAAU,CAAA,EAAG,IAAA,EAAM,GAAG,MAAA,EAAQ,CAAA,EAAG,GAAA,EAAK,CAAA,EAAG,CAAA;AAE9C,IAAA,OAAO;AAAA,MACL,OAAA;AAAA,MACA,aAAA,EAAe;AAAA,QACb,iBAAA;AAAA,QACA,mBAAA;AAAA,QACA,yBAAA;AAAA,QACA,mBAAA;AAAA,QACA,oBAAA;AAAA,QACA;AAAA,QACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAAA,MAClC,YAAA;AAAA,MACA,UAAA;AAAA,MACA,QAAA,EAAU,CAAA,OAAA,EAAU,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KAChC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,4BAA4B,UAAA,CAAW;AAAA,EAC3C,IAAA,EAAM,6BAAA;AAAA,EACN,WAAA,EAAa,0DAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,YAAA,EAAc,CAAA,CAAE,IAAA,CAAK,CAAC,QAAA,EAAU,SAAA,EAAW,MAAA,EAAQ,SAAA,EAAW,YAAY,CAAC,CAAA,CAAE,QAAA,CAAS,8BAA8B,CAAA;AAAA,IACpH,QAAA,EAAU,CAAA,CAAE,IAAA,CAAK,CAAC,UAAA,EAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA,CAAE,QAAA,CAAS,mBAAmB,CAAA;AAAA,IACpF,cAAc,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,kCAAkC;AAAA,GACjF,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,QAAA,EAAU,EAAE,MAAA,CAAO;AAAA,MACjB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,QAAA,EAAU,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,QACzB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,QACf,KAAA,EAAO,EAAE,MAAA,EAAO;AAAA,QAChB,MAAA,EAAQ,EAAE,MAAA;AAAO,OAClB,CAAC,CAAA;AAAA,MACF,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ;AAAA,KACpC,CAAA;AAAA,IACD,eAAA,EAAiB,EAAE,MAAA,CAAO;AAAA,MACxB,aAAA,EAAe,EAAE,MAAA,EAAO;AAAA,MACxB,eAAA,EAAiB,EAAE,MAAA,EAAO;AAAA,MAC1B,YAAA,EAAc,EAAE,MAAA,EAAO;AAAA,MACvB,aAAA,EAAe,EAAE,MAAA;AAAO,KACzB,CAAA;AAAA,IACD,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,cAAA,EAAgB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAClC,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,cAAc,QAAA,EAAU,YAAA,GAAe,MAAK,KAAM;AAClE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,QAAA,uBAAe,IAAA,EAAK;AAC1B,IAAA,MAAM,QAAA,GAAW;AAAA,MACf,EAAE,MAAM,QAAA,CAAS,WAAA,IAAe,KAAA,EAAO,6BAAA,EAA+B,QAAQ,iBAAA,EAAkB;AAAA,MAChG,EAAE,IAAA,EAAM,IAAI,IAAA,CAAK,SAAS,OAAA,EAAQ,GAAI,GAAM,CAAA,CAAE,WAAA,EAAY,EAAG,KAAA,EAAO,oBAAA,EAAsB,QAAQ,yBAAA,EAA0B;AAAA,MAC5H,EAAE,IAAA,EAAM,IAAI,IAAA,CAAK,SAAS,OAAA,EAAQ,GAAI,GAAM,CAAA,CAAE,WAAA,EAAY,EAAG,KAAA,EAAO,uBAAA,EAAyB,QAAQ,2BAAA,EAA4B;AAAA,MACjI,EAAE,IAAA,EAAM,IAAI,IAAA,CAAK,SAAS,OAAA,EAAQ,GAAI,IAAO,CAAA,CAAE,WAAA,EAAY,EAAG,KAAA,EAAO,kBAAA,EAAoB,QAAQ,2BAAA,EAA4B;AAAA,MAC7H,EAAE,IAAA,EAAM,IAAI,IAAA,CAAK,SAAS,OAAA,EAAQ,GAAI,IAAO,CAAA,CAAE,WAAA,EAAY,EAAG,KAAA,EAAO,mBAAA,EAAqB,QAAQ,2BAAA;AAA4B,KAChI;AAEA,IAAA,MAAM,eAAA,GAAkB;AAAA,MACtB,iBAAA;AAAA,MACA,kBAAA;AAAA,MACA,aAAA;AAAA,MACA,6BAAA;AAAA,MACA;AAAA,MACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAElC,IAAA,MAAM,gBAAgB,QAAA,KAAa,UAAA,GAAa,CAAA,GAAI,QAAA,KAAa,SAAS,EAAA,GAAK,EAAA;AAC/E,IAAA,MAAM,kBAAkB,QAAA,KAAa,UAAA,GAAa,EAAA,GAAK,QAAA,KAAa,SAAS,EAAA,GAAK,GAAA;AAClF,IAAA,MAAM,eAAe,QAAA,KAAa,UAAA,GAAa,GAAA,GAAM,QAAA,KAAa,SAAS,GAAA,GAAM,GAAA;AAEjF,IAAA,OAAO;AAAA,MACL,QAAA,EAAU;AAAA,QACR,IAAA,EAAM,YAAA;AAAA,QACN,QAAA;AAAA,QACA,QAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,aAAA;AAAA,QACA,eAAA;AAAA,QACA,YAAA;AAAA,QACA,aAAA,EAAe,gBAAgB,eAAA,GAAkB;AAAA,OACnD;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,yCAAA;AAAA,QACA,oCAAA;AAAA,QACA,0CAAA;AAAA,QACA,4CAAA;AAAA,QACA;AAAA,OACF;AAAA,MACA,cAAA,EAAgB;AAAA,QACd,kCAAA;AAAA,QACA,6CAAA;AAAA,QACA,qCAAA;AAAA,QACA;AAAA,QACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAAA,MAClC,QAAA,EAAU,CAAA,SAAA,EAAY,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KAClC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,oBAAoB,UAAA,CAAW;AAAA,EACnC,IAAA,EAAM,oBAAA;AAAA,EACN,WAAA,EAAa,0DAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,SAAA,EAAW,CAAA,CAAE,IAAA,CAAK,CAAC,MAAA,EAAQ,UAAA,EAAY,MAAA,EAAQ,OAAA,EAAS,SAAS,CAAC,CAAA,CAAE,QAAA,CAAS,+BAA+B,CAAA;AAAA,IAC5G,KAAA,EAAO,EAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA,CAAE,SAAS,+BAA+B,CAAA;AAAA,IACnE,gBAAgB,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,qCAAqC;AAAA,GACtF,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,eAAA,EAAiB,EAAE,MAAA,EAAO;AAAA,IAC1B,YAAA,EAAc,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC7B,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,QAAQ,CAAA,CAAE,IAAA,CAAK,CAAC,WAAA,EAAa,SAAA,EAAW,eAAe,CAAC,CAAA;AAAA,MACxD,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,GAAA,EAAK,CAAA,CAAE,MAAA,EAAO,CAAE,QAAA;AAAS,KAC1B,CAAC,CAAA;AAAA,IACF,YAAA,EAAc,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAChC,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAChC,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,aAAa,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACvD,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,MACjB,QAAA,EAAU,EAAE,MAAA;AAAO,KACpB,CAAC,CAAA;AAAA,IACF,kBAAA,EAAoB,EAAE,OAAA,EAAQ;AAAA,IAC9B,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,WAAW,KAAA,EAAO,cAAA,GAAiB,MAAK,KAAM;AAC9D,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,IAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,qBAAA,GAAwB,oBAAA,CAAqB,SAAS,CAAA,IAAK,EAAC;AAClE,IAAA,MAAM,YAAA,GAAe,qBAAA,CAAsB,GAAA,CAAI,CAAA,QAAA,KAAY;AACzD,MAAA,MAAM,MAAA,GAAS,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,GAAM,kBAAkB,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,GAAM,WAAA,GAAc,SAAA;AAC3F,MAAA,OAAO;AAAA,QACL,QAAA;AAAA,QACA,WAAA,EAAa,CAAA,EAAG,SAAS,CAAA,iBAAA,EAAoB,QAAQ,CAAA,CAAA;AAAA,QACrD,MAAA;AAAA,QACA,QAAA,EAAU,MAAA,KAAW,WAAA,GAAc,qCAAA,GAAwC,4BAAA;AAAA,QAC3E,GAAA,EAAK,MAAA,KAAW,WAAA,GAAc,CAAA,qBAAA,EAAwB,QAAQ,OAAO,KAAA,CAAM,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA,GAAK;AAAA,OAC5F;AAAA,IACF,CAAC,CAAA;AAED,IAAA,MAAM,kBAAkB,IAAA,CAAK,KAAA;AAAA,MAC1B,YAAA,CAAa,OAAO,CAAA,CAAA,KAAK,CAAA,CAAE,WAAW,WAAW,CAAA,CAAE,MAAA,GAAS,YAAA,CAAa,MAAA,GAAU;AAAA,KACtF;AAEA,IAAA,MAAM,YAAA,GAAe,YAAA,CAClB,MAAA,CAAO,CAAA,CAAA,KAAK,EAAE,MAAA,KAAW,eAAe,CAAA,CACxC,GAAA,CAAI,CAAA,CAAA,KAAK,CAAA,CAAE,GAAG,CAAA,CACd,OAAO,OAAO,CAAA;AAEjB,IAAA,OAAO;AAAA,MACL,eAAA;AAAA,MACA,YAAA;AAAA,MACA,YAAA;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,EAAE,QAAA,EAAU,WAAA,EAAa,MAAA,EAAQ,qCAAA,EAAuC,UAAU,SAAA,EAAU;AAAA,QAC5F,EAAE,QAAA,EAAU,MAAA,EAAQ,MAAA,EAAQ,yCAAA,EAA2C,UAAU,SAAA,EAAU;AAAA,QAC3F,EAAE,QAAA,EAAU,QAAA,EAAU,MAAA,EAAQ,qCAAA,EAAuC,UAAU,SAAA,EAAU;AAAA,QACzF,EAAE,QAAA,EAAU,KAAA,EAAO,MAAA,EAAQ,iCAAA,EAAmC,UAAU,UAAA;AAAW,QACnF,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAAA,MAClC,oBAAoB,eAAA,IAAmB,EAAA;AAAA,MACvC,QAAA,EAAU,CAAA,WAAA,EAAc,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KACpC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,kBAAkB,UAAA,CAAW;AAAA,EACjC,IAAA,EAAM,kBAAA;AAAA,EACN,WAAA,EAAa,8CAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,SAAA,EAAW,CAAA,CAAE,IAAA,CAAK,CAAC,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,KAAK,CAAC,CAAA,CAAE,QAAA,CAAS,uBAAuB,CAAA;AAAA,IAC9E,OAAA,EAAS,EAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA,CAAE,SAAS,oBAAoB,CAAA;AAAA,IAC1D,cAAA,EAAgB,CAAA,CAAE,IAAA,CAAK,CAAC,KAAA,EAAO,QAAA,EAAU,MAAM,CAAC,CAAA,CAAE,QAAA,EAAS,CAAE,QAAA,CAAS,mBAAmB;AAAA,GAC1F,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,MAAA,EAAQ,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACvB,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,MACpB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACtD,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,MACjB,WAAA,EAAa,EAAE,MAAA;AAAO,KACvB,CAAC,CAAA;AAAA,IACF,SAAA,EAAW,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC1B,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,MACrB,OAAA,EAAS,EAAE,MAAA;AAAO,KACnB,CAAC,CAAA;AAAA,IACF,OAAA,EAAS,EAAE,MAAA,CAAO;AAAA,MAChB,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,cAAA,EAAgB,EAAE,MAAA,EAAO;AAAA,MACzB,cAAA,EAAgB,EAAE,MAAA,EAAO;AAAA,MACzB,gBAAA,EAAkB,EAAE,MAAA;AAAO,KAC5B,CAAA;AAAA,IACD,MAAA,EAAQ,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IAC1B,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,WAAW,OAAA,EAAS,cAAA,GAAiB,UAAS,KAAM;AACpE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,UAAA,GAAa;AAAA,MACjB,sBAAA;AAAA,MAAwB,sBAAA;AAAA,MAAwB,yBAAA;AAAA,MAChD,uBAAA;AAAA,MAAyB,mBAAA;AAAA,MAAqB;AAAA,KAChD;AAEA,IAAA,MAAM,SAAA,GAAY,cAAc,IAAA,GAAO,EAAA,GAAK,cAAc,KAAA,GAAQ,GAAA,GAAM,SAAA,KAAc,IAAA,GAAO,GAAA,GAAO,GAAA;AACpG,IAAA,MAAM,MAAA,GAAS,KAAA,CAAM,IAAA,CAAK,EAAE,MAAA,EAAQ,IAAA,CAAK,GAAA,CAAI,SAAA,EAAW,EAAE,CAAA,EAAE,EAAG,OAAO;AAAA,MACpE,SAAA,EAAW,IAAI,IAAA,CAAK,IAAA,CAAK,GAAA,EAAI,GAAI,IAAA,CAAK,MAAA,EAAO,GAAI,KAAQ,CAAA,CAAE,WAAA,EAAY;AAAA,MACvE,IAAA,EAAM,WAAW,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,UAAA,CAAW,MAAM,CAAC,CAAA;AAAA,MAC9D,QAAA,EAAU,CAAC,UAAA,EAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,MAC7E,MAAA,EAAQ,QAAQ,IAAA,CAAK,KAAA,CAAM,KAAK,MAAA,EAAO,GAAI,OAAA,CAAQ,MAAM,CAAC,CAAA;AAAA,MAC1D,WAAA,EAAa;AAAA,KACf,CAAE,CAAA;AAEF,IAAA,MAAM,SAAA,GAAY;AAAA,MAChB,EAAE,IAAA,EAAM,uBAAA,EAAyB,UAAA,EAAY,IAAA,EAAM,SAAS,4CAAA,EAA6C;AAAA,MACzG,EAAE,IAAA,EAAM,2BAAA,EAA6B,UAAA,EAAY,IAAA,EAAM,SAAS,oCAAA,EAAqC;AAAA,MACrG,EAAE,IAAA,EAAM,8BAAA,EAAgC,UAAA,EAAY,IAAA,EAAM,SAAS,0CAAA;AAA2C,MAC9G,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAElC,IAAA,OAAO;AAAA,MACL,MAAA,EAAQ,MAAA,CAAO,KAAA,CAAM,CAAA,EAAG,EAAE,CAAA;AAAA,MAC1B,SAAA;AAAA,MACA,OAAA,EAAS;AAAA,QACP,WAAA,EAAa,SAAA;AAAA,QACb,cAAA,EAAgB,IAAA,CAAK,KAAA,CAAM,SAAA,GAAY,IAAI,CAAA;AAAA,QAC3C,cAAA,EAAgB,IAAA,CAAK,KAAA,CAAM,SAAA,GAAY,IAAI,CAAA;AAAA,QAC3C,kBAAkB,cAAA,KAAmB,KAAA,GAAQ,CAAA,GAAI,cAAA,KAAmB,WAAW,CAAA,GAAI;AAAA,OACrF;AAAA,MACA,MAAA,EAAQ;AAAA,QACN,4CAAA;AAAA,QACA,gCAAA;AAAA,QACA,iCAAA;AAAA,QACA;AAAA,QACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAAA,MAClC,QAAA,EAAU,CAAA,QAAA,EAAW,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KACjC;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,uBAAuB,UAAA,CAAW;AAAA,EACtC,IAAA,EAAM,uBAAA;AAAA,EACN,WAAA,EAAa,wDAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,UAAA,EAAY,CAAA,CAAE,MAAA,EAAO,CAAE,SAAS,+BAA+B,CAAA;AAAA,IAC/D,SAAA,EAAW,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,KAAK,CAAC,UAAA,EAAY,KAAA,EAAO,KAAA,EAAO,aAAa,OAAO,CAAC,CAAC,CAAA,CAAE,SAAS,uBAAuB,CAAA;AAAA,IAC7G,eAAe,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,8BAA8B;AAAA,GAC9E,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,WAAA,EAAa,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAC5B,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,MACjB,QAAQ,CAAA,CAAE,IAAA,CAAK,CAAC,QAAA,EAAU,QAAA,EAAU,YAAY,CAAC,CAAA;AAAA,MACjD,OAAA,EAAS,EAAE,MAAA;AAAO,KACnB,CAAC,CAAA;AAAA,IACF,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MAChC,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACtD,gBAAgB,CAAA,CAAE,IAAA,CAAK,CAAC,MAAA,EAAQ,UAAA,EAAY,WAAW,CAAC;AAAA,KACzD,CAAC,CAAA;AAAA,IACF,aAAA,EAAe,EAAE,MAAA,EAAO;AAAA,IACxB,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,YAAY,SAAA,EAAW,aAAA,GAAgB,OAAM,KAAM;AACnE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,IAAI,CAAC,CAAA;AAEtD,IAAA,MAAM,WAAA,GAAc;AAAA,MAClB,QAAA,EAAU,CAAC,aAAA,EAAe,mBAAA,EAAqB,gBAAgB,CAAA;AAAA,MAC/D,GAAA,EAAK,CAAC,YAAA,EAAc,kBAAA,EAAoB,eAAe,CAAA;AAAA,MACvD,GAAA,EAAK,CAAC,gBAAA,EAAkB,oBAAA,EAAsB,kBAAkB,CAAA;AAAA,MAChE,SAAA,EAAW,CAAC,qBAAA,EAAuB,qBAAA,EAAuB,oBAAoB,CAAA;AAAA,MAC9E,KAAA,EAAO,CAAC,eAAA,EAAiB,eAAA,EAAiB,eAAe;AAAA,KAC3D;AAEA,IAAA,MAAM,cAAc,SAAA,CAAU,OAAA;AAAA,MAAQ,WACnC,WAAA,CAAY,IAAI,KAAK,EAAC,EAAG,IAAI,CAAA,MAAA,MAAW;AAAA,QACvC,QAAA,EAAU,IAAA;AAAA,QACV,MAAA;AAAA,QACA,MAAA,EAAQ,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,GAAM,eAAe,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,GAAM,QAAA,GAAW,QAAA;AAAA,QAC9E,OAAA,EAAS,CAAA,QAAA,EAAW,MAAM,CAAA,IAAA,EAAO,UAAU,CAAA,sBAAA;AAAA,OAC7C,CAAE;AAAA,KACJ;AAEA,IAAA,MAAM,eAAA,GAAkB,YACrB,MAAA,CAAO,CAAA,CAAA,KAAK,EAAE,MAAA,KAAW,YAAY,CAAA,CACrC,GAAA,CAAI,CAAA,CAAA,MAAM;AAAA,MACT,MAAM,CAAA,CAAE,MAAA;AAAA,MACR,QAAA,EAAU,CAAC,UAAA,EAAY,MAAA,EAAQ,QAAQ,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,MACtE,cAAA,EAAgB,CAAC,MAAA,EAAQ,UAAA,EAAY,WAAW,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC;AAAA,KACjF,CAAE,CAAA;AAEJ,IAAA,MAAM,cAAc,WAAA,CAAY,MAAA,CAAO,OAAK,CAAA,CAAE,MAAA,KAAW,QAAQ,CAAA,CAAE,MAAA;AACnE,IAAA,MAAM,gBAAgB,IAAA,CAAK,KAAA,CAAO,WAAA,GAAc,WAAA,CAAY,SAAU,GAAG,CAAA;AAEzE,IAAA,OAAO;AAAA,MACL,WAAA;AAAA,MACA,eAAA;AAAA,MACA,aAAA;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,oCAAA;AAAA,QACA,6BAAA;AAAA,QACA,6BAAA;AAAA,QACA,2BAAA;AAAA,QACA,iCAAA;AAAA,QACA;AAAA,QACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAAA,MAClC,QAAA,EAAU,CAAA,KAAA,EAAQ,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KAC9B;AAAA,EACF;AACF,CAAC,CAAA;AAGD,MAAM,mBAAmB,UAAA,CAAW;AAAA,EAClC,IAAA,EAAM,mBAAA;AAAA,EACN,WAAA,EAAa,+DAAA;AAAA,EACb,WAAA,EAAa,EAAE,MAAA,CAAO;AAAA,IACpB,YAAA,EAAc,CAAA,CAAE,IAAA,CAAK,CAAC,SAAA,EAAW,aAAA,EAAe,OAAA,EAAS,MAAM,CAAC,CAAA,CAAE,QAAA,CAAS,kBAAkB,CAAA;AAAA,IAC7F,YAAY,CAAA,CAAE,MAAA,GAAS,QAAA,EAAS,CAAE,SAAS,oCAAoC,CAAA;AAAA,IAC/E,iBAAiB,CAAA,CAAE,OAAA,GAAU,QAAA,EAAS,CAAE,SAAS,8BAA8B;AAAA,GAChF,CAAA;AAAA,EACD,YAAA,EAAc,EAAE,MAAA,CAAO;AAAA,IACrB,KAAA,EAAO,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACtB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,MACjB,MAAA,EAAQ,EAAE,MAAA,EAAO;AAAA,MACjB,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,MAAA,EAAO;AAAA,MACnB,QAAQ,CAAA,CAAE,IAAA,CAAK,CAAC,OAAA,EAAS,MAAM,CAAC,CAAA;AAAA,MAChC,IAAA,EAAM,EAAE,IAAA,CAAK,CAAC,QAAQ,QAAA,EAAU,KAAA,EAAO,MAAM,CAAC;AAAA,KAC/C,CAAC,CAAA;AAAA,IACF,MAAA,EAAQ,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,MAAA,CAAO;AAAA,MACvB,IAAA,EAAM,EAAE,MAAA,EAAO;AAAA,MACf,QAAA,EAAU,EAAE,IAAA,CAAK,CAAC,YAAY,MAAA,EAAQ,QAAA,EAAU,KAAK,CAAC,CAAA;AAAA,MACtD,WAAA,EAAa,EAAE,MAAA,EAAO;AAAA,MACtB,aAAA,EAAe,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ;AAAA,KAClC,CAAC,CAAA;AAAA,IACF,UAAA,EAAY,EAAE,MAAA,CAAO;AAAA,MACnB,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,MACrB,UAAA,EAAY,EAAE,MAAA,EAAO;AAAA,MACrB,SAAA,EAAW,EAAE,MAAA,EAAO;AAAA,MACpB,UAAA,EAAY,EAAE,MAAA;AAAO,KACtB,CAAA;AAAA,IACD,eAAA,EAAiB,CAAA,CAAE,KAAA,CAAM,CAAA,CAAE,QAAQ,CAAA;AAAA,IACnC,QAAA,EAAU,EAAE,MAAA;AAAO,GACpB,CAAA;AAAA,EACD,SAAS,OAAO,EAAE,cAAc,UAAA,EAAY,eAAA,GAAkB,MAAK,KAAM;AACvE,IAAA,MAAM,IAAI,OAAA,CAAQ,CAAA,OAAA,KAAW,UAAA,CAAW,OAAA,EAAS,GAAI,CAAC,CAAA;AAGtD,IAAA,MAAM,QAAQ,KAAA,CAAM,IAAA,CAAK,EAAE,MAAA,EAAQ,KAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,EAAE,CAAA,GAAI,EAAA,EAAG,EAAG,CAAC,GAAG,CAAA,KAAM;AAClF,MAAA,MAAM,OAAA,GAAU,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA;AAChC,MAAA,MAAM,OAAA,GAAU,OAAA,IAAW,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA;AAE3C,MAAA,OAAO;AAAA,QACL,MAAA,EAAQ,CAAA,GAAA,EAAM,CAAA,GAAI,CAAC,CAAA,CAAA;AAAA,QACnB,MAAA,EAAQ,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,GAAM,WAAA,GAAc,CAAA,QAAA,EAAW,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,GAAG,CAAC,CAAA,KAAA,CAAA;AAAA,QACtF,WAAA,EAAa,IAAA,CAAK,MAAA,EAAO,GAAI,GAAA,GAAM,KAAA,GAAQ,CAAA,KAAA,EAAQ,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,GAAG,CAAC,CAAA,KAAA,CAAA;AAAA,QAClF,IAAA,EAAM,CAAC,IAAA,EAAM,IAAA,EAAM,OAAO,MAAA,EAAQ,KAAK,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,QACtE,QAAA,EAAU,CAAC,KAAA,EAAO,KAAA,EAAO,KAAK,CAAA,CAAE,IAAA,CAAK,KAAA,CAAM,IAAA,CAAK,MAAA,EAAO,GAAI,CAAC,CAAC,CAAA;AAAA,QAC7D,MAAA,EAAQ,UAAU,OAAA,GAAU,MAAA;AAAA,QAC5B,IAAA,EAAM,UAAU,MAAA,GAAS,OAAA,IAAW,KAAK,MAAA,EAAO,GAAI,MAAM,QAAA,GAAW;AAAA,OACvE;AAAA,IACF,CAAC,CAAA;AAED,IAAA,MAAM,SAAS,EAAC;AAGhB,IAAA,IAAI,KAAA,CAAM,IAAA,CAAK,CAAA,CAAA,KAAK,CAAA,CAAE,MAAA,KAAW,WAAA,IAAe,CAAA,CAAE,IAAA,KAAS,IAAA,IAAQ,CAAA,CAAE,MAAA,KAAW,OAAO,CAAA,EAAG;AACxF,MAAA,MAAA,CAAO,IAAA,CAAK;AAAA,QACV,IAAA,EAAM,sBAAA;AAAA,QACN,QAAA,EAAU,UAAA;AAAA,QACV,WAAA,EAAa,yCAAA;AAAA,QACb,aAAA,EAAe,KAAA,CAAM,MAAA,CAAO,CAAA,CAAA,KAAK,EAAE,IAAA,KAAS,IAAA,IAAQ,CAAA,CAAE,MAAA,KAAW,WAAW,CAAA,CAAE,GAAA,CAAI,CAAA,CAAA,KAAK,EAAE,MAAM;AAAA,OAChG,CAAA;AAAA,IACH;AAEA,IAAA,IAAI,KAAA,CAAM,KAAK,CAAA,CAAA,KAAK,CAAA,CAAE,SAAS,KAAA,IAAS,CAAA,CAAE,MAAA,KAAW,OAAO,CAAA,EAAG;AAC7D,MAAA,MAAA,CAAO,IAAA,CAAK;AAAA,QACV,IAAA,EAAM,wBAAA;AAAA,QACN,QAAA,EAAU,MAAA;AAAA,QACV,WAAA,EAAa,iDAAA;AAAA,QACb,aAAA,EAAe,KAAA,CAAM,MAAA,CAAO,CAAA,CAAA,KAAK,EAAE,IAAA,KAAS,KAAA,IAAS,CAAA,CAAE,MAAA,KAAW,OAAO,CAAA,CAAE,GAAA,CAAI,CAAA,CAAA,KAAK,EAAE,MAAM;AAAA,OAC7F,CAAA;AAAA,IACH;AAEA,IAAA,MAAM,UAAA,GAAa;AAAA,MACjB,YAAY,KAAA,CAAM,MAAA;AAAA,MAClB,YAAY,KAAA,CAAM,MAAA,CAAO,OAAK,CAAA,CAAE,MAAA,KAAW,OAAO,CAAA,CAAE,MAAA;AAAA,MACpD,WAAW,KAAA,CAAM,MAAA,CAAO,OAAK,CAAA,CAAE,MAAA,KAAW,MAAM,CAAA,CAAE,MAAA;AAAA,MAClD,YAAY,KAAA,CAAM,MAAA,CAAO,OAAK,CAAA,CAAE,IAAA,KAAS,MAAM,CAAA,CAAE;AAAA,KACnD;AAEA,IAAA,OAAO;AAAA,MACL,KAAA,EAAO,KAAA,CAAM,KAAA,CAAM,CAAA,EAAG,EAAE,CAAA;AAAA;AAAA,MACxB,MAAA;AAAA,MACA,UAAA;AAAA,MACA,eAAA,EAAiB;AAAA,QACf,2DAAA;AAAA,QACA,gDAAA;AAAA,QACA,qCAAA;AAAA,QACA,2CAAA;AAAA,QACA,4BAAA;AAAA,QACA;AAAA,QACA,MAAA,CAAO,MAAM,IAAA,CAAK,MAAA,KAAW,GAAG,CAAA;AAAA,MAClC,QAAA,EAAU,CAAA,SAAA,EAAY,IAAA,CAAK,GAAA,EAAK,CAAA;AAAA,KAClC;AAAA,EACF;AACF,CAAC,CAAA;AAGM,MAAM,aAAA,GAAgB;AAAA,EAC3B,oBAAA;AAAA,EACA,iBAAA;AAAA,EACA,oBAAA;AAAA,EACA,kBAAA;AAAA,EACA,aAAA;AAAA,EACA,yBAAA;AAAA,EACA,iBAAA;AAAA,EACA,eAAA;AAAA,EACA,oBAAA;AAAA,EACA;AACF;;;;"}