{"version":3,"file":"1f802d3d-42f3-43dc-926c-b7253e38778d.mjs","sources":["../../../src/mastra/tools/research-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// Helper functions\nconst generateDOI = () => `10.1${Math.floor(Math.random() * 1000)}/${Math.floor(Math.random() * 10000)}.${Math.floor(Math.random() * 10000)}.${Math.floor(Math.random() * 10000)}`;\nconst generateORCID = () => `0000-000${Math.floor(Math.random() * 10)}-${Math.floor(Math.random() * 10000)}-${Math.floor(Math.random() * 10000)}`;\n\n// Literature Search Tool\nexport const literatureSearch = createTool({\n  id: 'literature-search',\n  name: 'Literature Search',\n  description: 'Search academic literature across multiple databases',\n  inputSchema: z.object({\n    query: z.string(),\n    databases: z.array(z.enum(['pubmed', 'arxiv', 'google_scholar', 'ieee', 'acm'])).default(['pubmed', 'google_scholar']),\n    yearRange: z.object({\n      from: z.number().optional(),\n      to: z.number().optional()\n    }).optional(),\n    maxResults: z.number().default(20)\n  }),\n  execute: async ({ query, databases, yearRange, maxResults }) => {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    const results = Array(Math.min(maxResults, 25)).fill(0).map((_, i) => ({\n      title: `Research on ${query} - Study ${i + 1}`,\n      authors: [`Author ${i + 1}`, `Co-Author ${i + 1}`],\n      doi: generateDOI(),\n      year: yearRange ? Math.floor(Math.random() * (yearRange.to - yearRange.from + 1)) + yearRange.from : 2020 + Math.floor(Math.random() * 4),\n      citations: Math.floor(Math.random() * 500),\n      relevanceScore: (Math.random() * 0.4 + 0.6).toFixed(3),\n      abstract: `This study investigates ${query} using advanced methodologies...`\n    }));\n    \n    return {\n      success: true,\n      query,\n      resultsFound: results.length,\n      databases,\n      results: results.sort((a, b) => parseFloat(b.relevanceScore) - parseFloat(a.relevanceScore))\n    };\n  }\n});\n\n// Experiment Design Tool\nexport const experimentDesign = createTool({\n  id: 'experiment-design',\n  name: 'Experiment Design',\n  description: 'Design scientific experiments with proper methodology',\n  inputSchema: z.object({\n    researchQuestion: z.string(),\n    experimentType: z.enum(['rct', 'observational', 'factorial', 'crossover']).default('rct'),\n    participantCount: z.number().default(100),\n    powerAnalysis: z.object({\n      alpha: z.number().default(0.05),\n      power: z.number().default(0.8),\n      effectSize: z.number().default(0.5)\n    }).optional()\n  }),\n  execute: async ({ researchQuestion, experimentType, participantCount, powerAnalysis }) => {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const design = {\n      researchQuestion,\n      experimentType,\n      methodology: {\n        design: experimentType === 'rct' ? 'Randomized Controlled Trial' : \n                experimentType === 'observational' ? 'Observational Study' :\n                experimentType === 'factorial' ? 'Factorial Design' : 'Crossover Study',\n        participantCount,\n        groups: experimentType === 'rct' ? ['Treatment', 'Control'] : \n                experimentType === 'factorial' ? ['Factor A+', 'Factor A-', 'Factor B+', 'Factor B-'] :\n                ['Group 1', 'Group 2'],\n        duration: '12 weeks',\n        measurementPoints: ['Baseline', 'Week 6', 'Week 12', 'Follow-up']\n      },\n      protocol: [\n        'Participant recruitment and screening',\n        'Baseline measurements',\n        'Randomization (if applicable)',\n        'Intervention delivery',\n        'Data collection',\n        'Statistical analysis'\n      ],\n      statisticalPlan: {\n        primaryAnalysis: experimentType === 'rct' ? 't-test' : 'regression analysis',\n        secondaryAnalyses: ['ANOVA', 'correlation analysis'],\n        multipleComparisons: 'Bonferroni correction',\n        missingData: 'Multiple imputation'\n      }\n    };\n    \n    if (powerAnalysis) {\n      const calculatedN = Math.ceil(participantCount * (1 + Math.random() * 0.2));\n      design.powerAnalysis = {\n        ...powerAnalysis,\n        recommendedN: calculatedN,\n        actualPower: (powerAnalysis.power + Math.random() * 0.1).toFixed(3)\n      };\n    }\n    \n    return {\n      success: true,\n      experimentDesign: design,\n      estimatedDuration: `${Math.floor(Math.random() * 6 + 6)} months`,\n      budgetEstimate: `$${(Math.random() * 50000 + 25000).toFixed(0)}`\n    };\n  }\n});\n\n// Hypothesis Generation Tool\nexport const hypothesisGeneration = createTool({\n  id: 'hypothesis-generation',\n  name: 'Hypothesis Generation',\n  description: 'Generate testable hypotheses based on research area',\n  inputSchema: z.object({\n    researchArea: z.string(),\n    existingFindings: z.array(z.string()).optional(),\n    hypothesisType: z.enum(['alternative', 'null', 'directional', 'non-directional']).default('alternative')\n  }),\n  execute: async ({ researchArea, existingFindings, hypothesisType }) => {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    const hypotheses = [\n      {\n        statement: `In ${researchArea}, there is a significant positive correlation between X and Y factors`,\n        type: 'alternative',\n        testability: {\n          score: 0.85,\n          requirements: ['Access to relevant datasets', 'Statistical analysis tools', 'Domain expertise']\n        },\n        potentialImpact: 'high'\n      },\n      {\n        statement: `The implementation of intervention Z in ${researchArea} will show no significant effect`,\n        type: 'directional',\n        testability: {\n          score: 0.92,\n          requirements: ['Controlled environment', 'Randomized participants', 'Measurement instruments']\n        },\n        potentialImpact: 'medium'\n      }\n    ];\n    \n    return {\n      success: true,\n      researchArea,\n      generatedHypotheses: hypotheses,\n      recommendations: [\n        'Consider pilot study before full implementation',\n        'Establish clear operational definitions',\n        'Plan for potential confounding variables'\n      ]\n    };\n  }\n});\n\n// Data Collection Tool\nexport const dataCollection = createTool({\n  id: 'data-collection',\n  name: 'Data Collection Protocol',\n  description: 'Create data collection protocols and management plans',\n  inputSchema: z.object({\n    studyType: z.enum(['survey', 'interview', 'observation', 'experiment']),\n    dataTypes: z.array(z.enum(['quantitative', 'qualitative', 'mixed'])),\n    participantCount: z.number().default(100),\n    collectionMethod: z.enum(['online', 'in_person', 'hybrid']).default('hybrid')\n  }),\n  execute: async ({ studyType, dataTypes, participantCount, collectionMethod }) => {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    const protocol = {\n      studyType,\n      dataTypes,\n      participantCount,\n      collectionMethod,\n      instruments: studyType === 'survey' ? ['Questionnaire', 'Rating scales'] :\n                  studyType === 'interview' ? ['Interview guide', 'Audio recorder'] :\n                  studyType === 'observation' ? ['Observation checklist', 'Video camera'] :\n                  ['Measurement tools', 'Data logger'],\n      timeline: {\n        preparation: '2 weeks',\n        pilotTesting: '1 week',\n        dataCollection: `${Math.floor(participantCount / 10)} weeks`,\n        dataProcessing: '2 weeks'\n      },\n      qualityAssurance: [\n        'Training for data collectors',\n        'Inter-rater reliability checks',\n        'Data validation procedures',\n        'Regular quality audits'\n      ],\n      dataManagement: {\n        storage: 'Encrypted cloud storage',\n        backup: 'Daily automated backups',\n        access: 'Role-based access control',\n        retention: '7 years post-publication'\n      }\n    };\n    \n    return {\n      success: true,\n      protocol,\n      estimatedCost: `$${(participantCount * (Math.random() * 50 + 25)).toFixed(0)}`,\n      ethicsConsiderations: [\n        'Informed consent procedures',\n        'Data anonymization protocols',\n        'Participant withdrawal rights'\n      ]\n    };\n  }\n});\n\n// Statistical Validation Tool\nexport const statisticalValidation = createTool({\n  id: 'statistical-validation',\n  name: 'Statistical Validation',\n  description: 'Perform statistical tests and validate assumptions',\n  inputSchema: z.object({\n    testType: z.enum(['t_test', 'anova', 'chi_square', 'regression', 'correlation']),\n    data: z.array(z.number()).optional(),\n    alpha: z.number().default(0.05),\n    checkAssumptions: z.boolean().default(true)\n  }),\n  execute: async ({ testType, data, alpha, checkAssumptions }) => {\n    await new Promise(resolve => setTimeout(resolve, 400));\n    \n    const mockResults = {\n      testType,\n      statistic: (Math.random() * 10 + 1).toFixed(3),\n      pValue: (Math.random() * 0.1).toFixed(4),\n      significantAt: alpha,\n      effectSize: (Math.random() * 1.5).toFixed(3),\n      interpretation: 'Results suggest a statistically significant effect'\n    };\n    \n    if (checkAssumptions) {\n      mockResults.assumptions = {\n        normality: { passed: Math.random() > 0.3, test: 'Shapiro-Wilk', pValue: (Math.random() * 0.5).toFixed(3) },\n        homoscedasticity: { passed: Math.random() > 0.2, test: 'Levene', pValue: (Math.random() * 0.4).toFixed(3) },\n        independence: { passed: Math.random() > 0.1, notes: 'Random sampling assumed' }\n      };\n    }\n    \n    return {\n      success: true,\n      results: mockResults,\n      recommendations: [\n        parseFloat(mockResults.pValue) < alpha ? 'Reject null hypothesis' : 'Fail to reject null hypothesis',\n        'Consider practical significance alongside statistical significance',\n        'Report confidence intervals'\n      ]\n    };\n  }\n});\n\n// Paper Summarization Tool\nexport const paperSummarization = createTool({\n  id: 'paper-summarization',\n  name: 'Paper Summarization',\n  description: 'Generate comprehensive summaries of research papers',\n  inputSchema: z.object({\n    paperTitle: z.string(),\n    doi: z.string().optional(),\n    sections: z.array(z.enum(['abstract', 'methodology', 'results', 'discussion', 'limitations'])).default(['abstract', 'results', 'discussion'])\n  }),\n  execute: async ({ paperTitle, doi, sections }) => {\n    await new Promise(resolve => setTimeout(resolve, 700));\n    \n    const summary = {\n      title: paperTitle,\n      doi: doi || generateDOI(),\n      keyFindings: [\n        'Primary outcome showed significant improvement',\n        'Secondary analysis revealed important correlations',\n        'Effect size was moderate to large'\n      ],\n      methodology: {\n        design: 'Randomized controlled trial',\n        participants: Math.floor(Math.random() * 500 + 100),\n        duration: `${Math.floor(Math.random() * 12 + 3)} months`,\n        measures: ['Primary endpoint', 'Secondary endpoints', 'Safety measures']\n      },\n      implications: [\n        'Findings support current theoretical framework',\n        'Clinical applications should be considered',\n        'Further research needed in specific populations'\n      ],\n      limitations: [\n        'Single-center study design',\n        'Limited generalizability to other populations',\n        'Potential selection bias'\n      ]\n    };\n    \n    return {\n      success: true,\n      paperTitle,\n      summary,\n      readingTime: `${Math.floor(Math.random() * 20 + 5)} minutes`,\n      complexity: Math.random() > 0.5 ? 'High' : 'Medium'\n    };\n  }\n});\n\n// Citation Analysis Tool\nexport const citationAnalysis = createTool({\n  id: 'citation-analysis',\n  name: 'Citation Analysis',\n  description: 'Analyze citation patterns and research impact',\n  inputSchema: z.object({\n    authorId: z.string().optional(),\n    paperDoi: z.string().optional(),\n    timeframe: z.enum(['1year', '5years', 'all_time']).default('5years'),\n    metrics: z.array(z.enum(['h_index', 'citations', 'impact_factor', 'network'])).default(['h_index', 'citations'])\n  }),\n  execute: async ({ authorId, paperDoi, timeframe, metrics }) => {\n    await new Promise(resolve => setTimeout(resolve, 900));\n    \n    const analysis = {\n      timeframe,\n      author: authorId ? {\n        id: authorId,\n        name: 'Dr. Researcher',\n        hIndex: Math.floor(Math.random() * 50 + 10),\n        totalCitations: Math.floor(Math.random() * 5000 + 500),\n        i10Index: Math.floor(Math.random() * 30 + 5)\n      } : null,\n      paper: paperDoi ? {\n        doi: paperDoi,\n        citations: Math.floor(Math.random() * 200 + 10),\n        citationsPerYear: Math.floor(Math.random() * 20 + 2),\n        fieldNormalizedImpact: (Math.random() * 2 + 0.5).toFixed(2)\n      } : null,\n      trends: {\n        direction: Math.random() > 0.3 ? 'increasing' : 'stable',\n        yearOverYear: `${(Math.random() * 20 + 5).toFixed(1)}% growth`,\n        peakYear: 2020 + Math.floor(Math.random() * 4)\n      }\n    };\n    \n    return {\n      success: true,\n      analysis,\n      benchmarks: {\n        fieldAverage: Math.floor(Math.random() * 1000 + 200),\n        percentile: Math.floor(Math.random() * 40 + 60)\n      }\n    };\n  }\n});\n\n// Collaboration Network Tool\nexport const collaborationNetwork = createTool({\n  id: 'collaboration-network',\n  name: 'Collaboration Network Analysis',\n  description: 'Analyze research collaboration networks and find collaborators',\n  inputSchema: z.object({\n    researcherId: z.string(),\n    analysisType: z.enum(['network', 'recommendations', 'trends']).default('network'),\n    maxConnections: z.number().default(50)\n  }),\n  execute: async ({ researcherId, analysisType, maxConnections }) => {\n    await new Promise(resolve => setTimeout(resolve, 600));\n    \n    const network = {\n      researcher: {\n        id: researcherId,\n        name: 'Dr. Primary Researcher',\n        orcid: generateORCID(),\n        institution: 'University Research Center'\n      },\n      collaborators: Array(Math.min(maxConnections, 20)).fill(0).map((_, i) => ({\n        id: `collab_${i + 1}`,\n        name: `Dr. Collaborator ${i + 1}`,\n        institution: `Institution ${i + 1}`,\n        collaborationStrength: (Math.random() * 0.8 + 0.2).toFixed(2),\n        sharedProjects: Math.floor(Math.random() * 10 + 1),\n        expertise: ['Research Area A', 'Research Area B']\n      })),\n      networkMetrics: {\n        totalConnections: Math.floor(Math.random() * 100 + 20),\n        averageDistance: (Math.random() * 2 + 2).toFixed(1),\n        clusteringCoefficient: (Math.random() * 0.5 + 0.3).toFixed(3),\n        centrality: (Math.random() * 0.3 + 0.1).toFixed(3)\n      }\n    };\n    \n    return {\n      success: true,\n      network,\n      recommendations: [\n        'Consider expanding collaboration in emerging research areas',\n        'Strengthen connections with high-impact researchers',\n        'Explore interdisciplinary partnerships'\n      ]\n    };\n  }\n});\n\n// Research Trend Analysis Tool\nexport const researchTrendAnalysis = createTool({\n  id: 'research-trend-analysis',\n  name: 'Research Trend Analysis',\n  description: 'Analyze research trends and predict future directions',\n  inputSchema: z.object({\n    field: z.string(),\n    timeRange: z.object({\n      start: z.number().default(2015),\n      end: z.number().default(2024)\n    }),\n    trendType: z.enum(['emerging', 'declining', 'stable', 'all']).default('all')\n  }),\n  execute: async ({ field, timeRange, trendType }) => {\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    \n    const trends = {\n      field,\n      timeRange,\n      emergingTopics: [\n        {\n          topic: `AI applications in ${field}`,\n          growthRate: `${(Math.random() * 200 + 100).toFixed(0)}%`,\n          publications: Math.floor(Math.random() * 1000 + 500),\n          predictedImpact: 'transformative'\n        },\n        {\n          topic: `Sustainable approaches in ${field}`,\n          growthRate: `${(Math.random() * 150 + 50).toFixed(0)}%`,\n          publications: Math.floor(Math.random() * 800 + 200),\n          predictedImpact: 'high'\n        },\n        {\n          topic: `Cross-disciplinary ${field} research`,\n          growthRate: `${(Math.random() * 100 + 30).toFixed(0)}%`,\n          publications: Math.floor(Math.random() * 600 + 100),\n          predictedImpact: 'medium'\n        }\n      ],\n      decliningTopics: [\n        {\n          topic: 'Traditional methodologies',\n          declineRate: `-${(Math.random() * 50 + 10).toFixed(0)}%`,\n          reason: 'Replaced by more advanced techniques'\n        }\n      ],\n      predictions: {\n        nextYear: 'Continued growth in AI integration',\n        fiveYears: 'Major paradigm shift expected',\n        fundingTrends: 'Increased investment in emerging areas'\n      }\n    };\n    \n    return {\n      success: true,\n      trends,\n      opportunities: [\n        'Early adoption of emerging methodologies',\n        'Collaboration across traditional boundaries',\n        'Development of novel applications'\n      ]\n    };\n  }\n});\n\n// Grant Proposal Assistant Tool\nexport const grantProposalAssistant = createTool({\n  id: 'grant-proposal-assistant',\n  name: 'Grant Proposal Assistant',\n  description: 'Assist with grant proposal preparation and funding matching',\n  inputSchema: z.object({\n    projectTitle: z.string(),\n    researchArea: z.string(),\n    budgetRange: z.object({\n      min: z.number(),\n      max: z.number()\n    }),\n    duration: z.number().default(24), // months\n    fundingType: z.enum(['federal', 'private', 'foundation', 'international']).default('federal')\n  }),\n  execute: async ({ projectTitle, researchArea, budgetRange, duration, fundingType }) => {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    const opportunities = [\n      {\n        funder: 'National Science Foundation',\n        program: 'Research Excellence Program',\n        maxAward: Math.floor(Math.random() * 500000 + 250000),\n        deadline: new Date(Date.now() + Math.random() * 180 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        matchScore: (Math.random() * 0.3 + 0.7).toFixed(2)\n      },\n      {\n        funder: 'Research Foundation',\n        program: 'Innovation Grant',\n        maxAward: Math.floor(Math.random() * 200000 + 100000),\n        deadline: new Date(Date.now() + Math.random() * 120 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        matchScore: (Math.random() * 0.2 + 0.6).toFixed(2)\n      }\n    ];\n    \n    const proposalStructure = {\n      sections: [\n        'Project Summary',\n        'Project Description',\n        'Research Plan',\n        'Budget Justification',\n        'Timeline and Milestones',\n        'Personnel',\n        'Facilities and Resources',\n        'References'\n      ],\n      requirements: [\n        '15-page limit for project description',\n        'Detailed budget with justification',\n        'Letters of support from collaborators',\n        'Data management plan'\n      ],\n      timeline: {\n        preparation: '6-8 weeks',\n        reviewCycle: '4-6 months',\n        startDate: 'Typically 6-12 months after submission'\n      }\n    };\n    \n    const budget = {\n      personnel: Math.floor((budgetRange.min + budgetRange.max) / 2 * 0.6),\n      equipment: Math.floor((budgetRange.min + budgetRange.max) / 2 * 0.2),\n      supplies: Math.floor((budgetRange.min + budgetRange.max) / 2 * 0.1),\n      travel: Math.floor((budgetRange.min + budgetRange.max) / 2 * 0.05),\n      indirect: Math.floor((budgetRange.min + budgetRange.max) / 2 * 0.05)\n    };\n    \n    return {\n      success: true,\n      projectTitle,\n      matchedOpportunities: opportunities,\n      proposalStructure,\n      budgetBreakdown: budget,\n      recommendations: [\n        'Start preparation at least 2 months before deadline',\n        'Engage with program officers early',\n        'Ensure all compliance requirements are met'\n      ]\n    };\n  }\n});\n\n// Export all research tools\nexport const researchTools = {\n  literatureSearch,\n  experimentDesign,\n  hypothesisGeneration,\n  dataCollection,\n  statisticalValidation,\n  paperSummarization,\n  citationAnalysis,\n  collaborationNetwork,\n  researchTrendAnalysis,\n  grantProposalAssistant\n};"],"names":[],"mappings":"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"}