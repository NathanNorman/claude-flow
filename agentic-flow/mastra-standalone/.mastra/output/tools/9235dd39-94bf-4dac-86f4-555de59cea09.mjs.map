{"version":3,"file":"9235dd39-94bf-4dac-86f4-555de59cea09.mjs","sources":["../../../src/mastra/tools/swarm-orchestration-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// Swarm state management\nconst swarmRegistry = new Map();\nconst agentRegistry = new Map();\nconst taskQueue = new Map();\nconst metricsStore = new Map();\n\n// Tool 1: Initialize a new swarm with configuration\nexport const swarmInit = createTool({\n  id: 'swarm-init',\n  name: 'Swarm Initialize',\n  description: 'Initialize a new swarm with specified topology and configuration',\n  inputSchema: z.object({\n    swarmId: z.string().optional().describe('Unique swarm identifier (auto-generated if not provided)'),\n    topology: z.enum(['hierarchical', 'mesh', 'ring', 'star']).describe('Swarm topology type'),\n    maxAgents: z.number().min(1).max(100).default(10).describe('Maximum number of agents'),\n    strategy: z.enum(['auto', 'manual', 'hybrid']).default('auto').describe('Agent management strategy'),\n    metadata: z.object({\n      name: z.string().optional(),\n      description: z.string().optional(),\n      tags: z.array(z.string()).optional()\n    }).optional()\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    topology: z.string(),\n    status: z.enum(['initialized', 'failed']),\n    config: z.object({\n      maxAgents: z.number(),\n      strategy: z.string(),\n      createdAt: z.string()\n    }),\n    message: z.string()\n  }),\n  execute: async ({ topology, maxAgents, strategy, metadata, swarmId }) => {\n    console.log(`[SwarmInit] Initializing swarm with topology: ${topology}`);\n    \n    const id = swarmId || `swarm-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n    \n    if (swarmRegistry.has(id)) {\n      console.log(`[SwarmInit] Swarm ${id} already exists`);\n      return {\n        swarmId: id,\n        topology,\n        status: 'failed',\n        config: { maxAgents, strategy, createdAt: new Date().toISOString() },\n        message: `Swarm ${id} already exists`\n      };\n    }\n    \n    const swarmConfig = {\n      id,\n      topology,\n      maxAgents,\n      strategy,\n      metadata: metadata || {},\n      agents: new Set(),\n      tasks: new Set(),\n      status: 'active',\n      createdAt: new Date().toISOString(),\n      metrics: {\n        tasksCompleted: 0,\n        tasksFailed: 0,\n        avgCompletionTime: 0,\n        uptime: 0\n      }\n    };\n    \n    swarmRegistry.set(id, swarmConfig);\n    console.log(`[SwarmInit] Swarm ${id} initialized successfully`);\n    \n    return {\n      swarmId: id,\n      topology,\n      status: 'initialized',\n      config: {\n        maxAgents,\n        strategy,\n        createdAt: swarmConfig.createdAt\n      },\n      message: `Swarm ${id} initialized with ${topology} topology, max agents: ${maxAgents}`\n    };\n  }\n});\n\n// Tool 2: Spawn specialized agents dynamically\nexport const agentSpawn = createTool({\n  id: 'agent-spawn',\n  name: 'Agent Spawn',\n  description: 'Spawn specialized agents dynamically within a swarm',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Target swarm ID'),\n    agentType: z.enum([\n      'coordinator', 'researcher', 'coder', 'analyst', \n      'architect', 'tester', 'reviewer', 'optimizer',\n      'documenter', 'monitor', 'specialist'\n    ]).describe('Type of agent to spawn'),\n    name: z.string().optional().describe('Agent name'),\n    capabilities: z.array(z.string()).optional().describe('Agent capabilities'),\n    priority: z.enum(['low', 'medium', 'high', 'critical']).default('medium'),\n    resources: z.object({\n      cpu: z.number().min(0.1).max(4).default(1),\n      memory: z.number().min(256).max(8192).default(1024),\n      timeout: z.number().min(1000).max(300000).default(60000)\n    }).optional()\n  }),\n  outputSchema: z.object({\n    agentId: z.string(),\n    swarmId: z.string(),\n    type: z.string(),\n    status: z.enum(['spawned', 'failed']),\n    capabilities: z.array(z.string()),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, agentType, name, capabilities, priority, resources }) => {\n    console.log(`[AgentSpawn] Spawning ${agentType} agent for swarm ${swarmId}`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[AgentSpawn] Swarm ${swarmId} not found`);\n      return {\n        agentId: '',\n        swarmId,\n        type: agentType,\n        status: 'failed',\n        capabilities: [],\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    if (swarm.agents.size >= swarm.maxAgents) {\n      console.log(`[AgentSpawn] Swarm ${swarmId} has reached max agents limit`);\n      return {\n        agentId: '',\n        swarmId,\n        type: agentType,\n        status: 'failed',\n        capabilities: [],\n        message: `Swarm has reached maximum agent limit (${swarm.maxAgents})`\n      };\n    }\n    \n    const agentId = `agent-${agentType}-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n    const agentCapabilities = capabilities || getDefaultCapabilities(agentType);\n    \n    const agent = {\n      id: agentId,\n      swarmId,\n      type: agentType,\n      name: name || `${agentType}-${agentId.substring(0, 8)}`,\n      capabilities: agentCapabilities,\n      priority,\n      resources: resources || { cpu: 1, memory: 1024, timeout: 60000 },\n      status: 'active',\n      tasks: new Set(),\n      metrics: {\n        tasksCompleted: 0,\n        tasksFailed: 0,\n        avgResponseTime: 0,\n        utilization: 0\n      },\n      spawnedAt: new Date().toISOString()\n    };\n    \n    agentRegistry.set(agentId, agent);\n    swarm.agents.add(agentId);\n    \n    console.log(`[AgentSpawn] Agent ${agentId} spawned successfully`);\n    \n    return {\n      agentId,\n      swarmId,\n      type: agentType,\n      status: 'spawned',\n      capabilities: agentCapabilities,\n      message: `${agentType} agent spawned with ID: ${agentId}`\n    };\n  }\n});\n\n// Tool 3: Orchestrate complex tasks across agents\nexport const taskOrchestrate = createTool({\n  id: 'task-orchestrate',\n  name: 'Task Orchestrate',\n  description: 'Orchestrate complex tasks across multiple agents in a swarm',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Target swarm ID'),\n    task: z.string().describe('Task description'),\n    strategy: z.enum(['parallel', 'sequential', 'adaptive', 'balanced']).default('balanced'),\n    priority: z.enum(['low', 'medium', 'high', 'critical']).default('medium'),\n    dependencies: z.array(z.string()).optional().describe('Task dependencies'),\n    subtasks: z.array(z.object({\n      description: z.string(),\n      requiredCapabilities: z.array(z.string()).optional(),\n      estimatedTime: z.number().optional()\n    })).optional(),\n    timeout: z.number().min(1000).max(3600000).default(300000)\n  }),\n  outputSchema: z.object({\n    taskId: z.string(),\n    swarmId: z.string(),\n    status: z.enum(['orchestrated', 'failed']),\n    strategy: z.string(),\n    assignedAgents: z.array(z.string()),\n    estimatedCompletion: z.string(),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, task, strategy, priority, dependencies, subtasks, timeout }) => {\n    console.log(`[TaskOrchestrate] Orchestrating task for swarm ${swarmId}: ${task}`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[TaskOrchestrate] Swarm ${swarmId} not found`);\n      return {\n        taskId: '',\n        swarmId,\n        status: 'failed',\n        strategy,\n        assignedAgents: [],\n        estimatedCompletion: '',\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    const taskId = `task-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n    const availableAgents = Array.from(swarm.agents).map(id => agentRegistry.get(id)).filter(a => a && a.status === 'active');\n    \n    if (availableAgents.length === 0) {\n      console.log(`[TaskOrchestrate] No available agents in swarm ${swarmId}`);\n      return {\n        taskId: '',\n        swarmId,\n        status: 'failed',\n        strategy,\n        assignedAgents: [],\n        estimatedCompletion: '',\n        message: 'No available agents in swarm'\n      };\n    }\n    \n    // Determine task breakdown\n    const taskBreakdown = subtasks || [{\n      description: task,\n      requiredCapabilities: [],\n      estimatedTime: timeout / availableAgents.length\n    }];\n    \n    // Assign agents based on strategy\n    const assignments = assignAgentsToTasks(availableAgents, taskBreakdown, strategy);\n    const assignedAgentIds = assignments.map(a => a.agentId);\n    \n    const taskConfig = {\n      id: taskId,\n      swarmId,\n      description: task,\n      strategy,\n      priority,\n      dependencies: dependencies || [],\n      subtasks: taskBreakdown,\n      assignments,\n      status: 'in_progress',\n      createdAt: new Date().toISOString(),\n      estimatedCompletion: new Date(Date.now() + timeout).toISOString(),\n      timeout\n    };\n    \n    taskQueue.set(taskId, taskConfig);\n    swarm.tasks.add(taskId);\n    \n    // Update agent assignments\n    assignments.forEach(({ agentId, subtask }) => {\n      const agent = agentRegistry.get(agentId);\n      if (agent) {\n        agent.tasks.add(taskId);\n        agent.metrics.utilization = Math.min(100, agent.metrics.utilization + 20);\n      }\n    });\n    \n    console.log(`[TaskOrchestrate] Task ${taskId} orchestrated with ${assignedAgentIds.length} agents`);\n    \n    return {\n      taskId,\n      swarmId,\n      status: 'orchestrated',\n      strategy,\n      assignedAgents: assignedAgentIds,\n      estimatedCompletion: taskConfig.estimatedCompletion,\n      message: `Task orchestrated with ${strategy} strategy across ${assignedAgentIds.length} agents`\n    };\n  }\n});\n\n// Tool 4: Get comprehensive swarm status\nexport const swarmStatus = createTool({\n  id: 'swarm-status',\n  name: 'Swarm Status',\n  description: 'Get comprehensive status and metrics for a swarm',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Swarm ID to check status'),\n    includeAgents: z.boolean().default(true).describe('Include agent details'),\n    includeTasks: z.boolean().default(true).describe('Include task details'),\n    includeMetrics: z.boolean().default(true).describe('Include performance metrics')\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    status: z.enum(['active', 'paused', 'degraded', 'inactive', 'not_found']),\n    topology: z.string().optional(),\n    agents: z.object({\n      total: z.number(),\n      active: z.number(),\n      idle: z.number(),\n      busy: z.number(),\n      details: z.array(z.object({\n        id: z.string(),\n        type: z.string(),\n        status: z.string(),\n        utilization: z.number()\n      })).optional()\n    }),\n    tasks: z.object({\n      total: z.number(),\n      inProgress: z.number(),\n      completed: z.number(),\n      failed: z.number(),\n      queued: z.number()\n    }),\n    metrics: z.object({\n      uptime: z.string(),\n      avgTaskCompletionTime: z.number(),\n      successRate: z.number(),\n      throughput: z.number()\n    }).optional(),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, includeAgents, includeTasks, includeMetrics }) => {\n    console.log(`[SwarmStatus] Checking status for swarm ${swarmId}`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[SwarmStatus] Swarm ${swarmId} not found`);\n      return {\n        swarmId,\n        status: 'not_found',\n        agents: { total: 0, active: 0, idle: 0, busy: 0 },\n        tasks: { total: 0, inProgress: 0, completed: 0, failed: 0, queued: 0 },\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    // Calculate agent statistics\n    const agents = Array.from(swarm.agents).map(id => agentRegistry.get(id)).filter(Boolean);\n    const agentStats = {\n      total: agents.length,\n      active: agents.filter(a => a.status === 'active').length,\n      idle: agents.filter(a => a.status === 'active' && a.tasks.size === 0).length,\n      busy: agents.filter(a => a.status === 'active' && a.tasks.size > 0).length,\n      details: includeAgents ? agents.map(a => ({\n        id: a.id,\n        type: a.type,\n        status: a.status,\n        utilization: a.metrics.utilization\n      })) : undefined\n    };\n    \n    // Calculate task statistics\n    const tasks = Array.from(swarm.tasks).map(id => taskQueue.get(id)).filter(Boolean);\n    const taskStats = {\n      total: tasks.length,\n      inProgress: tasks.filter(t => t.status === 'in_progress').length,\n      completed: tasks.filter(t => t.status === 'completed').length,\n      failed: tasks.filter(t => t.status === 'failed').length,\n      queued: tasks.filter(t => t.status === 'queued').length\n    };\n    \n    // Calculate metrics\n    const uptime = Date.now() - new Date(swarm.createdAt).getTime();\n    const metrics = includeMetrics ? {\n      uptime: `${Math.floor(uptime / 1000 / 60)} minutes`,\n      avgTaskCompletionTime: swarm.metrics.avgCompletionTime,\n      successRate: swarm.metrics.tasksCompleted > 0 \n        ? (swarm.metrics.tasksCompleted / (swarm.metrics.tasksCompleted + swarm.metrics.tasksFailed)) * 100 \n        : 0,\n      throughput: swarm.metrics.tasksCompleted / (uptime / 1000 / 60) // tasks per minute\n    } : undefined;\n    \n    // Determine overall status\n    let status = 'active';\n    if (agentStats.active === 0) status = 'inactive';\n    else if (agentStats.active < swarm.maxAgents * 0.5) status = 'degraded';\n    else if (taskStats.failed > taskStats.completed) status = 'degraded';\n    \n    console.log(`[SwarmStatus] Swarm ${swarmId} status: ${status}`);\n    \n    return {\n      swarmId,\n      status,\n      topology: swarm.topology,\n      agents: agentStats,\n      tasks: taskStats,\n      metrics,\n      message: `Swarm ${swarmId} is ${status} with ${agentStats.active} active agents and ${taskStats.inProgress} tasks in progress`\n    };\n  }\n});\n\n// Tool 5: Dynamic swarm scaling\nexport const swarmScale = createTool({\n  id: 'swarm-scale',\n  name: 'Swarm Scale',\n  description: 'Dynamically scale swarm by adjusting agent count',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Swarm ID to scale'),\n    targetSize: z.number().min(0).max(100).describe('Target number of agents'),\n    scaleType: z.enum(['up', 'down', 'auto']).default('auto').describe('Scaling direction'),\n    agentTypes: z.array(z.enum([\n      'coordinator', 'researcher', 'coder', 'analyst',\n      'architect', 'tester', 'reviewer', 'optimizer',\n      'documenter', 'monitor', 'specialist'\n    ])).optional().describe('Preferred agent types for scaling up'),\n    preserveAgents: z.array(z.string()).optional().describe('Agent IDs to preserve during scale down')\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    previousSize: z.number(),\n    currentSize: z.number(),\n    scaledAgents: z.array(z.object({\n      action: z.enum(['added', 'removed']),\n      agentId: z.string(),\n      agentType: z.string()\n    })),\n    status: z.enum(['scaled', 'partial', 'failed']),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, targetSize, scaleType, agentTypes, preserveAgents }) => {\n    console.log(`[SwarmScale] Scaling swarm ${swarmId} to ${targetSize} agents`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[SwarmScale] Swarm ${swarmId} not found`);\n      return {\n        swarmId,\n        previousSize: 0,\n        currentSize: 0,\n        scaledAgents: [],\n        status: 'failed',\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    const currentAgents = Array.from(swarm.agents).map(id => agentRegistry.get(id)).filter(Boolean);\n    const previousSize = currentAgents.length;\n    const scaledAgents = [];\n    \n    // Determine actual scaling action\n    let actualScaleType = scaleType;\n    if (scaleType === 'auto') {\n      actualScaleType = targetSize > previousSize ? 'up' : 'down';\n    }\n    \n    if (actualScaleType === 'up' && targetSize > previousSize) {\n      // Scale up: spawn new agents\n      const agentsToAdd = Math.min(targetSize - previousSize, swarm.maxAgents - previousSize);\n      const typesToUse = agentTypes || ['researcher', 'coder', 'analyst', 'tester'];\n      \n      for (let i = 0; i < agentsToAdd; i++) {\n        const agentType = typesToUse[i % typesToUse.length];\n        const agentId = `agent-${agentType}-${Date.now()}-${Math.random().toString(36).substring(7)}`;\n        \n        const agent = {\n          id: agentId,\n          swarmId,\n          type: agentType,\n          name: `${agentType}-${agentId.substring(0, 8)}`,\n          capabilities: getDefaultCapabilities(agentType),\n          priority: 'medium',\n          resources: { cpu: 1, memory: 1024, timeout: 60000 },\n          status: 'active',\n          tasks: new Set(),\n          metrics: {\n            tasksCompleted: 0,\n            tasksFailed: 0,\n            avgResponseTime: 0,\n            utilization: 0\n          },\n          spawnedAt: new Date().toISOString()\n        };\n        \n        agentRegistry.set(agentId, agent);\n        swarm.agents.add(agentId);\n        scaledAgents.push({ action: 'added', agentId, agentType });\n        \n        console.log(`[SwarmScale] Added agent ${agentId} (${agentType})`);\n      }\n    } else if (actualScaleType === 'down' && targetSize < previousSize) {\n      // Scale down: remove agents\n      const agentsToRemove = previousSize - targetSize;\n      const preserveSet = new Set(preserveAgents || []);\n      \n      // Sort agents by utilization (remove least utilized first)\n      const removableCandidates = currentAgents\n        .filter(a => !preserveSet.has(a.id) && a.tasks.size === 0)\n        .sort((a, b) => a.metrics.utilization - b.metrics.utilization);\n      \n      const agentsRemoved = removableCandidates.slice(0, agentsToRemove);\n      \n      agentsRemoved.forEach(agent => {\n        swarm.agents.delete(agent.id);\n        agentRegistry.delete(agent.id);\n        scaledAgents.push({ action: 'removed', agentId: agent.id, agentType: agent.type });\n        console.log(`[SwarmScale] Removed agent ${agent.id} (${agent.type})`);\n      });\n    }\n    \n    const currentSize = swarm.agents.size;\n    const status = currentSize === targetSize ? 'scaled' : 'partial';\n    \n    console.log(`[SwarmScale] Swarm ${swarmId} scaled from ${previousSize} to ${currentSize} agents`);\n    \n    return {\n      swarmId,\n      previousSize,\n      currentSize,\n      scaledAgents,\n      status,\n      message: `Swarm scaled from ${previousSize} to ${currentSize} agents (target: ${targetSize})`\n    };\n  }\n});\n\n// Tool 6: Gracefully shutdown swarm\nexport const swarmDestroy = createTool({\n  id: 'swarm-destroy',\n  name: 'Swarm Destroy',\n  description: 'Gracefully shutdown and destroy a swarm',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Swarm ID to destroy'),\n    force: z.boolean().default(false).describe('Force destroy even with active tasks'),\n    preserveData: z.boolean().default(true).describe('Preserve swarm data for analysis'),\n    timeout: z.number().min(0).max(60000).default(5000).describe('Graceful shutdown timeout in ms')\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    status: z.enum(['destroyed', 'failed', 'timeout']),\n    finalMetrics: z.object({\n      totalAgents: z.number(),\n      totalTasks: z.number(),\n      completedTasks: z.number(),\n      failedTasks: z.number(),\n      uptime: z.string()\n    }),\n    preservedData: z.boolean(),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, force, preserveData, timeout }) => {\n    console.log(`[SwarmDestroy] Initiating shutdown for swarm ${swarmId}`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[SwarmDestroy] Swarm ${swarmId} not found`);\n      return {\n        swarmId,\n        status: 'failed',\n        finalMetrics: {\n          totalAgents: 0,\n          totalTasks: 0,\n          completedTasks: 0,\n          failedTasks: 0,\n          uptime: '0 minutes'\n        },\n        preservedData: false,\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    // Check for active tasks\n    const activeTasks = Array.from(swarm.tasks)\n      .map(id => taskQueue.get(id))\n      .filter(t => t && t.status === 'in_progress');\n    \n    if (activeTasks.length > 0 && !force) {\n      console.log(`[SwarmDestroy] Swarm has ${activeTasks.length} active tasks, use force=true to destroy`);\n      return {\n        swarmId,\n        status: 'failed',\n        finalMetrics: {\n          totalAgents: swarm.agents.size,\n          totalTasks: swarm.tasks.size,\n          completedTasks: swarm.metrics.tasksCompleted,\n          failedTasks: swarm.metrics.tasksFailed,\n          uptime: `${Math.floor((Date.now() - new Date(swarm.createdAt).getTime()) / 1000 / 60)} minutes`\n        },\n        preservedData: false,\n        message: `Cannot destroy swarm with ${activeTasks.length} active tasks (use force=true)`\n      };\n    }\n    \n    // Graceful shutdown: notify agents\n    const agents = Array.from(swarm.agents).map(id => agentRegistry.get(id)).filter(Boolean);\n    console.log(`[SwarmDestroy] Shutting down ${agents.length} agents`);\n    \n    // Simulate graceful shutdown with timeout\n    await new Promise(resolve => setTimeout(resolve, Math.min(timeout, 1000)));\n    \n    // Collect final metrics\n    const finalMetrics = {\n      totalAgents: swarm.agents.size,\n      totalTasks: swarm.tasks.size,\n      completedTasks: swarm.metrics.tasksCompleted,\n      failedTasks: swarm.metrics.tasksFailed,\n      uptime: `${Math.floor((Date.now() - new Date(swarm.createdAt).getTime()) / 1000 / 60)} minutes`\n    };\n    \n    // Preserve data if requested\n    if (preserveData) {\n      const swarmData = {\n        ...swarm,\n        agents: agents.map(a => ({ ...a, tasks: Array.from(a.tasks) })),\n        tasks: Array.from(swarm.tasks).map(id => taskQueue.get(id)).filter(Boolean),\n        destroyedAt: new Date().toISOString()\n      };\n      metricsStore.set(`destroyed-${swarmId}`, swarmData);\n      console.log(`[SwarmDestroy] Swarm data preserved for analysis`);\n    }\n    \n    // Clean up registries\n    agents.forEach(agent => {\n      agentRegistry.delete(agent.id);\n    });\n    \n    swarm.tasks.forEach(taskId => {\n      taskQueue.delete(taskId);\n    });\n    \n    swarmRegistry.delete(swarmId);\n    \n    console.log(`[SwarmDestroy] Swarm ${swarmId} destroyed successfully`);\n    \n    return {\n      swarmId,\n      status: 'destroyed',\n      finalMetrics,\n      preservedData,\n      message: `Swarm ${swarmId} destroyed after ${finalMetrics.uptime} of operation`\n    };\n  }\n});\n\n// Tool 7: Optimize swarm topology\nexport const topologyOptimize = createTool({\n  id: 'topology-optimize',\n  name: 'Topology Optimize',\n  description: 'Optimize swarm topology based on current workload and performance',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Swarm ID to optimize'),\n    targetMetric: z.enum(['latency', 'throughput', 'resilience', 'efficiency']).default('efficiency'),\n    constraints: z.object({\n      maxLatency: z.number().optional(),\n      minThroughput: z.number().optional(),\n      maxResourceUsage: z.number().min(0).max(100).optional()\n    }).optional()\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    previousTopology: z.string(),\n    recommendedTopology: z.string(),\n    optimizationScore: z.number().min(0).max(100),\n    changes: z.array(z.object({\n      type: z.enum(['topology', 'connection', 'hierarchy']),\n      description: z.string()\n    })),\n    projectedImprovement: z.object({\n      metric: z.string(),\n      currentValue: z.number(),\n      projectedValue: z.number(),\n      improvementPercent: z.number()\n    }),\n    status: z.enum(['optimized', 'no_change_needed', 'failed']),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, targetMetric, constraints }) => {\n    console.log(`[TopologyOptimize] Optimizing topology for swarm ${swarmId} targeting ${targetMetric}`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[TopologyOptimize] Swarm ${swarmId} not found`);\n      return {\n        swarmId,\n        previousTopology: '',\n        recommendedTopology: '',\n        optimizationScore: 0,\n        changes: [],\n        projectedImprovement: {\n          metric: targetMetric,\n          currentValue: 0,\n          projectedValue: 0,\n          improvementPercent: 0\n        },\n        status: 'failed',\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    const agents = Array.from(swarm.agents).map(id => agentRegistry.get(id)).filter(Boolean);\n    const tasks = Array.from(swarm.tasks).map(id => taskQueue.get(id)).filter(Boolean);\n    \n    // Analyze current performance\n    const currentMetrics = analyzeSwarmMetrics(swarm, agents, tasks);\n    \n    // Determine optimal topology based on workload characteristics\n    const workloadProfile = {\n      agentCount: agents.length,\n      taskComplexity: tasks.filter(t => t.subtasks && t.subtasks.length > 1).length / Math.max(tasks.length, 1),\n      parallelism: tasks.filter(t => t.strategy === 'parallel').length / Math.max(tasks.length, 1),\n      communicationIntensity: calculateCommunicationIntensity(agents, tasks)\n    };\n    \n    let recommendedTopology = swarm.topology;\n    const changes = [];\n    \n    // Topology recommendations based on target metric\n    if (targetMetric === 'latency') {\n      if (workloadProfile.communicationIntensity > 0.7) {\n        recommendedTopology = 'mesh';\n        changes.push({\n          type: 'topology',\n          description: 'Switch to mesh topology for lower latency with high communication needs'\n        });\n      } else if (workloadProfile.agentCount > 20) {\n        recommendedTopology = 'hierarchical';\n        changes.push({\n          type: 'topology',\n          description: 'Use hierarchical topology to reduce communication overhead'\n        });\n      }\n    } else if (targetMetric === 'throughput') {\n      if (workloadProfile.parallelism > 0.6) {\n        recommendedTopology = 'star';\n        changes.push({\n          type: 'topology',\n          description: 'Star topology recommended for high parallelism workloads'\n        });\n      }\n    } else if (targetMetric === 'resilience') {\n      recommendedTopology = 'mesh';\n      changes.push({\n        type: 'topology',\n        description: 'Mesh topology provides best resilience through redundant connections'\n      });\n    } else if (targetMetric === 'efficiency') {\n      if (workloadProfile.agentCount < 10) {\n        recommendedTopology = 'star';\n        changes.push({\n          type: 'topology',\n          description: 'Star topology is most efficient for small swarms'\n        });\n      } else if (workloadProfile.taskComplexity > 0.5) {\n        recommendedTopology = 'hierarchical';\n        changes.push({\n          type: 'topology',\n          description: 'Hierarchical topology efficiently handles complex task decomposition'\n        });\n      }\n    }\n    \n    // Add connection optimizations\n    if (workloadProfile.communicationIntensity > 0.5) {\n      changes.push({\n        type: 'connection',\n        description: 'Increase connection pooling between frequently communicating agents'\n      });\n    }\n    \n    // Calculate optimization score and projected improvement\n    const optimizationScore = calculateOptimizationScore(swarm.topology, recommendedTopology, workloadProfile);\n    const currentValue = currentMetrics[targetMetric] || 50;\n    const projectedValue = currentValue * (1 + optimizationScore / 100);\n    \n    const status = recommendedTopology !== swarm.topology || changes.length > 0 ? 'optimized' : 'no_change_needed';\n    \n    console.log(`[TopologyOptimize] Optimization complete: ${swarm.topology} -> ${recommendedTopology}`);\n    \n    return {\n      swarmId,\n      previousTopology: swarm.topology,\n      recommendedTopology,\n      optimizationScore,\n      changes,\n      projectedImprovement: {\n        metric: targetMetric,\n        currentValue,\n        projectedValue,\n        improvementPercent: ((projectedValue - currentValue) / currentValue) * 100\n      },\n      status,\n      message: status === 'optimized' \n        ? `Topology optimization can improve ${targetMetric} by ${Math.round(optimizationScore)}%`\n        : 'Current topology is already optimal for the workload'\n    };\n  }\n});\n\n// Tool 8: Distribute tasks efficiently\nexport const loadBalance = createTool({\n  id: 'load-balance',\n  name: 'Load Balance',\n  description: 'Distribute tasks efficiently across swarm agents',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Swarm ID'),\n    tasks: z.array(z.object({\n      id: z.string(),\n      description: z.string(),\n      requiredCapabilities: z.array(z.string()).optional(),\n      estimatedLoad: z.number().min(0).max(100).optional(),\n      priority: z.enum(['low', 'medium', 'high', 'critical']).optional()\n    })).describe('Tasks to distribute'),\n    strategy: z.enum(['round-robin', 'least-loaded', 'capability-match', 'adaptive']).default('adaptive')\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    distributions: z.array(z.object({\n      taskId: z.string(),\n      assignedAgent: z.string(),\n      agentType: z.string(),\n      currentLoad: z.number(),\n      estimatedNewLoad: z.number()\n    })),\n    balanceScore: z.number().min(0).max(100),\n    strategy: z.string(),\n    status: z.enum(['balanced', 'partial', 'failed']),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, tasks, strategy }) => {\n    console.log(`[LoadBalance] Balancing ${tasks.length} tasks across swarm ${swarmId} using ${strategy} strategy`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[LoadBalance] Swarm ${swarmId} not found`);\n      return {\n        swarmId,\n        distributions: [],\n        balanceScore: 0,\n        strategy,\n        status: 'failed',\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    const agents = Array.from(swarm.agents)\n      .map(id => agentRegistry.get(id))\n      .filter(a => a && a.status === 'active');\n    \n    if (agents.length === 0) {\n      console.log(`[LoadBalance] No active agents available in swarm`);\n      return {\n        swarmId,\n        distributions: [],\n        balanceScore: 0,\n        strategy,\n        status: 'failed',\n        message: 'No active agents available for task distribution'\n      };\n    }\n    \n    const distributions = [];\n    const agentLoads = new Map(agents.map(a => [a.id, a.metrics.utilization || 0]));\n    \n    // Sort tasks by priority\n    const sortedTasks = [...tasks].sort((a, b) => {\n      const priorityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n      return (priorityOrder[b.priority || 'medium'] || 2) - (priorityOrder[a.priority || 'medium'] || 2);\n    });\n    \n    for (const task of sortedTasks) {\n      let selectedAgent = null;\n      \n      switch (strategy) {\n        case 'round-robin':\n          // Simple round-robin distribution\n          const index = distributions.length % agents.length;\n          selectedAgent = agents[index];\n          break;\n          \n        case 'least-loaded':\n          // Assign to agent with lowest current load\n          selectedAgent = agents.reduce((min, agent) => \n            (agentLoads.get(agent.id) || 0) < (agentLoads.get(min.id) || 0) ? agent : min\n          );\n          break;\n          \n        case 'capability-match':\n          // Match task requirements with agent capabilities\n          if (task.requiredCapabilities && task.requiredCapabilities.length > 0) {\n            const capableAgents = agents.filter(agent =>\n              task.requiredCapabilities.every(cap => agent.capabilities.includes(cap))\n            );\n            if (capableAgents.length > 0) {\n              selectedAgent = capableAgents.reduce((min, agent) =>\n                (agentLoads.get(agent.id) || 0) < (agentLoads.get(min.id) || 0) ? agent : min\n              );\n            }\n          }\n          if (!selectedAgent) {\n            selectedAgent = agents[0]; // Fallback\n          }\n          break;\n          \n        case 'adaptive':\n        default:\n          // Adaptive strategy: combination of capability matching and load balancing\n          let candidateAgents = agents;\n          \n          // Filter by capabilities if specified\n          if (task.requiredCapabilities && task.requiredCapabilities.length > 0) {\n            const capableAgents = agents.filter(agent =>\n              task.requiredCapabilities.some(cap => agent.capabilities.includes(cap))\n            );\n            if (capableAgents.length > 0) {\n              candidateAgents = capableAgents;\n            }\n          }\n          \n          // Select least loaded from candidates\n          selectedAgent = candidateAgents.reduce((best, agent) => {\n            const agentScore = calculateAgentScore(agent, task, agentLoads.get(agent.id) || 0);\n            const bestScore = calculateAgentScore(best, task, agentLoads.get(best.id) || 0);\n            return agentScore > bestScore ? agent : best;\n          });\n          break;\n      }\n      \n      const currentLoad = agentLoads.get(selectedAgent.id) || 0;\n      const taskLoad = task.estimatedLoad || 10;\n      const newLoad = Math.min(100, currentLoad + taskLoad);\n      \n      distributions.push({\n        taskId: task.id,\n        assignedAgent: selectedAgent.id,\n        agentType: selectedAgent.type,\n        currentLoad,\n        estimatedNewLoad: newLoad\n      });\n      \n      agentLoads.set(selectedAgent.id, newLoad);\n    }\n    \n    // Calculate balance score (lower standard deviation = better balance)\n    const loads = Array.from(agentLoads.values());\n    const avgLoad = loads.reduce((sum, load) => sum + load, 0) / loads.length;\n    const variance = loads.reduce((sum, load) => sum + Math.pow(load - avgLoad, 2), 0) / loads.length;\n    const stdDev = Math.sqrt(variance);\n    const balanceScore = Math.max(0, 100 - stdDev);\n    \n    console.log(`[LoadBalance] Distributed ${distributions.length} tasks with balance score ${balanceScore.toFixed(2)}`);\n    \n    return {\n      swarmId,\n      distributions,\n      balanceScore,\n      strategy,\n      status: distributions.length === tasks.length ? 'balanced' : 'partial',\n      message: `Distributed ${distributions.length} tasks across ${agents.length} agents with ${strategy} strategy`\n    };\n  }\n});\n\n// Tool 9: Synchronize agent coordination\nexport const coordinationSync = createTool({\n  id: 'coordination-sync',\n  name: 'Coordination Sync',\n  description: 'Synchronize coordination state across all agents in swarm',\n  inputSchema: z.object({\n    swarmId: z.string().describe('Swarm ID'),\n    syncType: z.enum(['full', 'incremental', 'selective']).default('incremental'),\n    syncData: z.object({\n      sharedState: z.record(z.any()).optional(),\n      taskUpdates: z.array(z.object({\n        taskId: z.string(),\n        status: z.string(),\n        progress: z.number().optional()\n      })).optional(),\n      agentUpdates: z.array(z.object({\n        agentId: z.string(),\n        status: z.string(),\n        capabilities: z.array(z.string()).optional()\n      })).optional()\n    }).optional()\n  }),\n  outputSchema: z.object({\n    swarmId: z.string(),\n    syncedAgents: z.number(),\n    syncType: z.string(),\n    syncTimestamp: z.string(),\n    conflicts: z.array(z.object({\n      type: z.string(),\n      description: z.string(),\n      resolution: z.string()\n    })),\n    status: z.enum(['synced', 'partial', 'failed']),\n    message: z.string()\n  }),\n  execute: async ({ swarmId, syncType, syncData }) => {\n    console.log(`[CoordinationSync] Synchronizing swarm ${swarmId} with ${syncType} sync`);\n    \n    const swarm = swarmRegistry.get(swarmId);\n    if (!swarm) {\n      console.log(`[CoordinationSync] Swarm ${swarmId} not found`);\n      return {\n        swarmId,\n        syncedAgents: 0,\n        syncType,\n        syncTimestamp: new Date().toISOString(),\n        conflicts: [],\n        status: 'failed',\n        message: `Swarm ${swarmId} not found`\n      };\n    }\n    \n    const agents = Array.from(swarm.agents)\n      .map(id => agentRegistry.get(id))\n      .filter(a => a && a.status === 'active');\n    \n    const conflicts = [];\n    let syncedCount = 0;\n    \n    // Process sync based on type\n    if (syncType === 'full' || syncType === 'incremental') {\n      // Sync shared state\n      if (syncData?.sharedState) {\n        swarm.sharedState = { ...swarm.sharedState, ...syncData.sharedState };\n        console.log(`[CoordinationSync] Updated shared state with ${Object.keys(syncData.sharedState).length} entries`);\n      }\n      \n      // Sync task updates\n      if (syncData?.taskUpdates) {\n        syncData.taskUpdates.forEach(update => {\n          const task = taskQueue.get(update.taskId);\n          if (task) {\n            const previousStatus = task.status;\n            task.status = update.status;\n            if (update.progress !== undefined) {\n              task.progress = update.progress;\n            }\n            \n            // Check for conflicts\n            if (previousStatus === 'completed' && update.status !== 'completed') {\n              conflicts.push({\n                type: 'task_status',\n                description: `Task ${update.taskId} status conflict: ${previousStatus} -> ${update.status}`,\n                resolution: 'Kept new status'\n              });\n            }\n          }\n        });\n      }\n      \n      // Sync agent updates\n      if (syncData?.agentUpdates) {\n        syncData.agentUpdates.forEach(update => {\n          const agent = agentRegistry.get(update.agentId);\n          if (agent && swarm.agents.has(update.agentId)) {\n            agent.status = update.status;\n            if (update.capabilities) {\n              agent.capabilities = update.capabilities;\n            }\n            syncedCount++;\n          }\n        });\n      }\n    }\n    \n    // Broadcast sync to all agents\n    const syncTimestamp = new Date().toISOString();\n    agents.forEach(agent => {\n      agent.lastSync = syncTimestamp;\n      syncedCount++;\n    });\n    \n    // Update swarm sync metadata\n    swarm.lastSync = syncTimestamp;\n    swarm.syncVersion = (swarm.syncVersion || 0) + 1;\n    \n    console.log(`[CoordinationSync] Synchronized ${syncedCount} agents with ${conflicts.length} conflicts`);\n    \n    return {\n      swarmId,\n      syncedAgents: syncedCount,\n      syncType,\n      syncTimestamp,\n      conflicts,\n      status: conflicts.length === 0 ? 'synced' : 'partial',\n      message: `Synchronized ${syncedCount} agents in swarm with ${syncType} sync`\n    };\n  }\n});\n\n// Tool 10: Get detailed agent metrics\nexport const agentMetrics = createTool({\n  id: 'agent-metrics',\n  name: 'Agent Metrics',\n  description: 'Get detailed performance metrics for a specific agent',\n  inputSchema: z.object({\n    agentId: z.string().describe('Agent ID'),\n    timeRange: z.enum(['1h', '6h', '24h', '7d', 'all']).default('24h'),\n    includeTaskHistory: z.boolean().default(true),\n    includeResourceUsage: z.boolean().default(true)\n  }),\n  outputSchema: z.object({\n    agentId: z.string(),\n    agentType: z.string(),\n    status: z.string(),\n    uptime: z.string(),\n    performance: z.object({\n      tasksCompleted: z.number(),\n      tasksFailed: z.number(),\n      successRate: z.number(),\n      avgResponseTime: z.number(),\n      throughput: z.number()\n    }),\n    resourceUsage: z.object({\n      cpuUtilization: z.number(),\n      memoryUsage: z.number(),\n      activeConnections: z.number(),\n      queueDepth: z.number()\n    }).optional(),\n    taskHistory: z.array(z.object({\n      taskId: z.string(),\n      status: z.string(),\n      startTime: z.string(),\n      endTime: z.string().optional(),\n      duration: z.number().optional()\n    })).optional(),\n    capabilities: z.array(z.string()),\n    health: z.enum(['healthy', 'degraded', 'unhealthy']),\n    message: z.string()\n  }),\n  execute: async ({ agentId, timeRange, includeTaskHistory, includeResourceUsage }) => {\n    console.log(`[AgentMetrics] Retrieving metrics for agent ${agentId} (${timeRange})`);\n    \n    const agent = agentRegistry.get(agentId);\n    if (!agent) {\n      console.log(`[AgentMetrics] Agent ${agentId} not found`);\n      return {\n        agentId,\n        agentType: 'unknown',\n        status: 'not_found',\n        uptime: '0 minutes',\n        performance: {\n          tasksCompleted: 0,\n          tasksFailed: 0,\n          successRate: 0,\n          avgResponseTime: 0,\n          throughput: 0\n        },\n        capabilities: [],\n        health: 'unhealthy',\n        message: `Agent ${agentId} not found`\n      };\n    }\n    \n    // Calculate uptime\n    const uptimeMs = Date.now() - new Date(agent.spawnedAt).getTime();\n    const uptimeMinutes = Math.floor(uptimeMs / 1000 / 60);\n    const uptime = uptimeMinutes >= 60 \n      ? `${Math.floor(uptimeMinutes / 60)} hours ${uptimeMinutes % 60} minutes`\n      : `${uptimeMinutes} minutes`;\n    \n    // Calculate performance metrics\n    const totalTasks = agent.metrics.tasksCompleted + agent.metrics.tasksFailed;\n    const successRate = totalTasks > 0 \n      ? (agent.metrics.tasksCompleted / totalTasks) * 100 \n      : 0;\n    const throughput = uptimeMinutes > 0 \n      ? agent.metrics.tasksCompleted / uptimeMinutes \n      : 0;\n    \n    const performance = {\n      tasksCompleted: agent.metrics.tasksCompleted,\n      tasksFailed: agent.metrics.tasksFailed,\n      successRate,\n      avgResponseTime: agent.metrics.avgResponseTime || 0,\n      throughput\n    };\n    \n    // Resource usage (simulated)\n    const resourceUsage = includeResourceUsage ? {\n      cpuUtilization: agent.metrics.utilization || 0,\n      memoryUsage: Math.min(100, (agent.tasks.size * 15) + 20),\n      activeConnections: agent.tasks.size,\n      queueDepth: Math.max(0, agent.tasks.size - 1)\n    } : undefined;\n    \n    // Task history (simulated)\n    const taskHistory = includeTaskHistory ? Array.from(agent.tasks).map(taskId => {\n      const task = taskQueue.get(taskId);\n      return {\n        taskId,\n        status: task?.status || 'unknown',\n        startTime: task?.createdAt || new Date().toISOString(),\n        endTime: task?.status === 'completed' ? new Date().toISOString() : undefined,\n        duration: task?.status === 'completed' ? Math.floor(Math.random() * 30000) + 5000 : undefined\n      };\n    }).slice(0, 10) : undefined;\n    \n    // Determine health status\n    let health = 'healthy';\n    if (agent.status !== 'active') health = 'unhealthy';\n    else if (successRate < 80 || agent.metrics.utilization > 90) health = 'degraded';\n    \n    console.log(`[AgentMetrics] Agent ${agentId} health: ${health}, success rate: ${successRate.toFixed(2)}%`);\n    \n    return {\n      agentId,\n      agentType: agent.type,\n      status: agent.status,\n      uptime,\n      performance,\n      resourceUsage,\n      taskHistory,\n      capabilities: agent.capabilities,\n      health,\n      message: `Agent ${agentId} (${agent.type}) is ${health} with ${successRate.toFixed(2)}% success rate`\n    };\n  }\n});\n\n// Helper functions\nfunction getDefaultCapabilities(agentType) {\n  const capabilityMap = {\n    coordinator: ['task-orchestration', 'agent-management', 'resource-allocation'],\n    researcher: ['data-gathering', 'analysis', 'pattern-recognition'],\n    coder: ['code-generation', 'debugging', 'refactoring', 'testing'],\n    analyst: ['data-analysis', 'reporting', 'visualization', 'insights'],\n    architect: ['system-design', 'pattern-implementation', 'documentation'],\n    tester: ['unit-testing', 'integration-testing', 'performance-testing'],\n    reviewer: ['code-review', 'quality-assurance', 'best-practices'],\n    optimizer: ['performance-optimization', 'resource-optimization', 'algorithm-optimization'],\n    documenter: ['documentation', 'api-docs', 'tutorials', 'guides'],\n    monitor: ['system-monitoring', 'alerting', 'metrics-collection'],\n    specialist: ['domain-expertise', 'custom-logic', 'integration']\n  };\n  \n  return capabilityMap[agentType] || ['general-processing'];\n}\n\nfunction assignAgentsToTasks(agents, tasks, strategy) {\n  const assignments = [];\n  \n  if (strategy === 'parallel') {\n    // Assign each task to a different agent if possible\n    tasks.forEach((task, index) => {\n      const agent = agents[index % agents.length];\n      assignments.push({ agentId: agent.id, subtask: task });\n    });\n  } else if (strategy === 'sequential') {\n    // Assign all tasks to the most capable agent\n    const bestAgent = agents.reduce((best, agent) => \n      agent.metrics.successRate > best.metrics.successRate ? agent : best\n    );\n    tasks.forEach(task => {\n      assignments.push({ agentId: bestAgent.id, subtask: task });\n    });\n  } else {\n    // Balanced or adaptive strategy\n    tasks.forEach(task => {\n      const capableAgents = task.requiredCapabilities && task.requiredCapabilities.length > 0\n        ? agents.filter(agent => \n            task.requiredCapabilities.some(cap => agent.capabilities.includes(cap))\n          )\n        : agents;\n      \n      const selectedAgent = capableAgents.length > 0\n        ? capableAgents.reduce((least, agent) => \n            agent.metrics.utilization < least.metrics.utilization ? agent : least\n          )\n        : agents[0];\n      \n      assignments.push({ agentId: selectedAgent.id, subtask: task });\n    });\n  }\n  \n  return assignments;\n}\n\nfunction analyzeSwarmMetrics(swarm, agents, tasks) {\n  const activeTasks = tasks.filter(t => t.status === 'in_progress').length;\n  const avgUtilization = agents.reduce((sum, a) => sum + a.metrics.utilization, 0) / Math.max(agents.length, 1);\n  \n  return {\n    latency: 100 - avgUtilization, // Simplified metric\n    throughput: swarm.metrics.tasksCompleted / Math.max((Date.now() - new Date(swarm.createdAt).getTime()) / 1000 / 60, 1),\n    resilience: agents.filter(a => a.status === 'active').length / Math.max(agents.length, 1) * 100,\n    efficiency: (swarm.metrics.tasksCompleted / Math.max(swarm.metrics.tasksCompleted + swarm.metrics.tasksFailed, 1)) * 100\n  };\n}\n\nfunction calculateCommunicationIntensity(agents, tasks) {\n  // Simplified calculation based on task parallelism and agent count\n  const parallelTasks = tasks.filter(t => t.strategy === 'parallel').length;\n  const totalTasks = Math.max(tasks.length, 1);\n  const agentRatio = Math.min(agents.length / 10, 1);\n  \n  return (parallelTasks / totalTasks) * agentRatio;\n}\n\nfunction calculateOptimizationScore(currentTopology, recommendedTopology, workloadProfile) {\n  if (currentTopology === recommendedTopology) return 0;\n  \n  // Base improvement score\n  let score = 20;\n  \n  // Additional points based on workload fit\n  if (recommendedTopology === 'mesh' && workloadProfile.communicationIntensity > 0.6) score += 15;\n  if (recommendedTopology === 'hierarchical' && workloadProfile.taskComplexity > 0.5) score += 15;\n  if (recommendedTopology === 'star' && workloadProfile.agentCount < 10) score += 10;\n  if (recommendedTopology === 'ring' && workloadProfile.parallelism < 0.3) score += 10;\n  \n  return Math.min(score, 50); // Cap at 50% improvement\n}\n\nfunction calculateAgentScore(agent, task, currentLoad) {\n  let score = 100 - currentLoad; // Start with inverse of current load\n  \n  // Bonus for capability match\n  if (task.requiredCapabilities) {\n    const matchingCaps = task.requiredCapabilities.filter(cap => \n      agent.capabilities.includes(cap)\n    ).length;\n    score += matchingCaps * 10;\n  }\n  \n  // Bonus for agent performance\n  score += agent.metrics.successRate * 0.2;\n  \n  // Penalty for high utilization\n  if (agent.metrics.utilization > 80) score -= 20;\n  \n  return score;\n}\n\n// Export all tools\n// export const swarmOrchestrationTools = [\n//   swarmInit,\n//   agentSpawn,\n//   taskOrchestrate,\n//   swarmStatus,\n//   swarmScale,\n//   swarmDestroy,\n//   topologyOptimize,\n//   loadBalance,\n//   coordinationSync,\n//   agentMetrics\n// ];\n\n// Export as object for consistency\nexport const swarmOrchestrationTools = {\n  swarmInit,\n  agentSpawn,\n  taskOrchestrate,\n  swarmStatus,\n  swarmScale,\n  swarmDestroy,\n  topologyOptimize,\n  loadBalance,\n  coordinationSync,\n  agentMetrics\n};\n"],"names":[],"mappings":"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"}