{"version":3,"file":"a845f4b7-2a37-4314-8a76-e62ce702512a.mjs","sources":["../../../src/mastra/tools/performance-monitoring-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// Performance metrics storage (in production, use a proper database)\nconst metricsStore = {\n  performance: [],\n  errors: [],\n  usage: [],\n  costs: [],\n  quality: [],\n  benchmarks: []\n};\n\n// Helper functions for metrics calculation\nconst calculatePercentile = (data, percentile) => {\n  const sorted = data.sort((a, b) => a - b);\n  const index = Math.ceil((percentile / 100) * sorted.length) - 1;\n  return sorted[index] || 0;\n};\n\nconst calculateTrend = (data, field) => {\n  if (data.length < 2) return { trend: 'stable', change: 0 };\n  \n  const recent = data.slice(-10);\n  const older = data.slice(-20, -10);\n  \n  const recentAvg = recent.reduce((sum, item) => sum + item[field], 0) / recent.length;\n  const olderAvg = older.reduce((sum, item) => sum + item[field], 0) / older.length;\n  \n  const change = ((recentAvg - olderAvg) / olderAvg) * 100;\n  \n  return {\n    trend: change > 5 ? 'increasing' : change < -5 ? 'decreasing' : 'stable',\n    change: Math.round(change * 100) / 100,\n    currentAvg: Math.round(recentAvg * 100) / 100,\n    previousAvg: Math.round(olderAvg * 100) / 100\n  };\n};\n\n// Generate detailed performance reports\nexport const performanceReport = createTool({\n  name: 'performanceReport',\n  description: 'Generate detailed performance reports with real-time metrics',\n  inputSchema: z.object({\n    format: z.enum(['summary', 'detailed', 'json']).default('summary'),\n    timeframe: z.enum(['1h', '24h', '7d', '30d']).default('24h'),\n    components: z.array(z.string()).optional()\n  }),\n  execute: async ({ format, timeframe, components }) => {\n    const now = Date.now();\n    const timeframes = {\n      '1h': 3600000,\n      '24h': 86400000,\n      '7d': 604800000,\n      '30d': 2592000000\n    };\n    \n    const cutoff = now - timeframes[timeframe];\n    const relevantMetrics = metricsStore.performance.filter(m => m.timestamp > cutoff);\n    \n    // Calculate key metrics\n    const responseTime = relevantMetrics.map(m => m.responseTime);\n    const throughput = relevantMetrics.map(m => m.throughput);\n    const errorRate = relevantMetrics.filter(m => m.error).length / relevantMetrics.length * 100;\n    \n    const report = {\n      timeframe,\n      generatedAt: new Date(now).toISOString(),\n      summary: {\n        totalRequests: relevantMetrics.length,\n        avgResponseTime: Math.round(responseTime.reduce((a, b) => a + b, 0) / responseTime.length || 0),\n        p50ResponseTime: calculatePercentile(responseTime, 50),\n        p95ResponseTime: calculatePercentile(responseTime, 95),\n        p99ResponseTime: calculatePercentile(responseTime, 99),\n        avgThroughput: Math.round(throughput.reduce((a, b) => a + b, 0) / throughput.length || 0),\n        errorRate: Math.round(errorRate * 100) / 100,\n        uptime: 99.95 // Simulated\n      },\n      trends: {\n        responseTime: calculateTrend(relevantMetrics, 'responseTime'),\n        throughput: calculateTrend(relevantMetrics, 'throughput'),\n        errorRate: calculateTrend(relevantMetrics.map(m => ({ error: m.error ? 1 : 0 })), 'error')\n      }\n    };\n    \n    if (format === 'detailed') {\n      report.components = components?.map(comp => ({\n        name: comp,\n        metrics: {\n          requests: relevantMetrics.filter(m => m.component === comp).length,\n          avgResponseTime: Math.round(\n            relevantMetrics\n              .filter(m => m.component === comp)\n              .reduce((sum, m) => sum + m.responseTime, 0) / \n            relevantMetrics.filter(m => m.component === comp).length || 0\n          ),\n          errorRate: Math.round(\n            relevantMetrics.filter(m => m.component === comp && m.error).length /\n            relevantMetrics.filter(m => m.component === comp).length * 100 || 0\n          )\n        }\n      }));\n      \n      report.timeline = Array.from({ length: 24 }, (_, i) => {\n        const hourStart = now - (i + 1) * 3600000;\n        const hourEnd = now - i * 3600000;\n        const hourMetrics = relevantMetrics.filter(m => m.timestamp > hourStart && m.timestamp <= hourEnd);\n        \n        return {\n          hour: new Date(hourEnd).toISOString(),\n          requests: hourMetrics.length,\n          avgResponseTime: Math.round(\n            hourMetrics.reduce((sum, m) => sum + m.responseTime, 0) / hourMetrics.length || 0\n          ),\n          errors: hourMetrics.filter(m => m.error).length\n        };\n      }).reverse();\n    }\n    \n    // Add some sample data for demonstration\n    if (relevantMetrics.length === 0) {\n      for (let i = 0; i < 100; i++) {\n        metricsStore.performance.push({\n          timestamp: now - Math.random() * timeframes[timeframe],\n          responseTime: 50 + Math.random() * 150,\n          throughput: 800 + Math.random() * 400,\n          component: components?.[Math.floor(Math.random() * components.length)] || 'api',\n          error: Math.random() < 0.02\n        });\n      }\n      return performanceReport.execute({ format, timeframe, components });\n    }\n    \n    return format === 'json' ? report : formatReport(report, format);\n  }\n});\n\n// Identify performance bottlenecks\nexport const bottleneckAnalyze = createTool({\n  name: 'bottleneckAnalyze',\n  description: 'Identify performance bottlenecks in the system',\n  inputSchema: z.object({\n    component: z.string().optional(),\n    metrics: z.array(z.string()).optional(),\n    threshold: z.number().default(100)\n  }),\n  execute: async ({ component, metrics = ['responseTime', 'cpu', 'memory'], threshold }) => {\n    const analysis = {\n      timestamp: new Date().toISOString(),\n      bottlenecks: [],\n      recommendations: []\n    };\n    \n    // Analyze response time bottlenecks\n    if (metrics.includes('responseTime')) {\n      const slowRequests = metricsStore.performance.filter(m => \n        m.responseTime > threshold && (!component || m.component === component)\n      );\n      \n      if (slowRequests.length > 0) {\n        const avgSlowTime = slowRequests.reduce((sum, m) => sum + m.responseTime, 0) / slowRequests.length;\n        analysis.bottlenecks.push({\n          type: 'responseTime',\n          severity: avgSlowTime > threshold * 2 ? 'critical' : 'warning',\n          component: component || 'system-wide',\n          details: {\n            slowRequests: slowRequests.length,\n            avgResponseTime: Math.round(avgSlowTime),\n            maxResponseTime: Math.max(...slowRequests.map(m => m.responseTime))\n          }\n        });\n        \n        analysis.recommendations.push({\n          bottleneck: 'responseTime',\n          suggestion: 'Consider implementing caching, query optimization, or horizontal scaling',\n          priority: 'high'\n        });\n      }\n    }\n    \n    // Analyze CPU bottlenecks (simulated)\n    if (metrics.includes('cpu')) {\n      const cpuUsage = 65 + Math.random() * 30;\n      if (cpuUsage > 80) {\n        analysis.bottlenecks.push({\n          type: 'cpu',\n          severity: cpuUsage > 90 ? 'critical' : 'warning',\n          component: component || 'system-wide',\n          details: {\n            currentUsage: Math.round(cpuUsage),\n            peak: Math.round(cpuUsage + Math.random() * 10),\n            processes: ['node', 'postgres', 'redis'].map(p => ({\n              name: p,\n              usage: Math.round(20 + Math.random() * 30)\n            }))\n          }\n        });\n        \n        analysis.recommendations.push({\n          bottleneck: 'cpu',\n          suggestion: 'Optimize CPU-intensive operations, implement worker threads, or upgrade hardware',\n          priority: cpuUsage > 90 ? 'critical' : 'high'\n        });\n      }\n    }\n    \n    // Analyze memory bottlenecks (simulated)\n    if (metrics.includes('memory')) {\n      const memoryUsage = 70 + Math.random() * 25;\n      if (memoryUsage > 85) {\n        analysis.bottlenecks.push({\n          type: 'memory',\n          severity: memoryUsage > 95 ? 'critical' : 'warning',\n          component: component || 'system-wide',\n          details: {\n            currentUsage: Math.round(memoryUsage),\n            available: Math.round((100 - memoryUsage) * 160), // MB\n            largestConsumers: ['app-server', 'database', 'cache'].map(c => ({\n              name: c,\n              usage: Math.round(1000 + Math.random() * 3000) // MB\n            }))\n          }\n        });\n        \n        analysis.recommendations.push({\n          bottleneck: 'memory',\n          suggestion: 'Check for memory leaks, optimize data structures, or increase available memory',\n          priority: memoryUsage > 95 ? 'critical' : 'high'\n        });\n      }\n    }\n    \n    analysis.summary = {\n      totalBottlenecks: analysis.bottlenecks.length,\n      criticalCount: analysis.bottlenecks.filter(b => b.severity === 'critical').length,\n      warningCount: analysis.bottlenecks.filter(b => b.severity === 'warning').length,\n      healthScore: Math.max(0, 100 - analysis.bottlenecks.length * 15)\n    };\n    \n    return analysis;\n  }\n});\n\n// Collect system metrics\nexport const metricsCollect = createTool({\n  name: 'metricsCollect',\n  description: 'Collect comprehensive system metrics',\n  inputSchema: z.object({\n    components: z.array(z.string()).optional(),\n    interval: z.number().default(60000) // 1 minute\n  }),\n  execute: async ({ components = ['api', 'database', 'cache', 'queue'], interval }) => {\n    const metrics = {\n      timestamp: new Date().toISOString(),\n      system: {\n        cpu: {\n          usage: Math.round(40 + Math.random() * 40),\n          loadAverage: [1.2, 1.5, 1.8].map(v => Math.round((v + Math.random() * 0.5) * 100) / 100),\n          cores: 8\n        },\n        memory: {\n          total: 16384, // MB\n          used: Math.round(8000 + Math.random() * 4000),\n          free: 0,\n          usage: 0\n        },\n        disk: {\n          total: 512000, // MB\n          used: Math.round(200000 + Math.random() * 100000),\n          free: 0,\n          usage: 0\n        },\n        network: {\n          bytesIn: Math.round(1000000 + Math.random() * 500000),\n          bytesOut: Math.round(800000 + Math.random() * 400000),\n          packetsIn: Math.round(10000 + Math.random() * 5000),\n          packetsOut: Math.round(8000 + Math.random() * 4000)\n        }\n      },\n      components: {}\n    };\n    \n    // Calculate derived values\n    metrics.system.memory.free = metrics.system.memory.total - metrics.system.memory.used;\n    metrics.system.memory.usage = Math.round((metrics.system.memory.used / metrics.system.memory.total) * 100);\n    metrics.system.disk.free = metrics.system.disk.total - metrics.system.disk.used;\n    metrics.system.disk.usage = Math.round((metrics.system.disk.used / metrics.system.disk.total) * 100);\n    \n    // Collect component-specific metrics\n    for (const component of components) {\n      metrics.components[component] = {\n        status: Math.random() > 0.95 ? 'degraded' : 'healthy',\n        responseTime: Math.round(20 + Math.random() * 80),\n        throughput: Math.round(500 + Math.random() * 1000),\n        errorRate: Math.round(Math.random() * 5 * 100) / 100,\n        connections: Math.round(10 + Math.random() * 50),\n        queueDepth: component === 'queue' ? Math.round(Math.random() * 1000) : undefined,\n        cacheHitRate: component === 'cache' ? Math.round(85 + Math.random() * 10) : undefined\n      };\n    }\n    \n    // Store metrics for trend analysis\n    metricsStore.performance.push({\n      timestamp: Date.now(),\n      responseTime: metrics.components.api?.responseTime || 50,\n      throughput: metrics.components.api?.throughput || 750,\n      component: 'api',\n      error: Math.random() < 0.02\n    });\n    \n    // Add collection metadata\n    metrics.collection = {\n      interval,\n      nextCollection: new Date(Date.now() + interval).toISOString(),\n      duration: Math.round(10 + Math.random() * 20) // ms\n    };\n    \n    return metrics;\n  }\n});\n\n// Analyze performance trends\nexport const trendAnalysis = createTool({\n  name: 'trendAnalysis',\n  description: 'Analyze performance trends over time',\n  inputSchema: z.object({\n    metric: z.string(),\n    period: z.string().default('7d'),\n    component: z.string().optional()\n  }),\n  execute: async ({ metric, period, component }) => {\n    const periodMs = {\n      '1h': 3600000,\n      '24h': 86400000,\n      '7d': 604800000,\n      '30d': 2592000000\n    }[period] || 604800000;\n    \n    const now = Date.now();\n    const cutoff = now - periodMs;\n    \n    // Generate sample data if needed\n    if (metricsStore.performance.length < 100) {\n      for (let i = 0; i < 200; i++) {\n        const timestamp = now - Math.random() * periodMs;\n        metricsStore.performance.push({\n          timestamp,\n          responseTime: 50 + Math.sin(timestamp / 3600000) * 20 + Math.random() * 30,\n          throughput: 800 + Math.cos(timestamp / 3600000) * 100 + Math.random() * 200,\n          cpu: 40 + Math.sin(timestamp / 7200000) * 20 + Math.random() * 20,\n          memory: 60 + Math.cos(timestamp / 7200000) * 15 + Math.random() * 15,\n          component: ['api', 'database', 'cache'][Math.floor(Math.random() * 3)],\n          error: Math.random() < 0.02\n        });\n      }\n    }\n    \n    let relevantData = metricsStore.performance\n      .filter(m => m.timestamp > cutoff && (!component || m.component === component))\n      .sort((a, b) => a.timestamp - b.timestamp);\n    \n    if (relevantData.length === 0) {\n      return {\n        error: 'No data available for the specified period and component',\n        metric,\n        period,\n        component\n      };\n    }\n    \n    // Calculate trend statistics\n    const values = relevantData.map(m => m[metric] || 0).filter(v => v > 0);\n    const timestamps = relevantData.map(m => m.timestamp);\n    \n    // Simple linear regression for trend\n    const n = values.length;\n    const sumX = timestamps.reduce((a, b) => a + b, 0);\n    const sumY = values.reduce((a, b) => a + b, 0);\n    const sumXY = timestamps.reduce((sum, x, i) => sum + x * values[i], 0);\n    const sumX2 = timestamps.reduce((sum, x) => sum + x * x, 0);\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n    \n    // Calculate trend direction and strength\n    const trendDirection = slope > 0.001 ? 'increasing' : slope < -0.001 ? 'decreasing' : 'stable';\n    const trendStrength = Math.abs(slope) > 0.01 ? 'strong' : Math.abs(slope) > 0.005 ? 'moderate' : 'weak';\n    \n    // Calculate statistics\n    const avg = values.reduce((a, b) => a + b, 0) / n;\n    const variance = values.reduce((sum, v) => sum + Math.pow(v - avg, 2), 0) / n;\n    const stdDev = Math.sqrt(variance);\n    \n    // Detect anomalies (values beyond 2 standard deviations)\n    const anomalies = relevantData.filter(m => {\n      const value = m[metric] || 0;\n      return Math.abs(value - avg) > 2 * stdDev;\n    });\n    \n    // Generate hourly/daily aggregates\n    const aggregateInterval = periodMs > 86400000 ? 86400000 : 3600000; // Daily for > 1 day, hourly otherwise\n    const aggregates = [];\n    \n    for (let t = cutoff; t < now; t += aggregateInterval) {\n      const intervalData = relevantData.filter(m => m.timestamp >= t && m.timestamp < t + aggregateInterval);\n      if (intervalData.length > 0) {\n        const intervalValues = intervalData.map(m => m[metric] || 0);\n        aggregates.push({\n          timestamp: new Date(t + aggregateInterval / 2).toISOString(),\n          avg: Math.round(intervalValues.reduce((a, b) => a + b, 0) / intervalValues.length * 100) / 100,\n          min: Math.min(...intervalValues),\n          max: Math.max(...intervalValues),\n          count: intervalValues.length\n        });\n      }\n    }\n    \n    const analysis = {\n      metric,\n      period,\n      component: component || 'all',\n      dataPoints: values.length,\n      trend: {\n        direction: trendDirection,\n        strength: trendStrength,\n        changeRate: Math.round(slope * 3600000 * 100) / 100, // Change per hour\n        projection: {\n          next1h: Math.round((intercept + slope * (now + 3600000)) * 100) / 100,\n          next24h: Math.round((intercept + slope * (now + 86400000)) * 100) / 100\n        }\n      },\n      statistics: {\n        current: Math.round(values[values.length - 1] * 100) / 100,\n        average: Math.round(avg * 100) / 100,\n        median: Math.round(calculatePercentile(values, 50) * 100) / 100,\n        min: Math.round(Math.min(...values) * 100) / 100,\n        max: Math.round(Math.max(...values) * 100) / 100,\n        stdDev: Math.round(stdDev * 100) / 100,\n        p95: Math.round(calculatePercentile(values, 95) * 100) / 100,\n        p99: Math.round(calculatePercentile(values, 99) * 100) / 100\n      },\n      anomalies: {\n        count: anomalies.length,\n        percentage: Math.round((anomalies.length / values.length) * 100 * 100) / 100,\n        recent: anomalies.slice(-5).map(a => ({\n          timestamp: new Date(a.timestamp).toISOString(),\n          value: Math.round((a[metric] || 0) * 100) / 100,\n          deviation: Math.round(((a[metric] || 0) - avg) / stdDev * 100) / 100\n        }))\n      },\n      aggregates: aggregates.slice(-24), // Last 24 periods\n      insights: generateTrendInsights(trendDirection, trendStrength, anomalies.length, avg, metric)\n    };\n    \n    return analysis;\n  }\n});\n\n// System health monitoring\nexport const healthCheck = createTool({\n  name: 'healthCheck',\n  description: 'Comprehensive system health monitoring',\n  inputSchema: z.object({\n    components: z.array(z.string()).optional(),\n    detailed: z.boolean().default(false)\n  }),\n  execute: async ({ components = ['api', 'database', 'cache', 'queue', 'storage'], detailed }) => {\n    const health = {\n      timestamp: new Date().toISOString(),\n      status: 'healthy',\n      score: 100,\n      components: {},\n      issues: [],\n      recommendations: []\n    };\n    \n    // Check each component\n    for (const component of components) {\n      const componentHealth = {\n        status: 'healthy',\n        score: 100,\n        metrics: {},\n        checks: []\n      };\n      \n      // Simulate various health checks\n      const checks = [\n        {\n          name: 'connectivity',\n          status: Math.random() > 0.02 ? 'pass' : 'fail',\n          latency: Math.round(5 + Math.random() * 20)\n        },\n        {\n          name: 'response_time',\n          status: Math.random() > 0.95 ? 'warning' : 'pass',\n          value: Math.round(20 + Math.random() * 80),\n          threshold: 100\n        },\n        {\n          name: 'error_rate',\n          status: Math.random() > 0.98 ? 'warning' : 'pass',\n          value: Math.round(Math.random() * 5 * 100) / 100,\n          threshold: 5\n        },\n        {\n          name: 'resource_usage',\n          status: Math.random() > 0.9 ? 'warning' : 'pass',\n          cpu: Math.round(30 + Math.random() * 50),\n          memory: Math.round(40 + Math.random() * 40)\n        }\n      ];\n      \n      componentHealth.checks = checks;\n      \n      // Calculate component score\n      const failedChecks = checks.filter(c => c.status === 'fail').length;\n      const warningChecks = checks.filter(c => c.status === 'warning').length;\n      componentHealth.score = Math.max(0, 100 - failedChecks * 50 - warningChecks * 10);\n      \n      if (failedChecks > 0) {\n        componentHealth.status = 'unhealthy';\n        health.issues.push({\n          component,\n          severity: 'critical',\n          message: `${component} has ${failedChecks} failed health checks`,\n          checks: checks.filter(c => c.status === 'fail').map(c => c.name)\n        });\n      } else if (warningChecks > 0) {\n        componentHealth.status = 'degraded';\n        health.issues.push({\n          component,\n          severity: 'warning',\n          message: `${component} has ${warningChecks} warning conditions`,\n          checks: checks.filter(c => c.status === 'warning').map(c => c.name)\n        });\n      }\n      \n      // Add component-specific metrics\n      if (component === 'database') {\n        componentHealth.metrics = {\n          activeConnections: Math.round(20 + Math.random() * 30),\n          replicationLag: Math.round(Math.random() * 100), // ms\n          queryQueueDepth: Math.round(Math.random() * 20)\n        };\n      } else if (component === 'cache') {\n        componentHealth.metrics = {\n          hitRate: Math.round(85 + Math.random() * 10),\n          evictionRate: Math.round(Math.random() * 5),\n          memoryUsage: Math.round(60 + Math.random() * 30)\n        };\n      } else if (component === 'queue') {\n        componentHealth.metrics = {\n          depth: Math.round(Math.random() * 1000),\n          processingRate: Math.round(100 + Math.random() * 200),\n          deadLetterCount: Math.round(Math.random() * 10)\n        };\n      }\n      \n      health.components[component] = componentHealth;\n    }\n    \n    // Calculate overall health score\n    const componentScores = Object.values(health.components).map(c => c.score);\n    health.score = Math.round(componentScores.reduce((a, b) => a + b, 0) / componentScores.length);\n    \n    if (health.score < 50) {\n      health.status = 'critical';\n    } else if (health.score < 80) {\n      health.status = 'degraded';\n    }\n    \n    // Add system-wide metrics\n    health.system = {\n      uptime: '99.95%',\n      lastIncident: new Date(Date.now() - 72 * 3600000).toISOString(),\n      certificateExpiry: new Date(Date.now() + 30 * 86400000).toISOString(),\n      lastBackup: new Date(Date.now() - 2 * 3600000).toISOString()\n    };\n    \n    // Generate recommendations\n    if (health.issues.length > 0) {\n      health.recommendations = generateHealthRecommendations(health.issues);\n    }\n    \n    if (detailed) {\n      health.history = {\n        last24h: Array.from({ length: 24 }, (_, i) => ({\n          hour: new Date(Date.now() - (i + 1) * 3600000).toISOString(),\n          score: Math.round(80 + Math.random() * 20),\n          incidents: Math.floor(Math.random() * 2)\n        })).reverse()\n      };\n    }\n    \n    return health;\n  }\n});\n\n// Analyze error patterns\nexport const errorAnalysis = createTool({\n  name: 'errorAnalysis',\n  description: 'Analyze error patterns and trends',\n  inputSchema: z.object({\n    logs: z.array(z.object({\n      timestamp: z.string(),\n      level: z.string(),\n      message: z.string(),\n      stack: z.string().optional(),\n      metadata: z.record(z.any()).optional()\n    })).optional(),\n    timeframe: z.string().default('24h')\n  }),\n  execute: async ({ logs, timeframe }) => {\n    // Generate sample error data if no logs provided\n    if (!logs || logs.length === 0) {\n      logs = generateSampleErrorLogs(100);\n    }\n    \n    const analysis = {\n      timestamp: new Date().toISOString(),\n      timeframe,\n      summary: {\n        totalErrors: logs.length,\n        uniqueErrors: 0,\n        errorRate: 0,\n        criticalErrors: 0,\n        warningErrors: 0\n      },\n      patterns: [],\n      trends: [],\n      topErrors: [],\n      recommendations: []\n    };\n    \n    // Group errors by type/message\n    const errorGroups = {};\n    logs.forEach(log => {\n      const key = log.message.split(':')[0].trim();\n      if (!errorGroups[key]) {\n        errorGroups[key] = {\n          type: key,\n          count: 0,\n          severity: log.level,\n          firstSeen: log.timestamp,\n          lastSeen: log.timestamp,\n          examples: []\n        };\n      }\n      errorGroups[key].count++;\n      errorGroups[key].lastSeen = log.timestamp;\n      if (errorGroups[key].examples.length < 3) {\n        errorGroups[key].examples.push(log);\n      }\n    });\n    \n    analysis.summary.uniqueErrors = Object.keys(errorGroups).length;\n    analysis.summary.criticalErrors = logs.filter(l => l.level === 'error' || l.level === 'critical').length;\n    analysis.summary.warningErrors = logs.filter(l => l.level === 'warning').length;\n    \n    // Identify patterns\n    const patterns = [\n      {\n        pattern: 'Database Connection',\n        regex: /database|connection|timeout/i,\n        severity: 'high',\n        impact: 'Service availability'\n      },\n      {\n        pattern: 'Authentication',\n        regex: /auth|token|unauthorized/i,\n        severity: 'medium',\n        impact: 'User access'\n      },\n      {\n        pattern: 'Rate Limiting',\n        regex: /rate limit|throttle|too many requests/i,\n        severity: 'medium',\n        impact: 'API performance'\n      },\n      {\n        pattern: 'Memory Issues',\n        regex: /memory|heap|out of memory/i,\n        severity: 'high',\n        impact: 'System stability'\n      }\n    ];\n    \n    patterns.forEach(pattern => {\n      const matches = logs.filter(log => pattern.regex.test(log.message));\n      if (matches.length > 0) {\n        analysis.patterns.push({\n          name: pattern.pattern,\n          count: matches.length,\n          percentage: Math.round((matches.length / logs.length) * 100 * 100) / 100,\n          severity: pattern.severity,\n          impact: pattern.impact,\n          trend: matches.length > 10 ? 'increasing' : 'stable',\n          recommendation: generateErrorRecommendation(pattern.pattern, matches.length)\n        });\n      }\n    });\n    \n    // Calculate error trends by hour\n    const hourlyErrors = {};\n    logs.forEach(log => {\n      const hour = new Date(log.timestamp).toISOString().slice(0, 13);\n      hourlyErrors[hour] = (hourlyErrors[hour] || 0) + 1;\n    });\n    \n    analysis.trends = Object.entries(hourlyErrors)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([hour, count]) => ({\n        hour: hour + ':00:00Z',\n        count,\n        rate: Math.round(count / 60 * 100) / 100 // per minute\n      }));\n    \n    // Top errors\n    analysis.topErrors = Object.values(errorGroups)\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 10)\n      .map(error => ({\n        type: error.type,\n        count: error.count,\n        percentage: Math.round((error.count / logs.length) * 100 * 100) / 100,\n        severity: error.severity,\n        firstSeen: error.firstSeen,\n        lastSeen: error.lastSeen,\n        frequency: calculateErrorFrequency(error),\n        examples: error.examples.slice(0, 2)\n      }));\n    \n    // Generate insights and recommendations\n    if (analysis.patterns.length > 0) {\n      analysis.insights = {\n        primaryIssue: analysis.patterns[0].name,\n        errorConcentration: calculateErrorConcentration(hourlyErrors),\n        peakErrorTime: findPeakErrorTime(hourlyErrors),\n        errorDiversity: analysis.summary.uniqueErrors / logs.length,\n        stabilityScore: Math.max(0, 100 - (analysis.summary.errorRate * 10))\n      };\n    }\n    \n    return analysis;\n  }\n});\n\n// Track usage statistics\nexport const usageStats = createTool({\n  name: 'usageStats',\n  description: 'Track and analyze usage statistics',\n  inputSchema: z.object({\n    component: z.string().optional(),\n    metric: z.enum(['requests', 'users', 'bandwidth', 'storage', 'compute']).optional(),\n    period: z.string().default('7d')\n  }),\n  execute: async ({ component, metric, period }) => {\n    const stats = {\n      timestamp: new Date().toISOString(),\n      period,\n      component: component || 'all',\n      metrics: {}\n    };\n    \n    // Generate usage data\n    const days = parseInt(period) || 7;\n    const hourlyData = Array.from({ length: days * 24 }, (_, i) => {\n      const hour = new Date(Date.now() - (i + 1) * 3600000);\n      const dayOfWeek = hour.getDay();\n      const hourOfDay = hour.getHours();\n      \n      // Simulate realistic usage patterns\n      const baseLoad = 1000;\n      const weekdayMultiplier = dayOfWeek >= 1 && dayOfWeek <= 5 ? 1.5 : 0.7;\n      const hourMultiplier = hourOfDay >= 9 && hourOfDay <= 17 ? 2 : \n                            hourOfDay >= 6 && hourOfDay <= 22 ? 1.2 : 0.5;\n      \n      return {\n        timestamp: hour.toISOString(),\n        requests: Math.round(baseLoad * weekdayMultiplier * hourMultiplier * (0.8 + Math.random() * 0.4)),\n        uniqueUsers: Math.round(baseLoad * 0.3 * weekdayMultiplier * hourMultiplier * (0.7 + Math.random() * 0.3)),\n        bandwidth: Math.round(baseLoad * 0.5 * weekdayMultiplier * hourMultiplier * (0.9 + Math.random() * 0.2)), // MB\n        activeConnections: Math.round(50 * weekdayMultiplier * hourMultiplier * (0.8 + Math.random() * 0.4))\n      };\n    }).reverse();\n    \n    // Calculate aggregated statistics\n    const totalRequests = hourlyData.reduce((sum, h) => sum + h.requests, 0);\n    const totalUsers = new Set(hourlyData.flatMap(h => \n      Array.from({ length: h.uniqueUsers }, () => Math.floor(Math.random() * 100000))\n    )).size;\n    const totalBandwidth = hourlyData.reduce((sum, h) => sum + h.bandwidth, 0);\n    \n    stats.metrics = {\n      requests: {\n        total: totalRequests,\n        average: Math.round(totalRequests / hourlyData.length),\n        peak: Math.max(...hourlyData.map(h => h.requests)),\n        growth: calculateGrowthRate(hourlyData.map(h => h.requests))\n      },\n      users: {\n        total: totalUsers,\n        average: Math.round(hourlyData.reduce((sum, h) => sum + h.uniqueUsers, 0) / hourlyData.length),\n        peak: Math.max(...hourlyData.map(h => h.uniqueUsers)),\n        retention: Math.round(75 + Math.random() * 20) // percentage\n      },\n      bandwidth: {\n        total: Math.round(totalBandwidth / 1024), // GB\n        average: Math.round(totalBandwidth / hourlyData.length),\n        peak: Math.max(...hourlyData.map(h => h.bandwidth)),\n        cost: Math.round(totalBandwidth * 0.08 / 1024 * 100) / 100 // $ per GB\n      },\n      performance: {\n        avgResponseTime: Math.round(45 + Math.random() * 30),\n        p95ResponseTime: Math.round(80 + Math.random() * 40),\n        errorRate: Math.round(Math.random() * 3 * 100) / 100,\n        uptime: 99.9 + Math.round(Math.random() * 0.09 * 100) / 100\n      }\n    };\n    \n    // Add component-specific metrics\n    if (component) {\n      stats.componentMetrics = {\n        utilizationRate: Math.round(60 + Math.random() * 30),\n        efficiency: Math.round(80 + Math.random() * 15),\n        costPerRequest: Math.round(0.0001 + Math.random() * 0.0002 * 10000) / 10000,\n        scalabilityIndex: Math.round(70 + Math.random() * 25)\n      };\n    }\n    \n    // Usage patterns\n    stats.patterns = {\n      peakHours: identifyPeakHours(hourlyData),\n      quietHours: identifyQuietHours(hourlyData),\n      weekdayVsWeekend: {\n        weekdayAvg: Math.round(hourlyData.filter(h => {\n          const day = new Date(h.timestamp).getDay();\n          return day >= 1 && day <= 5;\n        }).reduce((sum, h) => sum + h.requests, 0) / (days * 5 * 24)),\n        weekendAvg: Math.round(hourlyData.filter(h => {\n          const day = new Date(h.timestamp).getDay();\n          return day === 0 || day === 6;\n        }).reduce((sum, h) => sum + h.requests, 0) / (days * 2 * 24))\n      },\n      growthTrend: calculateGrowthTrend(hourlyData)\n    };\n    \n    // Forecasting\n    stats.forecast = {\n      next24h: {\n        requests: Math.round(stats.metrics.requests.average * 24 * (0.9 + Math.random() * 0.2)),\n        users: Math.round(stats.metrics.users.average * 24 * (0.85 + Math.random() * 0.3)),\n        bandwidth: Math.round(stats.metrics.bandwidth.average * 24 * (0.95 + Math.random() * 0.1))\n      },\n      next7d: {\n        requests: Math.round(stats.metrics.requests.average * 24 * 7 * (0.95 + Math.random() * 0.1)),\n        users: Math.round(stats.metrics.users.total * (1 + stats.metrics.requests.growth / 100)),\n        bandwidth: Math.round(stats.metrics.bandwidth.average * 24 * 7 * (0.98 + Math.random() * 0.04))\n      }\n    };\n    \n    return stats;\n  }\n});\n\n// Analyze resource costs\nexport const costAnalysis = createTool({\n  name: 'costAnalysis',\n  description: 'Analyze resource costs and optimization opportunities',\n  inputSchema: z.object({\n    timeframe: z.string().default('30d'),\n    breakdown: z.boolean().default(true)\n  }),\n  execute: async ({ timeframe, breakdown }) => {\n    const analysis = {\n      timestamp: new Date().toISOString(),\n      timeframe,\n      currency: 'USD',\n      totalCost: 0,\n      projectedMonthly: 0,\n      savingsOpportunities: [],\n      breakdown: {},\n      trends: {},\n      recommendations: []\n    };\n    \n    // Define cost structure\n    const costStructure = {\n      compute: {\n        instances: { count: 8, costPerHour: 0.68, utilization: 65 },\n        containers: { count: 24, costPerHour: 0.12, utilization: 45 },\n        serverless: { invocations: 5000000, costPer1M: 20, utilization: 80 }\n      },\n      storage: {\n        database: { sizeGB: 500, costPerGB: 0.10, growth: 5 },\n        objectStorage: { sizeGB: 2000, costPerGB: 0.023, growth: 8 },\n        backup: { sizeGB: 3000, costPerGB: 0.01, growth: 10 }\n      },\n      network: {\n        dataTransfer: { gbPerDay: 500, costPerGB: 0.08 },\n        cdn: { gbPerDay: 1000, costPerGB: 0.04 },\n        loadBalancer: { count: 2, costPerHour: 0.025 }\n      },\n      services: {\n        monitoring: { costPerMonth: 200 },\n        logging: { gbPerDay: 50, costPerGB: 0.50 },\n        security: { costPerMonth: 500 }\n      }\n    };\n    \n    // Calculate costs\n    const days = parseInt(timeframe) || 30;\n    const hours = days * 24;\n    \n    // Compute costs\n    const computeCost = {\n      instances: costStructure.compute.instances.count * costStructure.compute.instances.costPerHour * hours,\n      containers: costStructure.compute.containers.count * costStructure.compute.containers.costPerHour * hours,\n      serverless: (costStructure.compute.serverless.invocations * days / 30) * costStructure.compute.serverless.costPer1M / 1000000\n    };\n    \n    // Storage costs\n    const storageCost = {\n      database: costStructure.storage.database.sizeGB * costStructure.storage.database.costPerGB * days,\n      objectStorage: costStructure.storage.objectStorage.sizeGB * costStructure.storage.objectStorage.costPerGB * days,\n      backup: costStructure.storage.backup.sizeGB * costStructure.storage.backup.costPerGB * days\n    };\n    \n    // Network costs\n    const networkCost = {\n      dataTransfer: costStructure.network.dataTransfer.gbPerDay * costStructure.network.dataTransfer.costPerGB * days,\n      cdn: costStructure.network.cdn.gbPerDay * costStructure.network.cdn.costPerGB * days,\n      loadBalancer: costStructure.network.loadBalancer.count * costStructure.network.loadBalancer.costPerHour * hours\n    };\n    \n    // Service costs\n    const serviceCost = {\n      monitoring: costStructure.services.monitoring.costPerMonth * days / 30,\n      logging: costStructure.services.logging.gbPerDay * costStructure.services.logging.costPerGB * days,\n      security: costStructure.services.security.costPerMonth * days / 30\n    };\n    \n    // Calculate totals\n    if (breakdown) {\n      analysis.breakdown = {\n        compute: {\n          total: Math.round(Object.values(computeCost).reduce((a, b) => a + b, 0) * 100) / 100,\n          items: Object.entries(computeCost).map(([key, value]) => ({\n            name: key,\n            cost: Math.round(value * 100) / 100,\n            percentage: 0 // Will be calculated\n          }))\n        },\n        storage: {\n          total: Math.round(Object.values(storageCost).reduce((a, b) => a + b, 0) * 100) / 100,\n          items: Object.entries(storageCost).map(([key, value]) => ({\n            name: key,\n            cost: Math.round(value * 100) / 100,\n            percentage: 0\n          }))\n        },\n        network: {\n          total: Math.round(Object.values(networkCost).reduce((a, b) => a + b, 0) * 100) / 100,\n          items: Object.entries(networkCost).map(([key, value]) => ({\n            name: key,\n            cost: Math.round(value * 100) / 100,\n            percentage: 0\n          }))\n        },\n        services: {\n          total: Math.round(Object.values(serviceCost).reduce((a, b) => a + b, 0) * 100) / 100,\n          items: Object.entries(serviceCost).map(([key, value]) => ({\n            name: key,\n            cost: Math.round(value * 100) / 100,\n            percentage: 0\n          }))\n        }\n      };\n    }\n    \n    analysis.totalCost = Math.round(\n      (analysis.breakdown?.compute.total || 0) +\n      (analysis.breakdown?.storage.total || 0) +\n      (analysis.breakdown?.network.total || 0) +\n      (analysis.breakdown?.services.total || 0)\n    * 100) / 100;\n    \n    // Calculate percentages\n    if (breakdown) {\n      Object.values(analysis.breakdown).forEach(category => {\n        category.items.forEach(item => {\n          item.percentage = Math.round((item.cost / analysis.totalCost) * 100 * 100) / 100;\n        });\n        category.percentage = Math.round((category.total / analysis.totalCost) * 100 * 100) / 100;\n      });\n    }\n    \n    analysis.projectedMonthly = Math.round(analysis.totalCost * 30 / days * 100) / 100;\n    \n    // Identify savings opportunities\n    if (costStructure.compute.instances.utilization < 70) {\n      analysis.savingsOpportunities.push({\n        category: 'compute',\n        opportunity: 'Instance right-sizing',\n        currentCost: Math.round(computeCost.instances * 100) / 100,\n        potentialSavings: Math.round(computeCost.instances * 0.2 * 100) / 100,\n        effort: 'medium',\n        recommendation: 'Analyze instance utilization and downsize underutilized instances'\n      });\n    }\n    \n    if (costStructure.compute.containers.utilization < 50) {\n      analysis.savingsOpportunities.push({\n        category: 'compute',\n        opportunity: 'Container optimization',\n        currentCost: Math.round(computeCost.containers * 100) / 100,\n        potentialSavings: Math.round(computeCost.containers * 0.3 * 100) / 100,\n        effort: 'low',\n        recommendation: 'Implement auto-scaling and reduce idle container instances'\n      });\n    }\n    \n    if (costStructure.storage.backup.growth > 8) {\n      analysis.savingsOpportunities.push({\n        category: 'storage',\n        opportunity: 'Backup retention optimization',\n        currentCost: Math.round(storageCost.backup * 100) / 100,\n        potentialSavings: Math.round(storageCost.backup * 0.25 * 100) / 100,\n        effort: 'low',\n        recommendation: 'Implement tiered backup retention policies and archive old backups'\n      });\n    }\n    \n    // Cost trends\n    analysis.trends = {\n      monthly: Array.from({ length: 6 }, (_, i) => {\n        const monthAgo = 5 - i;\n        const growthFactor = Math.pow(1.05, monthAgo); // 5% monthly growth\n        return {\n          month: new Date(Date.now() - monthAgo * 30 * 86400000).toISOString().slice(0, 7),\n          cost: Math.round(analysis.projectedMonthly / growthFactor * (0.9 + Math.random() * 0.2) * 100) / 100\n        };\n      }),\n      projection: {\n        nextMonth: Math.round(analysis.projectedMonthly * 1.05 * 100) / 100,\n        next3Months: Math.round(analysis.projectedMonthly * 3.15 * 100) / 100,\n        nextYear: Math.round(analysis.projectedMonthly * 12.7 * 100) / 100\n      }\n    };\n    \n    // Generate recommendations\n    analysis.recommendations = [\n      {\n        priority: 'high',\n        category: 'compute',\n        action: 'Implement auto-scaling policies',\n        impact: 'Save 15-25% on compute costs',\n        effort: 'medium'\n      },\n      {\n        priority: 'medium',\n        category: 'storage',\n        action: 'Enable data lifecycle policies',\n        impact: 'Reduce storage costs by 20%',\n        effort: 'low'\n      },\n      {\n        priority: 'medium',\n        category: 'network',\n        action: 'Optimize CDN caching strategies',\n        impact: 'Reduce data transfer by 30%',\n        effort: 'low'\n      }\n    ];\n    \n    // Add total potential savings\n    analysis.totalPotentialSavings = Math.round(\n      analysis.savingsOpportunities.reduce((sum, opp) => sum + opp.potentialSavings, 0) * 100\n    ) / 100;\n    \n    analysis.savingsPercentage = Math.round(\n      (analysis.totalPotentialSavings / analysis.totalCost) * 100 * 100\n    ) / 100;\n    \n    return analysis;\n  }\n});\n\n// Assess output quality\nexport const qualityAssess = createTool({\n  name: 'qualityAssess',\n  description: 'Assess quality of system outputs and operations',\n  inputSchema: z.object({\n    target: z.string(),\n    criteria: z.array(z.string()).default(['accuracy', 'performance', 'reliability', 'security', 'usability'])\n  }),\n  execute: async ({ target, criteria }) => {\n    const assessment = {\n      timestamp: new Date().toISOString(),\n      target,\n      overallScore: 0,\n      criteria: {},\n      strengths: [],\n      weaknesses: [],\n      recommendations: [],\n      benchmarks: {}\n    };\n    \n    // Define quality metrics for each criterion\n    const qualityMetrics = {\n      accuracy: {\n        weight: 0.25,\n        metrics: {\n          errorRate: Math.random() * 5, // percentage\n          precision: 95 + Math.random() * 4,\n          dataIntegrity: 98 + Math.random() * 2,\n          validationSuccess: 96 + Math.random() * 3\n        }\n      },\n      performance: {\n        weight: 0.20,\n        metrics: {\n          responseTime: 45 + Math.random() * 30, // ms\n          throughput: 800 + Math.random() * 400, // req/s\n          efficiency: 85 + Math.random() * 10,\n          scalability: 80 + Math.random() * 15\n        }\n      },\n      reliability: {\n        weight: 0.20,\n        metrics: {\n          uptime: 99.9 + Math.random() * 0.09,\n          mtbf: 720 + Math.random() * 480, // hours\n          errorRecovery: 95 + Math.random() * 4,\n          consistency: 94 + Math.random() * 5\n        }\n      },\n      security: {\n        weight: 0.20,\n        metrics: {\n          vulnerabilities: Math.floor(Math.random() * 5),\n          complianceScore: 90 + Math.random() * 8,\n          encryptionStrength: 95 + Math.random() * 5,\n          accessControl: 92 + Math.random() * 6\n        }\n      },\n      usability: {\n        weight: 0.15,\n        metrics: {\n          userSatisfaction: 80 + Math.random() * 15,\n          taskCompletionRate: 90 + Math.random() * 8,\n          errorFrequency: Math.random() * 10,\n          learnability: 85 + Math.random() * 10\n        }\n      }\n    };\n    \n    // Assess each criterion\n    let totalWeightedScore = 0;\n    \n    criteria.forEach(criterion => {\n      if (qualityMetrics[criterion]) {\n        const metrics = qualityMetrics[criterion].metrics;\n        const weight = qualityMetrics[criterion].weight;\n        \n        // Calculate criterion score\n        let score = 0;\n        const details = {};\n        \n        switch (criterion) {\n          case 'accuracy':\n            score = (metrics.precision + metrics.dataIntegrity + metrics.validationSuccess) / 3 - metrics.errorRate;\n            details.errorRate = `${Math.round(metrics.errorRate * 100) / 100}%`;\n            details.precision = `${Math.round(metrics.precision * 100) / 100}%`;\n            details.dataIntegrity = `${Math.round(metrics.dataIntegrity * 100) / 100}%`;\n            break;\n            \n          case 'performance':\n            score = (metrics.efficiency + metrics.scalability + \n                    (1000 - metrics.responseTime) / 10 + \n                    metrics.throughput / 10) / 4;\n            details.avgResponseTime = `${Math.round(metrics.responseTime)}ms`;\n            details.throughput = `${Math.round(metrics.throughput)} req/s`;\n            details.efficiency = `${Math.round(metrics.efficiency)}%`;\n            break;\n            \n          case 'reliability':\n            score = (metrics.uptime + metrics.errorRecovery + metrics.consistency) / 3;\n            details.uptime = `${Math.round(metrics.uptime * 100) / 100}%`;\n            details.mtbf = `${Math.round(metrics.mtbf)} hours`;\n            details.consistency = `${Math.round(metrics.consistency)}%`;\n            break;\n            \n          case 'security':\n            score = (metrics.complianceScore + metrics.encryptionStrength + \n                    metrics.accessControl - metrics.vulnerabilities * 5) / 3;\n            details.vulnerabilities = metrics.vulnerabilities;\n            details.compliance = `${Math.round(metrics.complianceScore)}%`;\n            details.encryption = `${Math.round(metrics.encryptionStrength)}%`;\n            break;\n            \n          case 'usability':\n            score = (metrics.userSatisfaction + metrics.taskCompletionRate + \n                    metrics.learnability - metrics.errorFrequency) / 3;\n            details.satisfaction = `${Math.round(metrics.userSatisfaction)}%`;\n            details.taskSuccess = `${Math.round(metrics.taskCompletionRate)}%`;\n            details.errorRate = `${Math.round(metrics.errorFrequency * 100) / 100}%`;\n            break;\n        }\n        \n        score = Math.max(0, Math.min(100, score));\n        \n        assessment.criteria[criterion] = {\n          score: Math.round(score * 100) / 100,\n          weight: weight,\n          grade: score >= 90 ? 'A' : score >= 80 ? 'B' : score >= 70 ? 'C' : score >= 60 ? 'D' : 'F',\n          status: score >= 80 ? 'good' : score >= 60 ? 'acceptable' : 'needs improvement',\n          details,\n          trend: Math.random() > 0.5 ? 'improving' : 'stable'\n        };\n        \n        totalWeightedScore += score * weight;\n        \n        // Identify strengths and weaknesses\n        if (score >= 85) {\n          assessment.strengths.push({\n            criterion,\n            score,\n            reason: `Strong ${criterion} with consistent high performance`\n          });\n        } else if (score < 70) {\n          assessment.weaknesses.push({\n            criterion,\n            score,\n            reason: `${criterion} below acceptable threshold`,\n            impact: weight > 0.2 ? 'high' : 'medium'\n          });\n        }\n      }\n    });\n    \n    assessment.overallScore = Math.round(totalWeightedScore * 100) / 100;\n    assessment.overallGrade = assessment.overallScore >= 90 ? 'A' : \n                             assessment.overallScore >= 80 ? 'B' : \n                             assessment.overallScore >= 70 ? 'C' : \n                             assessment.overallScore >= 60 ? 'D' : 'F';\n    \n    // Industry benchmarks comparison\n    assessment.benchmarks = {\n      industry: {\n        accuracy: 92,\n        performance: 85,\n        reliability: 95,\n        security: 88,\n        usability: 82\n      },\n      comparison: {}\n    };\n    \n    Object.entries(assessment.criteria).forEach(([criterion, data]) => {\n      if (assessment.benchmarks.industry[criterion]) {\n        const diff = data.score - assessment.benchmarks.industry[criterion];\n        assessment.benchmarks.comparison[criterion] = {\n          score: data.score,\n          benchmark: assessment.benchmarks.industry[criterion],\n          difference: Math.round(diff * 100) / 100,\n          status: diff >= 0 ? 'above' : 'below'\n        };\n      }\n    });\n    \n    // Generate recommendations\n    assessment.weaknesses.forEach(weakness => {\n      assessment.recommendations.push(generateQualityRecommendation(weakness.criterion, weakness.score));\n    });\n    \n    // Add improvement opportunities even for strengths\n    if (assessment.recommendations.length === 0) {\n      assessment.recommendations.push({\n        priority: 'low',\n        area: 'continuous improvement',\n        action: 'Maintain current quality standards and look for optimization opportunities',\n        expectedImpact: 'Sustain high performance levels'\n      });\n    }\n    \n    // Quality trends\n    assessment.trends = {\n      historical: Array.from({ length: 7 }, (_, i) => ({\n        date: new Date(Date.now() - (6 - i) * 86400000).toISOString().slice(0, 10),\n        score: Math.round((assessment.overallScore - 5 + Math.random() * 10) * 100) / 100\n      })),\n      projection: {\n        next7Days: Math.round((assessment.overallScore + Math.random() * 3 - 1) * 100) / 100,\n        next30Days: Math.round((assessment.overallScore + Math.random() * 5 - 2) * 100) / 100\n      }\n    };\n    \n    return assessment;\n  }\n});\n\n// Run performance benchmarks\nexport const benchmarkRun = createTool({\n  name: 'benchmarkRun',\n  description: 'Run comprehensive performance benchmarks',\n  inputSchema: z.object({\n    suite: z.string().default('standard'),\n    iterations: z.number().default(100),\n    warmup: z.boolean().default(true)\n  }),\n  execute: async ({ suite, iterations, warmup }) => {\n    const benchmark = {\n      timestamp: new Date().toISOString(),\n      suite,\n      iterations,\n      environment: {\n        platform: 'linux',\n        cpuCores: 8,\n        memory: '16GB',\n        nodeVersion: '18.17.0'\n      },\n      results: {},\n      comparison: {},\n      summary: {}\n    };\n    \n    // Define benchmark tests\n    const tests = {\n      standard: [\n        { name: 'response_time', fn: () => simulateResponseTime() },\n        { name: 'throughput', fn: () => simulateThroughput() },\n        { name: 'cpu_intensive', fn: () => simulateCPUTask() },\n        { name: 'memory_allocation', fn: () => simulateMemoryTask() },\n        { name: 'io_operations', fn: () => simulateIOTask() },\n        { name: 'database_query', fn: () => simulateDatabaseQuery() },\n        { name: 'api_latency', fn: () => simulateAPILatency() }\n      ],\n      stress: [\n        { name: 'concurrent_requests', fn: () => simulateConcurrentRequests() },\n        { name: 'memory_pressure', fn: () => simulateMemoryPressure() },\n        { name: 'sustained_load', fn: () => simulateSustainedLoad() }\n      ],\n      comprehensive: [\n        ...tests.standard,\n        ...tests.stress,\n        { name: 'cache_performance', fn: () => simulateCachePerformance() },\n        { name: 'queue_processing', fn: () => simulateQueueProcessing() }\n      ]\n    };\n    \n    const selectedTests = tests[suite] || tests.standard;\n    \n    // Run warmup if requested\n    if (warmup) {\n      benchmark.warmupRounds = 10;\n      selectedTests.forEach(test => {\n        for (let i = 0; i < benchmark.warmupRounds; i++) {\n          test.fn();\n        }\n      });\n    }\n    \n    // Run benchmarks\n    selectedTests.forEach(test => {\n      const results = [];\n      const startTime = Date.now();\n      \n      for (let i = 0; i < iterations; i++) {\n        const iterStart = performance.now();\n        const result = test.fn();\n        const iterEnd = performance.now();\n        \n        results.push({\n          duration: iterEnd - iterStart,\n          result\n        });\n      }\n      \n      const totalTime = Date.now() - startTime;\n      const durations = results.map(r => r.duration);\n      durations.sort((a, b) => a - b);\n      \n      benchmark.results[test.name] = {\n        iterations,\n        totalTime,\n        metrics: {\n          min: Math.round(Math.min(...durations) * 1000) / 1000,\n          max: Math.round(Math.max(...durations) * 1000) / 1000,\n          mean: Math.round(durations.reduce((a, b) => a + b, 0) / durations.length * 1000) / 1000,\n          median: Math.round(durations[Math.floor(durations.length / 2)] * 1000) / 1000,\n          p95: Math.round(durations[Math.floor(durations.length * 0.95)] * 1000) / 1000,\n          p99: Math.round(durations[Math.floor(durations.length * 0.99)] * 1000) / 1000,\n          stdDev: Math.round(calculateStdDev(durations) * 1000) / 1000\n        },\n        opsPerSecond: Math.round(1000 / (durations.reduce((a, b) => a + b, 0) / durations.length))\n      };\n    });\n    \n    // Compare with baseline\n    const baseline = {\n      response_time: { mean: 50, p95: 80, p99: 100 },\n      throughput: { mean: 10, p95: 15, p99: 18 },\n      cpu_intensive: { mean: 100, p95: 150, p99: 200 },\n      memory_allocation: { mean: 5, p95: 8, p99: 12 },\n      io_operations: { mean: 20, p95: 35, p99: 50 },\n      database_query: { mean: 30, p95: 50, p99: 80 },\n      api_latency: { mean: 45, p95: 70, p99: 90 }\n    };\n    \n    Object.entries(benchmark.results).forEach(([test, result]) => {\n      if (baseline[test]) {\n        benchmark.comparison[test] = {\n          mean: {\n            current: result.metrics.mean,\n            baseline: baseline[test].mean,\n            difference: Math.round((result.metrics.mean - baseline[test].mean) / baseline[test].mean * 100 * 100) / 100,\n            status: result.metrics.mean <= baseline[test].mean * 1.1 ? 'pass' : 'fail'\n          },\n          p95: {\n            current: result.metrics.p95,\n            baseline: baseline[test].p95,\n            difference: Math.round((result.metrics.p95 - baseline[test].p95) / baseline[test].p95 * 100 * 100) / 100,\n            status: result.metrics.p95 <= baseline[test].p95 * 1.1 ? 'pass' : 'fail'\n          }\n        };\n      }\n    });\n    \n    // Calculate summary\n    const allTests = Object.values(benchmark.results);\n    const passedTests = Object.values(benchmark.comparison).filter(c => \n      c.mean.status === 'pass' && c.p95.status === 'pass'\n    ).length;\n    \n    benchmark.summary = {\n      totalTests: selectedTests.length,\n      passedTests,\n      failedTests: Object.keys(benchmark.comparison).length - passedTests,\n      overallScore: Math.round(passedTests / Object.keys(benchmark.comparison).length * 100),\n      performance: {\n        fastest: Object.entries(benchmark.results)\n          .sort((a, b) => a[1].metrics.mean - b[1].metrics.mean)[0][0],\n        slowest: Object.entries(benchmark.results)\n          .sort((a, b) => b[1].metrics.mean - a[1].metrics.mean)[0][0]\n      },\n      recommendations: generateBenchmarkRecommendations(benchmark.comparison)\n    };\n    \n    return benchmark;\n  }\n});\n\n// Helper functions for simulating benchmark operations\nfunction simulateResponseTime() {\n  return 30 + Math.random() * 70;\n}\n\nfunction simulateThroughput() {\n  return 8 + Math.random() * 12;\n}\n\nfunction simulateCPUTask() {\n  // Simulate CPU-intensive operation\n  let result = 0;\n  for (let i = 0; i < 100000; i++) {\n    result += Math.sqrt(i) * Math.sin(i);\n  }\n  return 80 + Math.random() * 40;\n}\n\nfunction simulateMemoryTask() {\n  // Simulate memory allocation\n  const arr = new Array(10000).fill(0).map(() => Math.random());\n  return 4 + Math.random() * 6;\n}\n\nfunction simulateIOTask() {\n  return 15 + Math.random() * 25;\n}\n\nfunction simulateDatabaseQuery() {\n  return 20 + Math.random() * 40;\n}\n\nfunction simulateAPILatency() {\n  return 35 + Math.random() * 35;\n}\n\nfunction simulateConcurrentRequests() {\n  return 100 + Math.random() * 100;\n}\n\nfunction simulateMemoryPressure() {\n  return 200 + Math.random() * 200;\n}\n\nfunction simulateSustainedLoad() {\n  return 150 + Math.random() * 150;\n}\n\nfunction simulateCachePerformance() {\n  return 2 + Math.random() * 8;\n}\n\nfunction simulateQueueProcessing() {\n  return 10 + Math.random() * 20;\n}\n\n// Helper function to calculate standard deviation\nfunction calculateStdDev(values) {\n  const mean = values.reduce((a, b) => a + b, 0) / values.length;\n  const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n  return Math.sqrt(variance);\n}\n\n// Helper function to format reports\nfunction formatReport(report, format) {\n  if (format === 'summary') {\n    return `\nPerformance Report - ${report.timeframe}\nGenerated: ${report.generatedAt}\n\nSummary:\n- Total Requests: ${report.summary.totalRequests}\n- Avg Response Time: ${report.summary.avgResponseTime}ms\n- P95 Response Time: ${report.summary.p95ResponseTime}ms\n- Error Rate: ${report.summary.errorRate}%\n- Uptime: ${report.summary.uptime}%\n\nTrends:\n- Response Time: ${report.trends.responseTime.trend} (${report.trends.responseTime.change}%)\n- Throughput: ${report.trends.throughput.trend} (${report.trends.throughput.change}%)\n- Error Rate: ${report.trends.errorRate.trend}\n    `;\n  }\n  return report;\n}\n\n// Helper function to generate trend insights\nfunction generateTrendInsights(direction, strength, anomalies, avg, metric) {\n  const insights = [];\n  \n  if (direction === 'increasing' && metric === 'responseTime') {\n    insights.push('Response times are increasing, indicating potential performance degradation');\n  } else if (direction === 'decreasing' && metric === 'throughput') {\n    insights.push('Throughput is decreasing, which may indicate capacity issues');\n  }\n  \n  if (anomalies > 5) {\n    insights.push(`High number of anomalies detected (${anomalies}), suggesting system instability`);\n  }\n  \n  if (strength === 'strong') {\n    insights.push(`Strong ${direction} trend detected, requiring immediate attention`);\n  }\n  \n  return insights;\n}\n\n// Helper function to generate error recommendations\nfunction generateErrorRecommendation(pattern, count) {\n  const recommendations = {\n    'Database Connection': 'Implement connection pooling, add retry logic, and monitor database health',\n    'Authentication': 'Review token expiration policies and implement proper error handling',\n    'Rate Limiting': 'Implement request queuing or increase rate limits for legitimate traffic',\n    'Memory Issues': 'Analyze memory leaks, implement garbage collection optimization, and consider scaling'\n  };\n  \n  return recommendations[pattern] || 'Investigate root cause and implement appropriate error handling';\n}\n\n// Helper function to calculate error frequency\nfunction calculateErrorFrequency(error) {\n  const duration = new Date(error.lastSeen) - new Date(error.firstSeen);\n  const hours = duration / 3600000;\n  return hours > 0 ? Math.round(error.count / hours * 100) / 100 : error.count;\n}\n\n// Helper function to calculate error concentration\nfunction calculateErrorConcentration(hourlyErrors) {\n  const values = Object.values(hourlyErrors);\n  const max = Math.max(...values);\n  const avg = values.reduce((a, b) => a + b, 0) / values.length;\n  return max / avg;\n}\n\n// Helper function to find peak error time\nfunction findPeakErrorTime(hourlyErrors) {\n  let maxHour = '';\n  let maxCount = 0;\n  \n  Object.entries(hourlyErrors).forEach(([hour, count]) => {\n    if (count > maxCount) {\n      maxCount = count;\n      maxHour = hour;\n    }\n  });\n  \n  return maxHour;\n}\n\n// Helper function to generate sample error logs\nfunction generateSampleErrorLogs(count) {\n  const errors = [\n    { type: 'Database Connection Error', message: 'Connection timeout to database server' },\n    { type: 'Authentication Failed', message: 'Invalid token provided' },\n    { type: 'Rate Limit Exceeded', message: 'Too many requests from IP' },\n    { type: 'Memory Error', message: 'Out of memory when processing large dataset' },\n    { type: 'API Error', message: 'External API returned 500 error' },\n    { type: 'Validation Error', message: 'Invalid input data format' }\n  ];\n  \n  return Array.from({ length: count }, (_, i) => {\n    const error = errors[Math.floor(Math.random() * errors.length)];\n    return {\n      timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),\n      level: Math.random() > 0.7 ? 'error' : 'warning',\n      message: `${error.type}: ${error.message}`,\n      metadata: {\n        component: ['api', 'database', 'auth', 'worker'][Math.floor(Math.random() * 4)],\n        userId: Math.floor(Math.random() * 10000)\n      }\n    };\n  });\n}\n\n// Helper function to calculate growth rate\nfunction calculateGrowthRate(data) {\n  if (data.length < 2) return 0;\n  const firstWeek = data.slice(0, 7).reduce((a, b) => a + b, 0) / 7;\n  const lastWeek = data.slice(-7).reduce((a, b) => a + b, 0) / 7;\n  return Math.round(((lastWeek - firstWeek) / firstWeek) * 100 * 100) / 100;\n}\n\n// Helper function to identify peak hours\nfunction identifyPeakHours(hourlyData) {\n  const hourlyAverages = {};\n  \n  hourlyData.forEach(data => {\n    const hour = new Date(data.timestamp).getHours();\n    if (!hourlyAverages[hour]) {\n      hourlyAverages[hour] = { total: 0, count: 0 };\n    }\n    hourlyAverages[hour].total += data.requests;\n    hourlyAverages[hour].count++;\n  });\n  \n  const averages = Object.entries(hourlyAverages)\n    .map(([hour, data]) => ({\n      hour: parseInt(hour),\n      avg: data.total / data.count\n    }))\n    .sort((a, b) => b.avg - a.avg);\n  \n  return averages.slice(0, 3).map(a => `${a.hour}:00`);\n}\n\n// Helper function to identify quiet hours\nfunction identifyQuietHours(hourlyData) {\n  const hourlyAverages = {};\n  \n  hourlyData.forEach(data => {\n    const hour = new Date(data.timestamp).getHours();\n    if (!hourlyAverages[hour]) {\n      hourlyAverages[hour] = { total: 0, count: 0 };\n    }\n    hourlyAverages[hour].total += data.requests;\n    hourlyAverages[hour].count++;\n  });\n  \n  const averages = Object.entries(hourlyAverages)\n    .map(([hour, data]) => ({\n      hour: parseInt(hour),\n      avg: data.total / data.count\n    }))\n    .sort((a, b) => a.avg - b.avg);\n  \n  return averages.slice(0, 3).map(a => `${a.hour}:00`);\n}\n\n// Helper function to calculate growth trend\nfunction calculateGrowthTrend(hourlyData) {\n  const dailyTotals = {};\n  \n  hourlyData.forEach(data => {\n    const day = new Date(data.timestamp).toISOString().slice(0, 10);\n    dailyTotals[day] = (dailyTotals[day] || 0) + data.requests;\n  });\n  \n  const days = Object.entries(dailyTotals).sort(([a], [b]) => a.localeCompare(b));\n  if (days.length < 2) return 'insufficient data';\n  \n  const firstHalf = days.slice(0, Math.floor(days.length / 2)).reduce((sum, [, val]) => sum + val, 0);\n  const secondHalf = days.slice(Math.floor(days.length / 2)).reduce((sum, [, val]) => sum + val, 0);\n  \n  const change = ((secondHalf - firstHalf) / firstHalf) * 100;\n  \n  if (change > 10) return 'strong growth';\n  if (change > 5) return 'moderate growth';\n  if (change > -5) return 'stable';\n  if (change > -10) return 'moderate decline';\n  return 'significant decline';\n}\n\n// Helper function to generate health recommendations\nfunction generateHealthRecommendations(issues) {\n  return issues.map(issue => ({\n    component: issue.component,\n    priority: issue.severity,\n    action: `Address ${issue.checks.join(', ')} issues in ${issue.component}`,\n    expectedImpact: issue.severity === 'critical' ? 'Restore service functionality' : 'Improve performance and reliability'\n  }));\n}\n\n// Helper function to generate quality recommendation\nfunction generateQualityRecommendation(criterion, score) {\n  const recommendations = {\n    accuracy: {\n      priority: 'high',\n      area: 'accuracy',\n      action: 'Implement additional validation rules and data quality checks',\n      expectedImpact: 'Reduce error rate by 50% and improve data reliability'\n    },\n    performance: {\n      priority: 'high',\n      area: 'performance',\n      action: 'Optimize query performance, implement caching, and review resource allocation',\n      expectedImpact: 'Improve response times by 30-40%'\n    },\n    reliability: {\n      priority: 'critical',\n      area: 'reliability',\n      action: 'Implement redundancy, improve error handling, and add health checks',\n      expectedImpact: 'Increase uptime to 99.9% and reduce MTTR'\n    },\n    security: {\n      priority: 'critical',\n      area: 'security',\n      action: 'Patch vulnerabilities, update dependencies, and enhance access controls',\n      expectedImpact: 'Eliminate critical vulnerabilities and improve compliance'\n    },\n    usability: {\n      priority: 'medium',\n      area: 'usability',\n      action: 'Conduct user testing, simplify workflows, and improve documentation',\n      expectedImpact: 'Increase user satisfaction by 20%'\n    }\n  };\n  \n  return recommendations[criterion] || {\n    priority: 'medium',\n    area: criterion,\n    action: `Investigate and improve ${criterion} metrics`,\n    expectedImpact: 'Enhanced system quality'\n  };\n}\n\n// Helper function to generate benchmark recommendations\nfunction generateBenchmarkRecommendations(comparison) {\n  const recommendations = [];\n  \n  Object.entries(comparison).forEach(([test, results]) => {\n    if (results.mean.status === 'fail' || results.p95.status === 'fail') {\n      recommendations.push({\n        test,\n        issue: `Performance regression detected: ${results.mean.difference}% slower than baseline`,\n        action: `Investigate ${test} implementation and optimize for better performance`,\n        priority: Math.abs(results.mean.difference) > 20 ? 'high' : 'medium'\n      });\n    }\n  });\n  \n  if (recommendations.length === 0) {\n    recommendations.push({\n      test: 'overall',\n      issue: 'All benchmarks within acceptable range',\n      action: 'Continue monitoring and look for optimization opportunities',\n      priority: 'low'\n    });\n  }\n  \n  return recommendations;\n}\n\n// Export all tools\nexport default {\n  performanceReport,\n  bottleneckAnalyze,\n  metricsCollect,\n  trendAnalysis,\n  healthCheck,\n  errorAnalysis,\n  usageStats,\n  costAnalysis,\n  qualityAssess,\n  benchmarkRun\n};\n// Named export for consistency\nexport const performanceMonitoringTools = {\n  performanceReport,\n  bottleneckAnalyze,\n  metricsCollect,\n  trendAnalysis,\n  healthCheck,\n  errorAnalysis,\n  usageStats,\n  costAnalysis,\n  qualityAssess,\n  benchmarkRun\n};\n"],"names":["performanceMonitoringTools"],"mappings":"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"}