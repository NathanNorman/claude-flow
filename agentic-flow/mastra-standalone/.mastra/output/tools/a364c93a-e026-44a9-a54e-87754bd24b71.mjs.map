{"version":3,"file":"a364c93a-e026-44a9-a54e-87754bd24b71.mjs","sources":["../../../src/mastra/tools/integration-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// Helper functions for simulated integration patterns\nconst generateRequestId = () => `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst generateWebhookId = () => `wh_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst generateStreamId = () => `stream_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\nconst generateQueueId = () => `queue_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// Simulated data stores\nconst webhookRegistry = new Map();\nconst eventStreams = new Map();\nconst syncJobs = new Map();\nconst messageQueues = new Map();\nconst rateLimitBuckets = new Map();\nconst circuitBreakers = new Map();\n\n// 1. API Integration Tool\nconst apiIntegrationTool = createTool({\n  id: 'api-integration',\n  name: 'API Integration Manager',\n  description: 'Manages API integrations with authentication, retry logic, and response transformation',\n  inputSchema: z.object({\n    endpoint: z.string().url(),\n    method: z.enum(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']),\n    headers: z.record(z.string()).optional(),\n    body: z.any().optional(),\n    auth: z.object({\n      type: z.enum(['bearer', 'basic', 'apikey', 'oauth2']),\n      credentials: z.string()\n    }).optional(),\n    retryConfig: z.object({\n      maxRetries: z.number().default(3),\n      backoffMs: z.number().default(1000)\n    }).optional(),\n    transformResponse: z.boolean().default(false)\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    requestId: z.string(),\n    statusCode: z.number(),\n    headers: z.record(z.string()),\n    data: z.any(),\n    latencyMs: z.number(),\n    retryCount: z.number()\n  }),\n  execute: async (input) => {\n    const startTime = Date.now();\n    const requestId = generateRequestId();\n    \n    // Simulate API call with retry logic\n    let retryCount = 0;\n    const maxRetries = input.retryConfig?.maxRetries || 3;\n    \n    // Simulate successful API response\n    const simulatedResponse = {\n      users: [\n        { id: 1, name: 'John Doe', email: 'john@example.com' },\n        { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\n      ],\n      meta: { total: 2, page: 1 }\n    };\n    \n    // Transform response if requested\n    const responseData = input.transformResponse ? {\n      ...simulatedResponse,\n      transformed: true,\n      timestamp: new Date().toISOString()\n    } : simulatedResponse;\n    \n    return {\n      success: true,\n      requestId,\n      statusCode: 200,\n      headers: {\n        'content-type': 'application/json',\n        'x-request-id': requestId,\n        'x-rate-limit-remaining': '98'\n      },\n      data: responseData,\n      latencyMs: Date.now() - startTime,\n      retryCount\n    };\n  }\n});\n\n// 2. Webhook Management Tool\nconst webhookManagementTool = createTool({\n  id: 'webhook-management',\n  name: 'Webhook Manager',\n  description: 'Manages webhook endpoints, verification, and event routing',\n  inputSchema: z.object({\n    action: z.enum(['create', 'update', 'delete', 'list', 'verify']),\n    webhookId: z.string().optional(),\n    config: z.object({\n      url: z.string().url(),\n      events: z.array(z.string()),\n      secret: z.string().optional(),\n      headers: z.record(z.string()).optional(),\n      active: z.boolean().default(true)\n    }).optional(),\n    payload: z.any().optional()\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    webhookId: z.string().optional(),\n    webhooks: z.array(z.object({\n      id: z.string(),\n      url: z.string(),\n      events: z.array(z.string()),\n      active: z.boolean(),\n      createdAt: z.string()\n    })).optional(),\n    verified: z.boolean().optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    switch (input.action) {\n      case 'create': {\n        const webhookId = generateWebhookId();\n        const webhook = {\n          id: webhookId,\n          ...input.config,\n          createdAt: new Date().toISOString(),\n          lastTriggered: null\n        };\n        webhookRegistry.set(webhookId, webhook);\n        \n        return {\n          success: true,\n          webhookId,\n          message: `Webhook created successfully with ID: ${webhookId}`\n        };\n      }\n      \n      case 'list': {\n        const webhooks = Array.from(webhookRegistry.values()).map(wh => ({\n          id: wh.id,\n          url: wh.url,\n          events: wh.events,\n          active: wh.active,\n          createdAt: wh.createdAt\n        }));\n        \n        return {\n          success: true,\n          webhooks,\n          message: `Found ${webhooks.length} webhooks`\n        };\n      }\n      \n      case 'verify': {\n        // Simulate webhook verification\n        const verified = Math.random() > 0.1; // 90% success rate\n        \n        return {\n          success: true,\n          verified,\n          message: verified ? 'Webhook payload verified' : 'Webhook verification failed'\n        };\n      }\n      \n      default:\n        return {\n          success: true,\n          message: `Action ${input.action} completed`\n        };\n    }\n  }\n});\n\n// 3. Event Streaming Tool\nconst eventStreamingTool = createTool({\n  id: 'event-streaming',\n  name: 'Event Stream Manager',\n  description: 'Manages real-time event streaming with pub/sub patterns',\n  inputSchema: z.object({\n    action: z.enum(['create-stream', 'publish', 'subscribe', 'unsubscribe', 'list-streams']),\n    streamId: z.string().optional(),\n    topic: z.string(),\n    event: z.object({\n      type: z.string(),\n      data: z.any(),\n      metadata: z.record(z.string()).optional()\n    }).optional(),\n    subscriberId: z.string().optional(),\n    filter: z.object({\n      eventTypes: z.array(z.string()).optional(),\n      metadata: z.record(z.string()).optional()\n    }).optional()\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    streamId: z.string().optional(),\n    eventId: z.string().optional(),\n    subscribers: z.number().optional(),\n    streams: z.array(z.object({\n      id: z.string(),\n      topic: z.string(),\n      subscriberCount: z.number(),\n      eventCount: z.number()\n    })).optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    switch (input.action) {\n      case 'create-stream': {\n        const streamId = generateStreamId();\n        const stream = {\n          id: streamId,\n          topic: input.topic,\n          subscribers: new Set(),\n          events: [],\n          createdAt: new Date().toISOString()\n        };\n        eventStreams.set(streamId, stream);\n        \n        return {\n          success: true,\n          streamId,\n          message: `Event stream created for topic: ${input.topic}`\n        };\n      }\n      \n      case 'publish': {\n        const eventId = `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const stream = Array.from(eventStreams.values()).find(s => s.topic === input.topic);\n        \n        if (stream) {\n          stream.events.push({\n            id: eventId,\n            ...input.event,\n            timestamp: new Date().toISOString()\n          });\n          \n          return {\n            success: true,\n            eventId,\n            subscribers: stream.subscribers.size,\n            message: `Event published to ${stream.subscribers.size} subscribers`\n          };\n        }\n        \n        return {\n          success: false,\n          message: `Stream not found for topic: ${input.topic}`\n        };\n      }\n      \n      case 'list-streams': {\n        const streams = Array.from(eventStreams.values()).map(stream => ({\n          id: stream.id,\n          topic: stream.topic,\n          subscriberCount: stream.subscribers.size,\n          eventCount: stream.events.length\n        }));\n        \n        return {\n          success: true,\n          streams,\n          message: `Found ${streams.length} active streams`\n        };\n      }\n      \n      default:\n        return {\n          success: true,\n          message: `Action ${input.action} completed`\n        };\n    }\n  }\n});\n\n// 4. Data Synchronization Tool\nconst dataSynchronizationTool = createTool({\n  id: 'data-synchronization',\n  name: 'Data Sync Manager',\n  description: 'Manages bi-directional data synchronization between systems',\n  inputSchema: z.object({\n    action: z.enum(['sync', 'schedule', 'status', 'resolve-conflict']),\n    source: z.object({\n      type: z.string(),\n      connectionString: z.string(),\n      table: z.string().optional()\n    }),\n    target: z.object({\n      type: z.string(),\n      connectionString: z.string(),\n      table: z.string().optional()\n    }),\n    syncConfig: z.object({\n      mode: z.enum(['full', 'incremental', 'differential']),\n      frequency: z.enum(['realtime', 'hourly', 'daily', 'weekly']).optional(),\n      conflictResolution: z.enum(['source-wins', 'target-wins', 'latest-wins', 'manual']).default('latest-wins')\n    }),\n    jobId: z.string().optional()\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    jobId: z.string(),\n    status: z.enum(['running', 'completed', 'failed', 'conflict']),\n    recordsProcessed: z.number(),\n    recordsSynced: z.number(),\n    conflicts: z.array(z.object({\n      recordId: z.string(),\n      field: z.string(),\n      sourceValue: z.any(),\n      targetValue: z.any()\n    })).optional(),\n    duration: z.number(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    const jobId = input.jobId || `sync_${Date.now()}`;\n    \n    switch (input.action) {\n      case 'sync': {\n        // Simulate sync operation\n        const recordsProcessed = Math.floor(Math.random() * 10000) + 1000;\n        const recordsSynced = Math.floor(recordsProcessed * 0.95);\n        const hasConflicts = Math.random() > 0.8;\n        \n        const syncJob = {\n          jobId,\n          status: hasConflicts ? 'conflict' : 'completed',\n          recordsProcessed,\n          recordsSynced,\n          startTime: new Date().toISOString(),\n          config: input.syncConfig\n        };\n        \n        syncJobs.set(jobId, syncJob);\n        \n        const response = {\n          success: true,\n          jobId,\n          status: syncJob.status,\n          recordsProcessed,\n          recordsSynced,\n          duration: Math.floor(Math.random() * 5000) + 1000,\n          message: `Sync ${hasConflicts ? 'completed with conflicts' : 'completed successfully'}`\n        };\n        \n        if (hasConflicts) {\n          response.conflicts = [\n            {\n              recordId: 'rec_001',\n              field: 'updated_at',\n              sourceValue: '2024-01-20T10:00:00Z',\n              targetValue: '2024-01-20T11:00:00Z'\n            }\n          ];\n        }\n        \n        return response;\n      }\n      \n      case 'status': {\n        const job = syncJobs.get(input.jobId);\n        if (!job) {\n          return {\n            success: false,\n            jobId: input.jobId,\n            status: 'failed',\n            recordsProcessed: 0,\n            recordsSynced: 0,\n            duration: 0,\n            message: 'Sync job not found'\n          };\n        }\n        \n        return {\n          success: true,\n          jobId: job.jobId,\n          status: job.status,\n          recordsProcessed: job.recordsProcessed,\n          recordsSynced: job.recordsSynced,\n          duration: Date.now() - new Date(job.startTime).getTime(),\n          message: `Job status: ${job.status}`\n        };\n      }\n      \n      default:\n        return {\n          success: true,\n          jobId,\n          status: 'completed',\n          recordsProcessed: 0,\n          recordsSynced: 0,\n          duration: 0,\n          message: `Action ${input.action} completed`\n        };\n    }\n  }\n});\n\n// 5. Message Queuing Tool\nconst messageQueuingTool = createTool({\n  id: 'message-queuing',\n  name: 'Message Queue Manager',\n  description: 'Manages message queues with priority, dead letter queues, and acknowledgment',\n  inputSchema: z.object({\n    action: z.enum(['create-queue', 'send', 'receive', 'ack', 'nack', 'purge', 'stats']),\n    queueName: z.string(),\n    message: z.object({\n      body: z.any(),\n      headers: z.record(z.string()).optional(),\n      priority: z.number().min(0).max(10).default(5),\n      ttl: z.number().optional()\n    }).optional(),\n    messageId: z.string().optional(),\n    batchSize: z.number().min(1).max(100).default(1),\n    visibilityTimeout: z.number().default(30)\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    queueId: z.string().optional(),\n    messageId: z.string().optional(),\n    messages: z.array(z.object({\n      id: z.string(),\n      body: z.any(),\n      headers: z.record(z.string()),\n      receiptHandle: z.string(),\n      attempts: z.number()\n    })).optional(),\n    stats: z.object({\n      messagesAvailable: z.number(),\n      messagesInFlight: z.number(),\n      messagesDelayed: z.number(),\n      oldestMessageAge: z.number()\n    }).optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    switch (input.action) {\n      case 'create-queue': {\n        const queueId = generateQueueId();\n        const queue = {\n          id: queueId,\n          name: input.queueName,\n          messages: [],\n          inFlight: new Map(),\n          deadLetter: [],\n          createdAt: new Date().toISOString()\n        };\n        messageQueues.set(input.queueName, queue);\n        \n        return {\n          success: true,\n          queueId,\n          message: `Queue '${input.queueName}' created successfully`\n        };\n      }\n      \n      case 'send': {\n        const queue = messageQueues.get(input.queueName);\n        if (!queue) {\n          return {\n            success: false,\n            message: `Queue '${input.queueName}' not found`\n          };\n        }\n        \n        const messageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const message = {\n          id: messageId,\n          ...input.message,\n          timestamp: new Date().toISOString(),\n          attempts: 0\n        };\n        \n        queue.messages.push(message);\n        queue.messages.sort((a, b) => b.priority - a.priority);\n        \n        return {\n          success: true,\n          messageId,\n          message: `Message sent to queue '${input.queueName}'`\n        };\n      }\n      \n      case 'receive': {\n        const queue = messageQueues.get(input.queueName);\n        if (!queue) {\n          return {\n            success: false,\n            message: `Queue '${input.queueName}' not found`\n          };\n        }\n        \n        const messages = [];\n        for (let i = 0; i < input.batchSize && queue.messages.length > 0; i++) {\n          const msg = queue.messages.shift();\n          const receiptHandle = `rh_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          \n          msg.attempts++;\n          queue.inFlight.set(receiptHandle, {\n            ...msg,\n            visibilityTimeout: Date.now() + (input.visibilityTimeout * 1000)\n          });\n          \n          messages.push({\n            id: msg.id,\n            body: msg.body,\n            headers: msg.headers || {},\n            receiptHandle,\n            attempts: msg.attempts\n          });\n        }\n        \n        return {\n          success: true,\n          messages,\n          message: `Received ${messages.length} messages from queue '${input.queueName}'`\n        };\n      }\n      \n      case 'stats': {\n        const queue = messageQueues.get(input.queueName);\n        if (!queue) {\n          return {\n            success: false,\n            message: `Queue '${input.queueName}' not found`\n          };\n        }\n        \n        const oldestMessage = queue.messages[0];\n        const oldestMessageAge = oldestMessage \n          ? Date.now() - new Date(oldestMessage.timestamp).getTime()\n          : 0;\n        \n        return {\n          success: true,\n          stats: {\n            messagesAvailable: queue.messages.length,\n            messagesInFlight: queue.inFlight.size,\n            messagesDelayed: 0,\n            oldestMessageAge\n          },\n          message: `Queue stats for '${input.queueName}'`\n        };\n      }\n      \n      default:\n        return {\n          success: true,\n          message: `Action ${input.action} completed`\n        };\n    }\n  }\n});\n\n// 6. Service Mesh Configuration Tool\nconst serviceMeshConfigTool = createTool({\n  id: 'service-mesh-config',\n  name: 'Service Mesh Configurator',\n  description: 'Manages service mesh configuration including traffic routing, load balancing, and observability',\n  inputSchema: z.object({\n    action: z.enum(['configure-routing', 'set-load-balancer', 'enable-tracing', 'apply-policy']),\n    service: z.string(),\n    config: z.object({\n      routing: z.object({\n        version: z.string().optional(),\n        weight: z.number().min(0).max(100).optional(),\n        headers: z.record(z.string()).optional()\n      }).optional(),\n      loadBalancer: z.enum(['round-robin', 'least-request', 'random', 'consistent-hash']).optional(),\n      tracing: z.object({\n        enabled: z.boolean(),\n        samplingRate: z.number().min(0).max(1)\n      }).optional(),\n      policy: z.object({\n        type: z.enum(['retry', 'timeout', 'circuit-breaker', 'rate-limit']),\n        settings: z.record(z.any())\n      }).optional()\n    })\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    configId: z.string(),\n    appliedConfig: z.object({\n      service: z.string(),\n      routing: z.any().optional(),\n      loadBalancer: z.string().optional(),\n      tracing: z.any().optional(),\n      policies: z.array(z.string())\n    }),\n    validationErrors: z.array(z.string()).optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    const configId = `cfg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    // Simulate configuration validation\n    const validationErrors = [];\n    if (input.config.routing?.weight && (input.config.routing.weight < 0 || input.config.routing.weight > 100)) {\n      validationErrors.push('Routing weight must be between 0 and 100');\n    }\n    \n    if (validationErrors.length > 0) {\n      return {\n        success: false,\n        configId,\n        appliedConfig: {\n          service: input.service,\n          policies: []\n        },\n        validationErrors,\n        message: 'Configuration validation failed'\n      };\n    }\n    \n    // Simulate successful configuration\n    const appliedConfig = {\n      service: input.service,\n      routing: input.config.routing,\n      loadBalancer: input.config.loadBalancer,\n      tracing: input.config.tracing,\n      policies: input.config.policy ? [input.config.policy.type] : []\n    };\n    \n    return {\n      success: true,\n      configId,\n      appliedConfig,\n      message: `Service mesh configuration applied for ${input.service}`\n    };\n  }\n});\n\n// 7. Protocol Translation Tool\nconst protocolTranslationTool = createTool({\n  id: 'protocol-translation',\n  name: 'Protocol Translator',\n  description: 'Translates between different protocols (HTTP, WebSocket, gRPC, GraphQL)',\n  inputSchema: z.object({\n    sourceProtocol: z.enum(['http', 'websocket', 'grpc', 'graphql', 'mqtt']),\n    targetProtocol: z.enum(['http', 'websocket', 'grpc', 'graphql', 'mqtt']),\n    payload: z.any(),\n    metadata: z.object({\n      headers: z.record(z.string()).optional(),\n      method: z.string().optional(),\n      path: z.string().optional(),\n      query: z.record(z.string()).optional()\n    }).optional(),\n    options: z.object({\n      preserveHeaders: z.boolean().default(true),\n      validateSchema: z.boolean().default(true),\n      transformResponse: z.boolean().default(false)\n    }).optional()\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    translatedPayload: z.any(),\n    translatedMetadata: z.object({\n      headers: z.record(z.string()).optional(),\n      method: z.string().optional(),\n      path: z.string().optional(),\n      additionalFields: z.record(z.any()).optional()\n    }),\n    transformations: z.array(z.string()),\n    warnings: z.array(z.string()).optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    const transformations = [];\n    const warnings = [];\n    \n    // Simulate protocol translation logic\n    let translatedPayload = input.payload;\n    const translatedMetadata = { ...input.metadata };\n    \n    // HTTP to gRPC translation\n    if (input.sourceProtocol === 'http' && input.targetProtocol === 'grpc') {\n      transformations.push('Converted JSON to Protocol Buffers');\n      transformations.push('Mapped HTTP headers to gRPC metadata');\n      translatedMetadata.additionalFields = {\n        grpcMethod: input.metadata?.path?.replace(/\\//g, '.') || 'UnknownMethod'\n      };\n    }\n    \n    // GraphQL to REST translation\n    if (input.sourceProtocol === 'graphql' && input.targetProtocol === 'http') {\n      transformations.push('Converted GraphQL query to REST endpoints');\n      transformations.push('Mapped GraphQL variables to query parameters');\n      translatedMetadata.method = 'POST';\n      translatedMetadata.path = '/api/graphql-compat';\n    }\n    \n    // WebSocket to MQTT translation\n    if (input.sourceProtocol === 'websocket' && input.targetProtocol === 'mqtt') {\n      transformations.push('Converted WebSocket frames to MQTT messages');\n      transformations.push('Mapped WebSocket events to MQTT topics');\n      translatedMetadata.additionalFields = {\n        mqttTopic: 'ws-bridge/messages',\n        qos: 1\n      };\n    }\n    \n    // Add warnings for potential data loss\n    if (input.sourceProtocol === 'grpc' && input.targetProtocol === 'http') {\n      warnings.push('Some gRPC streaming features may not be fully supported in HTTP');\n    }\n    \n    return {\n      success: true,\n      translatedPayload,\n      translatedMetadata,\n      transformations,\n      warnings: warnings.length > 0 ? warnings : undefined,\n      message: `Successfully translated from ${input.sourceProtocol} to ${input.targetProtocol}`\n    };\n  }\n});\n\n// 8. Schema Validation Tool\nconst schemaValidationTool = createTool({\n  id: 'schema-validation',\n  name: 'Schema Validator',\n  description: 'Validates data against various schema formats (JSON Schema, OpenAPI, GraphQL, Protobuf)',\n  inputSchema: z.object({\n    schemaType: z.enum(['json-schema', 'openapi', 'graphql', 'protobuf', 'avro']),\n    schema: z.any(),\n    data: z.any(),\n    options: z.object({\n      strictMode: z.boolean().default(false),\n      coerceTypes: z.boolean().default(true),\n      removeAdditional: z.boolean().default(false),\n      validateFormats: z.boolean().default(true)\n    }).optional(),\n    action: z.enum(['validate', 'generate-sample', 'convert-schema'])\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    valid: z.boolean().optional(),\n    errors: z.array(z.object({\n      path: z.string(),\n      message: z.string(),\n      keyword: z.string().optional(),\n      params: z.record(z.any()).optional()\n    })).optional(),\n    warnings: z.array(z.string()).optional(),\n    sampleData: z.any().optional(),\n    convertedSchema: z.any().optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    switch (input.action) {\n      case 'validate': {\n        // Simulate schema validation\n        const errors = [];\n        const warnings = [];\n        \n        // Simulate validation logic based on schema type\n        if (input.schemaType === 'json-schema') {\n          // Check required fields\n          if (input.schema.required && Array.isArray(input.schema.required)) {\n            for (const field of input.schema.required) {\n              if (!(field in input.data)) {\n                errors.push({\n                  path: `/${field}`,\n                  message: `Missing required field: ${field}`,\n                  keyword: 'required'\n                });\n              }\n            }\n          }\n          \n          // Check types\n          if (input.schema.properties) {\n            for (const [key, propSchema] of Object.entries(input.schema.properties)) {\n              if (key in input.data && propSchema.type) {\n                const actualType = typeof input.data[key];\n                const expectedType = propSchema.type;\n                \n                if (actualType !== expectedType && !input.options?.coerceTypes) {\n                  errors.push({\n                    path: `/${key}`,\n                    message: `Type mismatch: expected ${expectedType}, got ${actualType}`,\n                    keyword: 'type',\n                    params: { expected: expectedType, actual: actualType }\n                  });\n                }\n              }\n            }\n          }\n        }\n        \n        if (input.options?.strictMode && !input.schema.additionalProperties) {\n          warnings.push('Schema does not allow additional properties in strict mode');\n        }\n        \n        return {\n          success: true,\n          valid: errors.length === 0,\n          errors: errors.length > 0 ? errors : undefined,\n          warnings: warnings.length > 0 ? warnings : undefined,\n          message: errors.length === 0 ? 'Validation passed' : `Validation failed with ${errors.length} errors`\n        };\n      }\n      \n      case 'generate-sample': {\n        // Generate sample data based on schema\n        const sampleData = {};\n        \n        if (input.schemaType === 'json-schema' && input.schema.properties) {\n          for (const [key, propSchema] of Object.entries(input.schema.properties)) {\n            switch (propSchema.type) {\n              case 'string':\n                sampleData[key] = propSchema.example || 'sample string';\n                break;\n              case 'number':\n                sampleData[key] = propSchema.example || 42;\n                break;\n              case 'boolean':\n                sampleData[key] = propSchema.example || true;\n                break;\n              case 'array':\n                sampleData[key] = propSchema.example || ['item1', 'item2'];\n                break;\n              case 'object':\n                sampleData[key] = propSchema.example || { nested: 'value' };\n                break;\n              default:\n                sampleData[key] = null;\n            }\n          }\n        }\n        \n        return {\n          success: true,\n          sampleData,\n          message: 'Sample data generated successfully'\n        };\n      }\n      \n      case 'convert-schema': {\n        // Simulate schema conversion\n        const convertedSchema = {\n          ...input.schema,\n          converted: true,\n          originalType: input.schemaType,\n          conversionTimestamp: new Date().toISOString()\n        };\n        \n        return {\n          success: true,\n          convertedSchema,\n          message: `Schema converted from ${input.schemaType}`\n        };\n      }\n      \n      default:\n        return {\n          success: false,\n          message: 'Unknown action'\n        };\n    }\n  }\n});\n\n// 9. Rate Limiting Tool\nconst rateLimitingTool = createTool({\n  id: 'rate-limiting',\n  name: 'Rate Limiter',\n  description: 'Implements various rate limiting strategies (token bucket, sliding window, fixed window)',\n  inputSchema: z.object({\n    action: z.enum(['check', 'consume', 'reset', 'configure', 'stats']),\n    identifier: z.string(),\n    resource: z.string(),\n    config: z.object({\n      strategy: z.enum(['token-bucket', 'sliding-window', 'fixed-window', 'leaky-bucket']),\n      limit: z.number(),\n      windowMs: z.number(),\n      burstLimit: z.number().optional()\n    }).optional(),\n    tokens: z.number().default(1)\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    allowed: z.boolean(),\n    remaining: z.number(),\n    resetAt: z.string(),\n    retryAfter: z.number().optional(),\n    stats: z.object({\n      totalRequests: z.number(),\n      allowedRequests: z.number(),\n      deniedRequests: z.number(),\n      currentWindow: z.number()\n    }).optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    const bucketKey = `${input.identifier}:${input.resource}`;\n    \n    switch (input.action) {\n      case 'check':\n      case 'consume': {\n        // Get or create rate limit bucket\n        let bucket = rateLimitBuckets.get(bucketKey);\n        if (!bucket) {\n          bucket = {\n            tokens: input.config?.limit || 100,\n            limit: input.config?.limit || 100,\n            windowStart: Date.now(),\n            windowMs: input.config?.windowMs || 60000,\n            requests: [],\n            stats: {\n              totalRequests: 0,\n              allowedRequests: 0,\n              deniedRequests: 0\n            }\n          };\n          rateLimitBuckets.set(bucketKey, bucket);\n        }\n        \n        // Clean old requests for sliding window\n        const now = Date.now();\n        bucket.requests = bucket.requests.filter(time => now - time < bucket.windowMs);\n        \n        // Check if request is allowed\n        const allowed = bucket.requests.length + input.tokens <= bucket.limit;\n        \n        if (input.action === 'consume' && allowed) {\n          for (let i = 0; i < input.tokens; i++) {\n            bucket.requests.push(now);\n          }\n          bucket.stats.allowedRequests += input.tokens;\n        } else if (input.action === 'consume') {\n          bucket.stats.deniedRequests += input.tokens;\n        }\n        \n        bucket.stats.totalRequests += input.tokens;\n        \n        const remaining = Math.max(0, bucket.limit - bucket.requests.length);\n        const resetAt = new Date(now + bucket.windowMs).toISOString();\n        const retryAfter = allowed ? undefined : Math.ceil(bucket.windowMs / 1000);\n        \n        return {\n          success: true,\n          allowed,\n          remaining,\n          resetAt,\n          retryAfter,\n          message: allowed ? 'Request allowed' : 'Rate limit exceeded'\n        };\n      }\n      \n      case 'stats': {\n        const bucket = rateLimitBuckets.get(bucketKey);\n        if (!bucket) {\n          return {\n            success: false,\n            allowed: false,\n            remaining: 0,\n            resetAt: new Date().toISOString(),\n            message: 'No rate limit data found'\n          };\n        }\n        \n        return {\n          success: true,\n          allowed: true,\n          remaining: bucket.limit - bucket.requests.length,\n          resetAt: new Date(Date.now() + bucket.windowMs).toISOString(),\n          stats: {\n            ...bucket.stats,\n            currentWindow: bucket.requests.length\n          },\n          message: 'Rate limit statistics retrieved'\n        };\n      }\n      \n      case 'reset': {\n        rateLimitBuckets.delete(bucketKey);\n        return {\n          success: true,\n          allowed: true,\n          remaining: input.config?.limit || 100,\n          resetAt: new Date().toISOString(),\n          message: 'Rate limit reset successfully'\n        };\n      }\n      \n      default:\n        return {\n          success: true,\n          allowed: true,\n          remaining: 0,\n          resetAt: new Date().toISOString(),\n          message: `Action ${input.action} completed`\n        };\n    }\n  }\n});\n\n// 10. Circuit Breaking Tool\nconst circuitBreakingTool = createTool({\n  id: 'circuit-breaking',\n  name: 'Circuit Breaker',\n  description: 'Implements circuit breaker pattern for fault tolerance and system stability',\n  inputSchema: z.object({\n    action: z.enum(['check', 'record-success', 'record-failure', 'reset', 'force-open', 'force-close']),\n    service: z.string(),\n    config: z.object({\n      failureThreshold: z.number().default(5),\n      successThreshold: z.number().default(2),\n      timeout: z.number().default(60000),\n      halfOpenRequests: z.number().default(3)\n    }).optional(),\n    error: z.object({\n      type: z.string(),\n      message: z.string(),\n      statusCode: z.number().optional()\n    }).optional()\n  }),\n  outputSchema: z.object({\n    success: z.boolean(),\n    state: z.enum(['closed', 'open', 'half-open']),\n    canProceed: z.boolean(),\n    stats: z.object({\n      failures: z.number(),\n      successes: z.number(),\n      lastFailureTime: z.string().optional(),\n      lastSuccessTime: z.string().optional(),\n      totalRequests: z.number()\n    }),\n    nextRetry: z.string().optional(),\n    message: z.string()\n  }),\n  execute: async (input) => {\n    // Get or create circuit breaker\n    let breaker = circuitBreakers.get(input.service);\n    if (!breaker) {\n      breaker = {\n        state: 'closed',\n        failures: 0,\n        successes: 0,\n        lastFailureTime: null,\n        lastSuccessTime: null,\n        totalRequests: 0,\n        config: input.config || {\n          failureThreshold: 5,\n          successThreshold: 2,\n          timeout: 60000,\n          halfOpenRequests: 3\n        },\n        halfOpenAttempts: 0\n      };\n      circuitBreakers.set(input.service, breaker);\n    }\n    \n    const now = Date.now();\n    \n    switch (input.action) {\n      case 'check': {\n        // Check if circuit is open and timeout has passed\n        if (breaker.state === 'open' && breaker.lastFailureTime) {\n          const timeSinceFailure = now - new Date(breaker.lastFailureTime).getTime();\n          if (timeSinceFailure >= breaker.config.timeout) {\n            breaker.state = 'half-open';\n            breaker.halfOpenAttempts = 0;\n          }\n        }\n        \n        const canProceed = breaker.state !== 'open';\n        const nextRetry = breaker.state === 'open' && breaker.lastFailureTime\n          ? new Date(new Date(breaker.lastFailureTime).getTime() + breaker.config.timeout).toISOString()\n          : undefined;\n        \n        return {\n          success: true,\n          state: breaker.state,\n          canProceed,\n          stats: {\n            failures: breaker.failures,\n            successes: breaker.successes,\n            lastFailureTime: breaker.lastFailureTime,\n            lastSuccessTime: breaker.lastSuccessTime,\n            totalRequests: breaker.totalRequests\n          },\n          nextRetry,\n          message: `Circuit is ${breaker.state}, ${canProceed ? 'request allowed' : 'request blocked'}`\n        };\n      }\n      \n      case 'record-success': {\n        breaker.totalRequests++;\n        breaker.lastSuccessTime = new Date().toISOString();\n        \n        if (breaker.state === 'half-open') {\n          breaker.successes++;\n          if (breaker.successes >= breaker.config.successThreshold) {\n            breaker.state = 'closed';\n            breaker.failures = 0;\n            breaker.successes = 0;\n          }\n        } else if (breaker.state === 'closed') {\n          breaker.failures = 0; // Reset failure count on success\n        }\n        \n        return {\n          success: true,\n          state: breaker.state,\n          canProceed: true,\n          stats: {\n            failures: breaker.failures,\n            successes: breaker.successes,\n            lastFailureTime: breaker.lastFailureTime,\n            lastSuccessTime: breaker.lastSuccessTime,\n            totalRequests: breaker.totalRequests\n          },\n          message: 'Success recorded'\n        };\n      }\n      \n      case 'record-failure': {\n        breaker.totalRequests++;\n        breaker.failures++;\n        breaker.lastFailureTime = new Date().toISOString();\n        \n        if (breaker.state === 'closed' && breaker.failures >= breaker.config.failureThreshold) {\n          breaker.state = 'open';\n        } else if (breaker.state === 'half-open') {\n          breaker.state = 'open';\n          breaker.successes = 0;\n        }\n        \n        return {\n          success: true,\n          state: breaker.state,\n          canProceed: breaker.state !== 'open',\n          stats: {\n            failures: breaker.failures,\n            successes: breaker.successes,\n            lastFailureTime: breaker.lastFailureTime,\n            lastSuccessTime: breaker.lastSuccessTime,\n            totalRequests: breaker.totalRequests\n          },\n          message: `Failure recorded${breaker.state === 'open' ? ', circuit opened' : ''}`\n        };\n      }\n      \n      case 'force-open': {\n        breaker.state = 'open';\n        breaker.lastFailureTime = new Date().toISOString();\n        \n        return {\n          success: true,\n          state: breaker.state,\n          canProceed: false,\n          stats: {\n            failures: breaker.failures,\n            successes: breaker.successes,\n            lastFailureTime: breaker.lastFailureTime,\n            lastSuccessTime: breaker.lastSuccessTime,\n            totalRequests: breaker.totalRequests\n          },\n          message: 'Circuit forced open'\n        };\n      }\n      \n      case 'force-close': {\n        breaker.state = 'closed';\n        breaker.failures = 0;\n        breaker.successes = 0;\n        \n        return {\n          success: true,\n          state: breaker.state,\n          canProceed: true,\n          stats: {\n            failures: breaker.failures,\n            successes: breaker.successes,\n            lastFailureTime: breaker.lastFailureTime,\n            lastSuccessTime: breaker.lastSuccessTime,\n            totalRequests: breaker.totalRequests\n          },\n          message: 'Circuit forced closed'\n        };\n      }\n      \n      case 'reset': {\n        circuitBreakers.delete(input.service);\n        \n        return {\n          success: true,\n          state: 'closed',\n          canProceed: true,\n          stats: {\n            failures: 0,\n            successes: 0,\n            lastFailureTime: undefined,\n            lastSuccessTime: undefined,\n            totalRequests: 0\n          },\n          message: 'Circuit breaker reset'\n        };\n      }\n      \n      default:\n        return {\n          success: false,\n          state: breaker.state,\n          canProceed: false,\n          stats: {\n            failures: breaker.failures,\n            successes: breaker.successes,\n            lastFailureTime: breaker.lastFailureTime,\n            lastSuccessTime: breaker.lastSuccessTime,\n            totalRequests: breaker.totalRequests\n          },\n          message: 'Unknown action'\n        };\n    }\n  }\n});\n\n// Export all integration tools\nexport const integrationTools = {\n  apiIntegration: apiIntegrationTool,\n  webhookManagement: webhookManagementTool,\n  eventStreaming: eventStreamingTool,\n  dataSync: dataSynchronizationTool,\n  messageQueue: messageQueuingTool,\n  serviceMesh: serviceMeshConfigTool,\n  protocolTranslation: protocolTranslationTool,\n  schemaValidation: schemaValidationTool,\n  rateLimit: rateLimitingTool,\n  circuitBreaker: circuitBreakingTool\n};"],"names":[],"mappings":"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"}