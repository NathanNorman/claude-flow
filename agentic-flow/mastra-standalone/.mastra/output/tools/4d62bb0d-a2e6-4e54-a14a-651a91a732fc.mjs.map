{"version":3,"file":"4d62bb0d-a2e6-4e54-a14a-651a91a732fc.mjs","sources":["../../../src/mastra/tools/workflow-automation-tools.js"],"sourcesContent":["import { createTool } from '@mastra/core';\nimport { z } from 'zod';\n\n// In-memory storage for workflows, pipelines, and automation rules\nconst workflowStore = new Map();\nconst pipelineStore = new Map();\nconst automationRules = new Map();\nconst eventTriggers = new Map();\nconst workflowTemplates = new Map();\nconst executionHistory = new Map();\nconst scheduledJobs = new Map();\n\n// Helper functions for workflow execution\nconst executeWorkflowStep = async (step, context) => {\n  const { type, action, params } = step;\n  const startTime = Date.now();\n  \n  try {\n    let result;\n    switch (type) {\n      case 'script':\n        result = await eval(`(async () => { ${action} })()`);\n        break;\n      case 'condition':\n        result = await eval(`(${action})`);\n        break;\n      case 'parallel':\n        result = await Promise.all(\n          step.tasks.map(task => executeWorkflowStep(task, context))\n        );\n        break;\n      case 'sequential':\n        result = [];\n        for (const task of step.tasks) {\n          result.push(await executeWorkflowStep(task, context));\n        }\n        break;\n      default:\n        result = { type, action, params };\n    }\n    \n    return {\n      stepId: step.id,\n      status: 'completed',\n      result,\n      duration: Date.now() - startTime\n    };\n  } catch (error) {\n    return {\n      stepId: step.id,\n      status: 'failed',\n      error: error.message,\n      duration: Date.now() - startTime\n    };\n  }\n};\n\nconst validateWorkflowDAG = (steps) => {\n  const graph = new Map();\n  steps.forEach(step => {\n    graph.set(step.id, step.dependencies || []);\n  });\n  \n  const visited = new Set();\n  const visiting = new Set();\n  \n  const hasCycle = (node) => {\n    if (visiting.has(node)) return true;\n    if (visited.has(node)) return false;\n    \n    visiting.add(node);\n    const deps = graph.get(node) || [];\n    for (const dep of deps) {\n      if (hasCycle(dep)) return true;\n    }\n    visiting.delete(node);\n    visited.add(node);\n    return false;\n  };\n  \n  for (const node of graph.keys()) {\n    if (hasCycle(node)) {\n      throw new Error('Workflow contains circular dependencies');\n    }\n  }\n  \n  return true;\n};\n\n// Tool: Create custom workflows\nexport const workflowCreate = createTool({\n  name: 'workflowCreate',\n  description: 'Create custom workflows with steps and dependencies',\n  inputSchema: z.object({\n    name: z.string().describe('Workflow name'),\n    description: z.string().optional().describe('Workflow description'),\n    steps: z.array(z.object({\n      id: z.string().describe('Step identifier'),\n      name: z.string().describe('Step name'),\n      type: z.enum(['script', 'condition', 'parallel', 'sequential']).describe('Step type'),\n      action: z.string().optional().describe('Action to execute'),\n      params: z.record(z.any()).optional().describe('Step parameters'),\n      dependencies: z.array(z.string()).optional().describe('Step dependencies'),\n      tasks: z.array(z.any()).optional().describe('Sub-tasks for parallel/sequential steps')\n    })).describe('Workflow steps'),\n    triggers: z.array(z.object({\n      type: z.enum(['manual', 'schedule', 'event', 'webhook']).describe('Trigger type'),\n      config: z.record(z.any()).describe('Trigger configuration')\n    })).optional().describe('Workflow triggers'),\n    config: z.object({\n      timeout: z.number().optional().describe('Workflow timeout in milliseconds'),\n      retries: z.number().optional().describe('Number of retries on failure'),\n      notifications: z.boolean().optional().describe('Enable notifications')\n    }).optional().describe('Workflow configuration')\n  }),\n  execute: async ({ name, description, steps, triggers = [], config = {} }) => {\n    try {\n      // Validate workflow DAG\n      validateWorkflowDAG(steps);\n      \n      const workflowId = `wf_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const workflow = {\n        id: workflowId,\n        name,\n        description,\n        steps,\n        triggers,\n        config: {\n          timeout: config.timeout || 3600000, // 1 hour default\n          retries: config.retries || 0,\n          notifications: config.notifications || false\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        version: 1,\n        status: 'active'\n      };\n      \n      workflowStore.set(workflowId, workflow);\n      \n      // Setup triggers if specified\n      if (triggers.length > 0) {\n        triggers.forEach(trigger => {\n          if (trigger.type === 'schedule') {\n            // Setup scheduled execution\n            const jobId = `job_${workflowId}_${Date.now()}`;\n            scheduledJobs.set(jobId, {\n              workflowId,\n              schedule: trigger.config.cron,\n              nextRun: trigger.config.nextRun\n            });\n          } else if (trigger.type === 'event') {\n            // Register event trigger\n            const eventName = trigger.config.eventName;\n            if (!eventTriggers.has(eventName)) {\n              eventTriggers.set(eventName, []);\n            }\n            eventTriggers.get(eventName).push(workflowId);\n          }\n        });\n      }\n      \n      return {\n        success: true,\n        workflowId,\n        workflow,\n        message: `Workflow '${name}' created successfully`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Execute workflows with parameters\nexport const workflowExecute = createTool({\n  name: 'workflowExecute',\n  description: 'Execute workflows with parameters and track execution',\n  inputSchema: z.object({\n    workflowId: z.string().describe('Workflow ID to execute'),\n    params: z.record(z.any()).optional().describe('Execution parameters'),\n    mode: z.enum(['sync', 'async']).optional().describe('Execution mode'),\n    context: z.record(z.any()).optional().describe('Execution context')\n  }),\n  execute: async ({ workflowId, params = {}, mode = 'sync', context = {} }) => {\n    try {\n      const workflow = workflowStore.get(workflowId);\n      if (!workflow) {\n        throw new Error(`Workflow ${workflowId} not found`);\n      }\n      \n      const executionId = `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const execution = {\n        id: executionId,\n        workflowId,\n        params,\n        context,\n        startTime: new Date().toISOString(),\n        status: 'running',\n        steps: []\n      };\n      \n      executionHistory.set(executionId, execution);\n      \n      // Execute workflow based on mode\n      const executeWorkflow = async () => {\n        const results = [];\n        const stepResults = new Map();\n        \n        // Execute steps based on dependencies\n        const executeStep = async (step) => {\n          // Check if dependencies are completed\n          if (step.dependencies) {\n            for (const dep of step.dependencies) {\n              const depResult = stepResults.get(dep);\n              if (!depResult || depResult.status !== 'completed') {\n                throw new Error(`Dependency ${dep} not satisfied`);\n              }\n            }\n          }\n          \n          const result = await executeWorkflowStep(step, { params, context, results: stepResults });\n          stepResults.set(step.id, result);\n          results.push(result);\n          return result;\n        };\n        \n        // Execute steps in dependency order\n        const executed = new Set();\n        while (executed.size < workflow.steps.length) {\n          const readySteps = workflow.steps.filter(step => {\n            if (executed.has(step.id)) return false;\n            if (!step.dependencies) return true;\n            return step.dependencies.every(dep => executed.has(dep));\n          });\n          \n          if (readySteps.length === 0) {\n            throw new Error('No executable steps found - possible circular dependency');\n          }\n          \n          // Execute ready steps in parallel\n          await Promise.all(readySteps.map(async step => {\n            await executeStep(step);\n            executed.add(step.id);\n          }));\n        }\n        \n        execution.steps = results;\n        execution.endTime = new Date().toISOString();\n        execution.status = results.every(r => r.status === 'completed') ? 'completed' : 'failed';\n        execution.duration = Date.now() - Date.parse(execution.startTime);\n        \n        return execution;\n      };\n      \n      if (mode === 'async') {\n        executeWorkflow().catch(error => {\n          execution.status = 'failed';\n          execution.error = error.message;\n          execution.endTime = new Date().toISOString();\n        });\n        \n        return {\n          success: true,\n          executionId,\n          status: 'started',\n          message: 'Workflow execution started asynchronously'\n        };\n      } else {\n        const result = await executeWorkflow();\n        return {\n          success: true,\n          executionId,\n          execution: result,\n          summary: {\n            totalSteps: result.steps.length,\n            completedSteps: result.steps.filter(s => s.status === 'completed').length,\n            failedSteps: result.steps.filter(s => s.status === 'failed').length,\n            duration: result.duration\n          }\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Schedule workflow execution\nexport const workflowSchedule = createTool({\n  name: 'workflowSchedule',\n  description: 'Schedule workflow execution with cron expressions or specific times',\n  inputSchema: z.object({\n    workflowId: z.string().describe('Workflow ID to schedule'),\n    schedule: z.object({\n      type: z.enum(['cron', 'once', 'interval']).describe('Schedule type'),\n      expression: z.string().optional().describe('Cron expression for cron type'),\n      at: z.string().optional().describe('ISO date for once type'),\n      interval: z.number().optional().describe('Interval in milliseconds'),\n      timezone: z.string().optional().describe('Timezone for scheduling')\n    }).describe('Schedule configuration'),\n    params: z.record(z.any()).optional().describe('Default parameters for execution'),\n    enabled: z.boolean().optional().describe('Enable/disable schedule')\n  }),\n  execute: async ({ workflowId, schedule, params = {}, enabled = true }) => {\n    try {\n      const workflow = workflowStore.get(workflowId);\n      if (!workflow) {\n        throw new Error(`Workflow ${workflowId} not found`);\n      }\n      \n      const scheduleId = `sched_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const scheduledJob = {\n        id: scheduleId,\n        workflowId,\n        schedule,\n        params,\n        enabled,\n        createdAt: new Date().toISOString(),\n        lastRun: null,\n        nextRun: null,\n        runCount: 0\n      };\n      \n      // Calculate next run time based on schedule type\n      if (schedule.type === 'once' && schedule.at) {\n        scheduledJob.nextRun = schedule.at;\n      } else if (schedule.type === 'interval' && schedule.interval) {\n        scheduledJob.nextRun = new Date(Date.now() + schedule.interval).toISOString();\n      } else if (schedule.type === 'cron' && schedule.expression) {\n        // Simple cron parser (would use a library in production)\n        scheduledJob.nextRun = new Date(Date.now() + 60000).toISOString(); // Next minute for demo\n      }\n      \n      scheduledJobs.set(scheduleId, scheduledJob);\n      \n      return {\n        success: true,\n        scheduleId,\n        schedule: scheduledJob,\n        message: `Workflow scheduled successfully`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Create CI/CD pipelines\nexport const pipelineCreate = createTool({\n  name: 'pipelineCreate',\n  description: 'Create CI/CD pipelines with stages and jobs',\n  inputSchema: z.object({\n    name: z.string().describe('Pipeline name'),\n    config: z.object({\n      trigger: z.object({\n        branches: z.array(z.string()).optional().describe('Trigger branches'),\n        events: z.array(z.string()).optional().describe('Trigger events'),\n        paths: z.array(z.string()).optional().describe('Trigger paths')\n      }).optional().describe('Pipeline triggers'),\n      stages: z.array(z.object({\n        name: z.string().describe('Stage name'),\n        jobs: z.array(z.object({\n          name: z.string().describe('Job name'),\n          image: z.string().optional().describe('Docker image'),\n          commands: z.array(z.string()).describe('Commands to execute'),\n          environment: z.record(z.string()).optional().describe('Environment variables'),\n          artifacts: z.array(z.string()).optional().describe('Artifacts to save'),\n          cache: z.array(z.string()).optional().describe('Cache paths')\n        })).describe('Stage jobs'),\n        condition: z.string().optional().describe('Stage condition'),\n        parallel: z.boolean().optional().describe('Run jobs in parallel')\n      })).describe('Pipeline stages'),\n      environment: z.record(z.string()).optional().describe('Global environment'),\n      timeout: z.number().optional().describe('Pipeline timeout in minutes')\n    }).describe('Pipeline configuration')\n  }),\n  execute: async ({ name, config }) => {\n    try {\n      const pipelineId = `pipe_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const pipeline = {\n        id: pipelineId,\n        name,\n        config: {\n          ...config,\n          timeout: config.timeout || 60, // 60 minutes default\n          environment: config.environment || {}\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        status: 'active',\n        runs: []\n      };\n      \n      pipelineStore.set(pipelineId, pipeline);\n      \n      // Convert pipeline to workflow for execution\n      const workflowSteps = [];\n      config.stages.forEach((stage, stageIndex) => {\n        if (stage.parallel) {\n          // Create parallel execution step\n          workflowSteps.push({\n            id: `stage_${stageIndex}`,\n            name: stage.name,\n            type: 'parallel',\n            tasks: stage.jobs.map((job, jobIndex) => ({\n              id: `job_${stageIndex}_${jobIndex}`,\n              name: job.name,\n              type: 'script',\n              action: job.commands.join('; '),\n              params: { environment: job.environment, artifacts: job.artifacts }\n            })),\n            dependencies: stageIndex > 0 ? [`stage_${stageIndex - 1}`] : []\n          });\n        } else {\n          // Create sequential execution steps\n          stage.jobs.forEach((job, jobIndex) => {\n            workflowSteps.push({\n              id: `job_${stageIndex}_${jobIndex}`,\n              name: `${stage.name} - ${job.name}`,\n              type: 'script',\n              action: job.commands.join('; '),\n              params: { environment: job.environment, artifacts: job.artifacts },\n              dependencies: stageIndex > 0 || jobIndex > 0 \n                ? [`job_${stageIndex}_${jobIndex - 1}`] \n                : []\n            });\n          });\n        }\n      });\n      \n      // Create associated workflow\n      const workflow = await workflowCreate.execute({\n        name: `Pipeline: ${name}`,\n        description: `CI/CD pipeline workflow for ${name}`,\n        steps: workflowSteps,\n        triggers: config.trigger ? [{\n          type: 'event',\n          config: { eventName: 'pipeline_trigger', ...config.trigger }\n        }] : []\n      });\n      \n      pipeline.workflowId = workflow.workflowId;\n      \n      return {\n        success: true,\n        pipelineId,\n        pipeline,\n        workflowId: workflow.workflowId,\n        message: `Pipeline '${name}' created successfully`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Setup automation rules\nexport const automationSetup = createTool({\n  name: 'automationSetup',\n  description: 'Setup automation rules with conditions and actions',\n  inputSchema: z.object({\n    rules: z.array(z.object({\n      name: z.string().describe('Rule name'),\n      description: z.string().optional().describe('Rule description'),\n      trigger: z.object({\n        type: z.enum(['event', 'condition', 'schedule']).describe('Trigger type'),\n        config: z.record(z.any()).describe('Trigger configuration')\n      }).describe('Rule trigger'),\n      conditions: z.array(z.object({\n        field: z.string().describe('Field to check'),\n        operator: z.enum(['equals', 'contains', 'greater', 'less', 'regex']).describe('Comparison operator'),\n        value: z.any().describe('Value to compare')\n      })).optional().describe('Rule conditions'),\n      actions: z.array(z.object({\n        type: z.enum(['workflow', 'notification', 'webhook', 'script']).describe('Action type'),\n        config: z.record(z.any()).describe('Action configuration')\n      })).describe('Actions to execute'),\n      enabled: z.boolean().optional().describe('Enable/disable rule')\n    })).describe('Automation rules')\n  }),\n  execute: async ({ rules }) => {\n    try {\n      const results = [];\n      \n      for (const rule of rules) {\n        const ruleId = `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        const automationRule = {\n          id: ruleId,\n          ...rule,\n          enabled: rule.enabled !== false,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          executionCount: 0,\n          lastExecution: null\n        };\n        \n        automationRules.set(ruleId, automationRule);\n        \n        // Register event listeners if needed\n        if (rule.trigger.type === 'event') {\n          const eventName = rule.trigger.config.eventName;\n          if (!eventTriggers.has(eventName)) {\n            eventTriggers.set(eventName, []);\n          }\n          eventTriggers.get(eventName).push({ type: 'rule', id: ruleId });\n        }\n        \n        results.push({\n          ruleId,\n          name: rule.name,\n          status: 'created'\n        });\n      }\n      \n      return {\n        success: true,\n        rules: results,\n        summary: {\n          total: rules.length,\n          enabled: rules.filter(r => r.enabled !== false).length,\n          disabled: rules.filter(r => r.enabled === false).length\n        },\n        message: `${rules.length} automation rules created successfully`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Configure event triggers\nexport const triggerSetup = createTool({\n  name: 'triggerSetup',\n  description: 'Configure event triggers for workflows and automations',\n  inputSchema: z.object({\n    events: z.array(z.object({\n      name: z.string().describe('Event name'),\n      source: z.string().optional().describe('Event source'),\n      filter: z.record(z.any()).optional().describe('Event filter criteria')\n    })).describe('Events to listen for'),\n    actions: z.array(z.object({\n      type: z.enum(['workflow', 'automation', 'webhook', 'function']).describe('Action type'),\n      target: z.string().describe('Target ID or URL'),\n      params: z.record(z.any()).optional().describe('Action parameters'),\n      transform: z.string().optional().describe('Data transformation script')\n    })).describe('Actions to trigger'),\n    config: z.object({\n      enabled: z.boolean().optional().describe('Enable/disable trigger'),\n      retries: z.number().optional().describe('Number of retries on failure'),\n      timeout: z.number().optional().describe('Timeout in milliseconds'),\n      rateLimit: z.object({\n        requests: z.number().describe('Number of requests'),\n        window: z.number().describe('Time window in seconds')\n      }).optional().describe('Rate limiting configuration')\n    }).optional().describe('Trigger configuration')\n  }),\n  execute: async ({ events, actions, config = {} }) => {\n    try {\n      const triggerId = `trig_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const trigger = {\n        id: triggerId,\n        events,\n        actions,\n        config: {\n          enabled: config.enabled !== false,\n          retries: config.retries || 3,\n          timeout: config.timeout || 30000,\n          rateLimit: config.rateLimit\n        },\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        stats: {\n          triggered: 0,\n          succeeded: 0,\n          failed: 0,\n          lastTriggered: null\n        }\n      };\n      \n      // Register event mappings\n      events.forEach(event => {\n        if (!eventTriggers.has(event.name)) {\n          eventTriggers.set(event.name, []);\n        }\n        eventTriggers.get(event.name).push({ \n          type: 'trigger', \n          id: triggerId,\n          filter: event.filter \n        });\n      });\n      \n      return {\n        success: true,\n        triggerId,\n        trigger,\n        registeredEvents: events.map(e => e.name),\n        message: `Trigger configured for ${events.length} events with ${actions.length} actions`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Process items in batches\nexport const batchProcess = createTool({\n  name: 'batchProcess',\n  description: 'Process multiple items in configurable batches',\n  inputSchema: z.object({\n    items: z.array(z.any()).describe('Items to process'),\n    operation: z.string().describe('Operation to perform on each item'),\n    batchSize: z.number().optional().describe('Number of items per batch'),\n    parallel: z.boolean().optional().describe('Process batches in parallel'),\n    transform: z.string().optional().describe('Transform function for items'),\n    onError: z.enum(['stop', 'continue', 'retry']).optional().describe('Error handling strategy')\n  }),\n  execute: async ({ items, operation, batchSize = 10, parallel = true, transform, onError = 'continue' }) => {\n    try {\n      const batches = [];\n      for (let i = 0; i < items.length; i += batchSize) {\n        batches.push(items.slice(i, i + batchSize));\n      }\n      \n      const results = {\n        total: items.length,\n        processed: 0,\n        succeeded: 0,\n        failed: 0,\n        batches: batches.length,\n        items: [],\n        errors: []\n      };\n      \n      const processBatch = async (batch, batchIndex) => {\n        const batchResults = [];\n        \n        for (let i = 0; i < batch.length; i++) {\n          const item = batch[i];\n          const itemIndex = batchIndex * batchSize + i;\n          \n          try {\n            // Apply transform if provided\n            const processItem = transform \n              ? await eval(`(${transform})(${JSON.stringify(item)})`)\n              : item;\n            \n            // Execute operation\n            const result = await eval(`(async () => { \n              const item = ${JSON.stringify(processItem)};\n              ${operation}\n            })()`);\n            \n            batchResults.push({\n              index: itemIndex,\n              status: 'success',\n              input: item,\n              output: result\n            });\n            results.succeeded++;\n          } catch (error) {\n            const errorResult = {\n              index: itemIndex,\n              status: 'error',\n              input: item,\n              error: error.message\n            };\n            \n            batchResults.push(errorResult);\n            results.errors.push(errorResult);\n            results.failed++;\n            \n            if (onError === 'stop') {\n              throw new Error(`Batch processing stopped at item ${itemIndex}: ${error.message}`);\n            } else if (onError === 'retry') {\n              // Simple retry logic\n              try {\n                const retryResult = await eval(`(async () => { \n                  const item = ${JSON.stringify(item)};\n                  ${operation}\n                })()`);\n                batchResults[batchResults.length - 1] = {\n                  index: itemIndex,\n                  status: 'success',\n                  input: item,\n                  output: retryResult,\n                  retried: true\n                };\n                results.succeeded++;\n                results.failed--;\n              } catch (retryError) {\n                // Keep original error\n              }\n            }\n          }\n          \n          results.processed++;\n        }\n        \n        return batchResults;\n      };\n      \n      if (parallel) {\n        const batchPromises = batches.map((batch, index) => processBatch(batch, index));\n        const batchResults = await Promise.allSettled(batchPromises);\n        \n        batchResults.forEach((result, index) => {\n          if (result.status === 'fulfilled') {\n            results.items.push(...result.value);\n          } else {\n            results.errors.push({\n              batch: index,\n              error: result.reason.message\n            });\n          }\n        });\n      } else {\n        for (let i = 0; i < batches.length; i++) {\n          const batchResults = await processBatch(batches[i], i);\n          results.items.push(...batchResults);\n        }\n      }\n      \n      return {\n        success: true,\n        results,\n        summary: {\n          totalItems: results.total,\n          processedItems: results.processed,\n          successRate: results.total > 0 ? (results.succeeded / results.total * 100).toFixed(2) + '%' : '0%',\n          failureRate: results.total > 0 ? (results.failed / results.total * 100).toFixed(2) + '%' : '0%',\n          batchCount: batches.length,\n          processingMode: parallel ? 'parallel' : 'sequential'\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Execute tasks in parallel\nexport const parallelExecute = createTool({\n  name: 'parallelExecute',\n  description: 'Execute multiple tasks in parallel with concurrency control',\n  inputSchema: z.object({\n    tasks: z.array(z.object({\n      id: z.string().describe('Task identifier'),\n      name: z.string().describe('Task name'),\n      action: z.string().describe('Task action to execute'),\n      params: z.record(z.any()).optional().describe('Task parameters'),\n      timeout: z.number().optional().describe('Task timeout in milliseconds')\n    })).describe('Tasks to execute'),\n    concurrency: z.number().optional().describe('Maximum concurrent executions'),\n    stopOnError: z.boolean().optional().describe('Stop all tasks if one fails'),\n    timeout: z.number().optional().describe('Overall timeout in milliseconds')\n  }),\n  execute: async ({ tasks, concurrency = 5, stopOnError = false, timeout = 300000 }) => {\n    try {\n      const startTime = Date.now();\n      const results = {\n        total: tasks.length,\n        completed: 0,\n        failed: 0,\n        tasks: []\n      };\n      \n      // Create task queue\n      const taskQueue = [...tasks];\n      const executing = new Map();\n      const completed = [];\n      \n      const executeTask = async (task) => {\n        const taskStart = Date.now();\n        const taskTimeout = task.timeout || timeout;\n        \n        try {\n          // Create timeout promise\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Task timeout')), taskTimeout);\n          });\n          \n          // Execute task action\n          const taskPromise = eval(`(async () => {\n            const params = ${JSON.stringify(task.params || {})};\n            ${task.action}\n          })()`);\n          \n          const result = await Promise.race([taskPromise, timeoutPromise]);\n          \n          return {\n            id: task.id,\n            name: task.name,\n            status: 'completed',\n            result,\n            duration: Date.now() - taskStart\n          };\n        } catch (error) {\n          return {\n            id: task.id,\n            name: task.name,\n            status: 'failed',\n            error: error.message,\n            duration: Date.now() - taskStart\n          };\n        }\n      };\n      \n      const processQueue = async () => {\n        while (taskQueue.length > 0 || executing.size > 0) {\n          // Check overall timeout\n          if (Date.now() - startTime > timeout) {\n            throw new Error('Overall execution timeout exceeded');\n          }\n          \n          // Start new tasks if under concurrency limit\n          while (taskQueue.length > 0 && executing.size < concurrency) {\n            const task = taskQueue.shift();\n            const taskPromise = executeTask(task);\n            executing.set(task.id, taskPromise);\n            \n            taskPromise.then(result => {\n              executing.delete(task.id);\n              completed.push(result);\n              \n              if (result.status === 'completed') {\n                results.completed++;\n              } else {\n                results.failed++;\n                if (stopOnError) {\n                  throw new Error(`Task ${task.id} failed: ${result.error}`);\n                }\n              }\n            }).catch(error => {\n              if (stopOnError) {\n                throw error;\n              }\n            });\n          }\n          \n          // Wait for at least one task to complete\n          if (executing.size > 0) {\n            await Promise.race(Array.from(executing.values()));\n          }\n        }\n      };\n      \n      await processQueue();\n      results.tasks = completed;\n      \n      return {\n        success: true,\n        results,\n        summary: {\n          totalTasks: results.total,\n          completedTasks: results.completed,\n          failedTasks: results.failed,\n          successRate: results.total > 0 ? (results.completed / results.total * 100).toFixed(2) + '%' : '0%',\n          totalDuration: Date.now() - startTime,\n          concurrencyUsed: concurrency\n        }\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Manage workflow templates\nexport const workflowTemplate = createTool({\n  name: 'workflowTemplate',\n  description: 'Manage reusable workflow templates',\n  inputSchema: z.object({\n    action: z.enum(['create', 'list', 'get', 'update', 'delete', 'instantiate']).describe('Action to perform'),\n    templateId: z.string().optional().describe('Template ID for get/update/delete/instantiate'),\n    template: z.object({\n      name: z.string().describe('Template name'),\n      description: z.string().optional().describe('Template description'),\n      category: z.string().optional().describe('Template category'),\n      parameters: z.array(z.object({\n        name: z.string().describe('Parameter name'),\n        type: z.string().describe('Parameter type'),\n        required: z.boolean().optional().describe('Is parameter required'),\n        default: z.any().optional().describe('Default value'),\n        description: z.string().optional().describe('Parameter description')\n      })).optional().describe('Template parameters'),\n      workflow: z.object({\n        steps: z.array(z.any()).describe('Workflow steps'),\n        config: z.record(z.any()).optional().describe('Workflow configuration')\n      }).describe('Workflow definition')\n    }).optional().describe('Template data for create/update'),\n    params: z.record(z.any()).optional().describe('Parameters for instantiation'),\n    filters: z.object({\n      category: z.string().optional().describe('Filter by category'),\n      search: z.string().optional().describe('Search in name/description')\n    }).optional().describe('Filters for list action')\n  }),\n  execute: async ({ action, templateId, template, params, filters }) => {\n    try {\n      switch (action) {\n        case 'create': {\n          if (!template) {\n            throw new Error('Template data required for create action');\n          }\n          \n          const id = `tmpl_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          const newTemplate = {\n            id,\n            ...template,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n            version: 1,\n            usageCount: 0\n          };\n          \n          workflowTemplates.set(id, newTemplate);\n          \n          return {\n            success: true,\n            templateId: id,\n            template: newTemplate,\n            message: `Template '${template.name}' created successfully`\n          };\n        }\n        \n        case 'list': {\n          let templates = Array.from(workflowTemplates.values());\n          \n          // Apply filters\n          if (filters) {\n            if (filters.category) {\n              templates = templates.filter(t => t.category === filters.category);\n            }\n            if (filters.search) {\n              const searchLower = filters.search.toLowerCase();\n              templates = templates.filter(t => \n                t.name.toLowerCase().includes(searchLower) ||\n                (t.description && t.description.toLowerCase().includes(searchLower))\n              );\n            }\n          }\n          \n          return {\n            success: true,\n            templates: templates.map(t => ({\n              id: t.id,\n              name: t.name,\n              description: t.description,\n              category: t.category,\n              parameters: t.parameters,\n              usageCount: t.usageCount,\n              createdAt: t.createdAt\n            })),\n            count: templates.length\n          };\n        }\n        \n        case 'get': {\n          if (!templateId) {\n            throw new Error('Template ID required for get action');\n          }\n          \n          const template = workflowTemplates.get(templateId);\n          if (!template) {\n            throw new Error(`Template ${templateId} not found`);\n          }\n          \n          return {\n            success: true,\n            template\n          };\n        }\n        \n        case 'update': {\n          if (!templateId || !template) {\n            throw new Error('Template ID and data required for update action');\n          }\n          \n          const existing = workflowTemplates.get(templateId);\n          if (!existing) {\n            throw new Error(`Template ${templateId} not found`);\n          }\n          \n          const updated = {\n            ...existing,\n            ...template,\n            id: templateId,\n            updatedAt: new Date().toISOString(),\n            version: existing.version + 1\n          };\n          \n          workflowTemplates.set(templateId, updated);\n          \n          return {\n            success: true,\n            template: updated,\n            message: `Template '${updated.name}' updated successfully`\n          };\n        }\n        \n        case 'delete': {\n          if (!templateId) {\n            throw new Error('Template ID required for delete action');\n          }\n          \n          const template = workflowTemplates.get(templateId);\n          if (!template) {\n            throw new Error(`Template ${templateId} not found`);\n          }\n          \n          workflowTemplates.delete(templateId);\n          \n          return {\n            success: true,\n            message: `Template '${template.name}' deleted successfully`\n          };\n        }\n        \n        case 'instantiate': {\n          if (!templateId) {\n            throw new Error('Template ID required for instantiate action');\n          }\n          \n          const template = workflowTemplates.get(templateId);\n          if (!template) {\n            throw new Error(`Template ${templateId} not found`);\n          }\n          \n          // Validate required parameters\n          if (template.parameters) {\n            const missingParams = template.parameters\n              .filter(p => p.required && !params?.[p.name] && !p.default)\n              .map(p => p.name);\n            \n            if (missingParams.length > 0) {\n              throw new Error(`Missing required parameters: ${missingParams.join(', ')}`);\n            }\n          }\n          \n          // Merge parameters with defaults\n          const mergedParams = {};\n          if (template.parameters) {\n            template.parameters.forEach(p => {\n              mergedParams[p.name] = params?.[p.name] ?? p.default;\n            });\n          }\n          \n          // Replace parameter placeholders in workflow\n          let workflowStr = JSON.stringify(template.workflow);\n          Object.entries(mergedParams).forEach(([key, value]) => {\n            workflowStr = workflowStr.replace(\n              new RegExp(`{{${key}}}`, 'g'),\n              JSON.stringify(value).slice(1, -1)\n            );\n          });\n          \n          const instantiatedWorkflow = JSON.parse(workflowStr);\n          \n          // Create workflow from template\n          const result = await workflowCreate.execute({\n            name: `${template.name} - ${new Date().toISOString()}`,\n            description: `Instantiated from template: ${template.name}`,\n            ...instantiatedWorkflow\n          });\n          \n          // Update usage count\n          template.usageCount++;\n          workflowTemplates.set(templateId, template);\n          \n          return {\n            success: true,\n            workflowId: result.workflowId,\n            templateId,\n            parameters: mergedParams,\n            message: `Workflow created from template '${template.name}'`\n          };\n        }\n        \n        default:\n          throw new Error(`Unknown action: ${action}`);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Tool: Export workflow definitions\nexport const workflowExport = createTool({\n  name: 'workflowExport',\n  description: 'Export workflow definitions in various formats',\n  inputSchema: z.object({\n    workflowId: z.string().describe('Workflow ID to export'),\n    format: z.enum(['json', 'yaml', 'mermaid', 'graphviz']).optional().describe('Export format'),\n    includeExecutions: z.boolean().optional().describe('Include execution history'),\n    includeMetrics: z.boolean().optional().describe('Include performance metrics')\n  }),\n  execute: async ({ workflowId, format = 'json', includeExecutions = false, includeMetrics = false }) => {\n    try {\n      const workflow = workflowStore.get(workflowId);\n      if (!workflow) {\n        throw new Error(`Workflow ${workflowId} not found`);\n      }\n      \n      const exportData = {\n        workflow: { ...workflow },\n        metadata: {\n          exportedAt: new Date().toISOString(),\n          format,\n          version: '1.0'\n        }\n      };\n      \n      // Add execution history if requested\n      if (includeExecutions) {\n        const executions = Array.from(executionHistory.values())\n          .filter(e => e.workflowId === workflowId)\n          .sort((a, b) => new Date(b.startTime) - new Date(a.startTime))\n          .slice(0, 10); // Last 10 executions\n        \n        exportData.executions = executions;\n      }\n      \n      // Add metrics if requested\n      if (includeMetrics) {\n        const executions = Array.from(executionHistory.values())\n          .filter(e => e.workflowId === workflowId);\n        \n        const metrics = {\n          totalExecutions: executions.length,\n          successfulExecutions: executions.filter(e => e.status === 'completed').length,\n          failedExecutions: executions.filter(e => e.status === 'failed').length,\n          averageDuration: executions.length > 0\n            ? executions.reduce((sum, e) => sum + (e.duration || 0), 0) / executions.length\n            : 0,\n          lastExecution: executions.length > 0\n            ? executions.sort((a, b) => new Date(b.startTime) - new Date(a.startTime))[0].startTime\n            : null\n        };\n        \n        exportData.metrics = metrics;\n      }\n      \n      let output;\n      switch (format) {\n        case 'json':\n          output = JSON.stringify(exportData, null, 2);\n          break;\n          \n        case 'yaml':\n          // Simple YAML converter (would use a library in production)\n          output = `# Workflow Export\\n`;\n          output += `workflow:\\n`;\n          output += `  id: ${workflow.id}\\n`;\n          output += `  name: ${workflow.name}\\n`;\n          output += `  description: ${workflow.description || 'N/A'}\\n`;\n          output += `  steps:\\n`;\n          workflow.steps.forEach(step => {\n            output += `    - id: ${step.id}\\n`;\n            output += `      name: ${step.name}\\n`;\n            output += `      type: ${step.type}\\n`;\n            if (step.dependencies) {\n              output += `      dependencies: [${step.dependencies.join(', ')}]\\n`;\n            }\n          });\n          break;\n          \n        case 'mermaid':\n          output = `graph TD\\n`;\n          workflow.steps.forEach(step => {\n            output += `    ${step.id}[\"${step.name}\"]\\n`;\n            if (step.dependencies) {\n              step.dependencies.forEach(dep => {\n                output += `    ${dep} --> ${step.id}\\n`;\n              });\n            }\n          });\n          break;\n          \n        case 'graphviz':\n          output = `digraph workflow {\\n`;\n          output += `    rankdir=TB;\\n`;\n          output += `    node [shape=box];\\n`;\n          workflow.steps.forEach(step => {\n            output += `    \"${step.id}\" [label=\"${step.name}\"];\\n`;\n            if (step.dependencies) {\n              step.dependencies.forEach(dep => {\n                output += `    \"${dep}\" -> \"${step.id}\";\\n`;\n              });\n            }\n          });\n          output += `}\\n`;\n          break;\n      }\n      \n      return {\n        success: true,\n        format,\n        output,\n        workflow: {\n          id: workflow.id,\n          name: workflow.name,\n          stepCount: workflow.steps.length\n        },\n        exportSize: output.length,\n        message: `Workflow exported successfully in ${format} format`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n});\n\n// Export all tools\n// export const workflowAutomationTools = [\n//   workflowCreate,\n//   workflowExecute,\n//   workflowSchedule,\n//   pipelineCreate,\n//   automationSetup,\n//   triggerSetup,\n//   batchProcess,\n//   parallelExecute,\n//   workflowTemplate,\n//   workflowExport\n// ];\n// Export as object for consistency\nexport const workflowAutomationTools = {\n  workflowCreate,\n  workflowExecute,\n  workflowSchedule,\n  pipelineCreate,\n  automationSetup,\n  triggerSetup,\n  batchProcess,\n  parallelExecute,\n  workflowTemplate,\n  workflowExport\n};\n"],"names":["task","error","step","params","context","results","result","i","batch","batchResults","taskPromise","action","template"],"mappings":"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"}