{"version":3,"file":"step-executors.mjs","sources":["../../src/workflows/executors/step-executors.ts"],"sourcesContent":["// Real step executors for workflow engine\nimport { v4 as uuidv4 } from 'uuid';\nimport { EventEmitter } from 'events';\nimport fetch from 'node-fetch';\nimport * as vm from 'vm';\nimport { CoordinatorAgent } from '../../agents/coordinator-agent';\nimport { ExecutorAgent } from '../../agents/executor-agent';\nimport { WorkflowExecution, WorkflowStep, WorkflowLog } from '../workflow-engine';\n\nexport interface StepExecutionContext {\n  execution: WorkflowExecution;\n  step: WorkflowStep;\n  variables: Record<string, any>;\n  results: Record<string, any>;\n  logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => void;\n}\n\nexport interface StepExecutionResult {\n  success: boolean;\n  result?: any;\n  error?: Error;\n  duration: number;\n  logs?: WorkflowLog[];\n}\n\nexport abstract class BaseStepExecutor extends EventEmitter {\n  abstract execute(context: StepExecutionContext): Promise<StepExecutionResult>;\n\n  protected measureExecution<T>(fn: () => Promise<T>): Promise<{ result: T; duration: number }> {\n    const startTime = Date.now();\n    return fn().then(result => ({\n      result,\n      duration: Date.now() - startTime\n    }));\n  }\n}\n\n// Agent Task Executor - Real agent spawning and task execution\nexport class AgentTaskExecutor extends BaseStepExecutor {\n  private coordinatorAgent: CoordinatorAgent;\n  private executorAgent: ExecutorAgent;\n  private activeAgents: Map<string, any> = new Map();\n\n  constructor() {\n    super();\n    this.coordinatorAgent = new CoordinatorAgent('workflow-coordinator');\n    this.executorAgent = new ExecutorAgent('workflow-executor');\n  }\n\n  async execute(context: StepExecutionContext): Promise<StepExecutionResult> {\n    const { step, execution } = context;\n    const { agentType, goal, provider, capabilities, timeout = 30000 } = step.config;\n\n    try {\n      const { result, duration } = await this.measureExecution(async () => {\n        context.logger('info', `Spawning ${agentType} agent for goal: ${goal}`, step.id);\n\n        // Create agent goal\n        const agentGoal = {\n          id: uuidv4(),\n          type: agentType,\n          description: goal,\n          priority: 'high',\n          context: {\n            workflowId: execution.workflowId,\n            executionId: execution.id,\n            stepId: step.id,\n            variables: context.variables\n          }\n        };\n\n        // Execute task through agent system\n        const agentId = await this.spawnAgent(agentType, capabilities);\n        const taskResult = await this.executeAgentTask(agentId, agentGoal, timeout);\n\n        // Clean up agent\n        await this.cleanupAgent(agentId);\n\n        return {\n          agentType,\n          agentId,\n          goal,\n          result: taskResult,\n          timestamp: new Date(),\n          provider\n        };\n      });\n\n      context.logger('info', `Agent task completed successfully`, step.id);\n      return { success: true, result, duration };\n\n    } catch (error) {\n      context.logger('error', `Agent task failed: ${error.message}`, step.id);\n      return { success: false, error: error as Error, duration: 0 };\n    }\n  }\n\n  private async spawnAgent(type: string, capabilities: string[] = []): Promise<string> {\n    const agentId = uuidv4();\n    \n    // Use coordinator to spawn appropriate agent\n    let agent;\n    switch (type) {\n      case 'coordinator':\n        agent = new CoordinatorAgent(`agent-${agentId}`);\n        break;\n      case 'executor':\n        agent = new ExecutorAgent(`agent-${agentId}`);\n        break;\n      default:\n        // Create generic executor with specific capabilities\n        agent = new ExecutorAgent(`agent-${agentId}`);\n    }\n\n    this.activeAgents.set(agentId, agent);\n    this.emit('agent:spawned', { agentId, type, capabilities });\n    \n    return agentId;\n  }\n\n  private async executeAgentTask(agentId: string, goal: any, timeout: number): Promise<any> {\n    const agent = this.activeAgents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    // Set up timeout\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Agent task timeout')), timeout);\n    });\n\n    // Execute goal\n    const executePromise = agent.addGoal(goal).then(() => {\n      // Wait for goal completion\n      return new Promise((resolve) => {\n        const checkCompletion = setInterval(() => {\n          const goalStatus = agent.getGoalStatus?.(goal.id);\n          if (goalStatus === 'completed') {\n            clearInterval(checkCompletion);\n            resolve(agent.getGoalResult?.(goal.id) || { completed: true });\n          } else if (goalStatus === 'failed') {\n            clearInterval(checkCompletion);\n            throw new Error('Agent goal failed');\n          }\n        }, 1000);\n      });\n    });\n\n    return Promise.race([executePromise, timeoutPromise]);\n  }\n\n  private async cleanupAgent(agentId: string): Promise<void> {\n    const agent = this.activeAgents.get(agentId);\n    if (agent) {\n      // Graceful shutdown\n      if (agent.shutdown) {\n        await agent.shutdown();\n      }\n      this.activeAgents.delete(agentId);\n      this.emit('agent:cleanup', { agentId });\n    }\n  }\n}\n\n// Parallel Executor - Real concurrent step execution\nexport class ParallelExecutor extends BaseStepExecutor {\n  async execute(context: StepExecutionContext): Promise<StepExecutionResult> {\n    const { step, execution } = context;\n    const { steps: parallelStepIds, maxConcurrency = 5 } = step.config;\n\n    try {\n      const { result, duration } = await this.measureExecution(async () => {\n        context.logger('info', `Executing ${parallelStepIds.length} steps in parallel`, step.id);\n\n        // Find parallel steps\n        const workflow = await this.getWorkflowDefinition(execution.workflowId);\n        const parallelSteps = parallelStepIds.map((stepId: string) => {\n          const foundStep = workflow.steps.find(s => s.id === stepId);\n          if (!foundStep) {\n            throw new Error(`Parallel step ${stepId} not found`);\n          }\n          return foundStep;\n        });\n\n        // Execute steps with concurrency control\n        const results = await this.executeStepsWithConcurrency(\n          parallelSteps,\n          context,\n          maxConcurrency\n        );\n\n        return {\n          parallelResults: results,\n          totalSteps: parallelSteps.length,\n          successfulSteps: results.filter(r => r.success).length,\n          timestamp: new Date()\n        };\n      });\n\n      context.logger('info', `Parallel execution completed`, step.id);\n      return { success: true, result, duration };\n\n    } catch (error) {\n      context.logger('error', `Parallel execution failed: ${error.message}`, step.id);\n      return { success: false, error: error as Error, duration: 0 };\n    }\n  }\n\n  private async executeStepsWithConcurrency(\n    steps: WorkflowStep[],\n    context: StepExecutionContext,\n    maxConcurrency: number\n  ): Promise<any[]> {\n    const results: any[] = [];\n    const executing = new Set<Promise<any>>();\n\n    for (const step of steps) {\n      // Wait if we've reached max concurrency\n      if (executing.size >= maxConcurrency) {\n        const completed = await Promise.race(executing);\n        executing.delete(completed);\n        results.push(await completed);\n      }\n\n      // Start step execution\n      const stepPromise = this.executeStep(step, context);\n      executing.add(stepPromise);\n    }\n\n    // Wait for remaining steps\n    const remainingResults = await Promise.all(executing);\n    results.push(...remainingResults);\n\n    return results;\n  }\n\n  private async executeStep(step: WorkflowStep, context: StepExecutionContext): Promise<any> {\n    // Delegate to appropriate step executor\n    const executor = StepExecutorFactory.getExecutor(step.type);\n    return executor.execute({\n      ...context,\n      step\n    });\n  }\n\n  private async getWorkflowDefinition(workflowId: string): Promise<any> {\n    // This would typically fetch from persistence layer\n    // For now, return mock workflow\n    return {\n      id: workflowId,\n      steps: []\n    };\n  }\n}\n\n// Condition Executor - Real condition evaluation\nexport class ConditionExecutor extends BaseStepExecutor {\n  async execute(context: StepExecutionContext): Promise<StepExecutionResult> {\n    const { step } = context;\n    const { condition, trueStep, falseStep } = step.config;\n\n    try {\n      const { result, duration } = await this.measureExecution(async () => {\n        context.logger('info', `Evaluating condition: ${condition}`, step.id);\n\n        // Create safe evaluation context\n        const evaluationContext = {\n          variables: context.variables,\n          results: context.results,\n          Math,\n          Date,\n          JSON\n        };\n\n        // Evaluate condition safely\n        const conditionResult = this.evaluateCondition(condition, evaluationContext);\n        const nextStep = conditionResult ? trueStep : falseStep;\n\n        context.logger('info', `Condition evaluated to: ${conditionResult}`, step.id);\n\n        return {\n          condition,\n          result: conditionResult,\n          nextStep,\n          evaluationContext: Object.keys(evaluationContext),\n          timestamp: new Date()\n        };\n      });\n\n      return { success: true, result, duration };\n\n    } catch (error) {\n      context.logger('error', `Condition evaluation failed: ${error.message}`, step.id);\n      return { success: false, error: error as Error, duration: 0 };\n    }\n  }\n\n  private evaluateCondition(condition: string, context: any): boolean {\n    try {\n      // Create secure sandbox for condition evaluation\n      const sandbox = vm.createContext(context);\n      const script = new vm.Script(`(${condition})`);\n      \n      // Run with timeout\n      const result = script.runInContext(sandbox, { timeout: 5000 });\n      return Boolean(result);\n    } catch (error) {\n      throw new Error(`Condition evaluation error: ${error.message}`);\n    }\n  }\n}\n\n// Loop Executor - Real loop iteration\nexport class LoopExecutor extends BaseStepExecutor {\n  async execute(context: StepExecutionContext): Promise<StepExecutionResult> {\n    const { step } = context;\n    const { condition, loopStep, maxIterations = 100, breakCondition } = step.config;\n\n    try {\n      const { result, duration } = await this.measureExecution(async () => {\n        context.logger('info', `Starting loop execution`, step.id);\n\n        const results = [];\n        let iterations = 0;\n        let shouldContinue = true;\n\n        while (shouldContinue && iterations < maxIterations) {\n          // Evaluate loop condition\n          if (condition && !this.evaluateCondition(condition, context)) {\n            break;\n          }\n\n          context.logger('info', `Loop iteration ${iterations + 1}`, step.id);\n\n          // Execute loop step\n          const iterationResult = await this.executeLoopStep(loopStep, context, iterations);\n          results.push(iterationResult);\n\n          // Update context with iteration result\n          context.results[`${step.id}_iteration_${iterations}`] = iterationResult;\n\n          iterations++;\n\n          // Check break condition\n          if (breakCondition && this.evaluateCondition(breakCondition, context)) {\n            context.logger('info', `Loop break condition met`, step.id);\n            break;\n          }\n        }\n\n        context.logger('info', `Loop completed after ${iterations} iterations`, step.id);\n\n        return {\n          iterations,\n          results,\n          completedNormally: iterations < maxIterations,\n          timestamp: new Date()\n        };\n      });\n\n      return { success: true, result, duration };\n\n    } catch (error) {\n      context.logger('error', `Loop execution failed: ${error.message}`, step.id);\n      return { success: false, error: error as Error, duration: 0 };\n    }\n  }\n\n  private evaluateCondition(condition: string, context: StepExecutionContext): boolean {\n    const conditionExecutor = new ConditionExecutor();\n    const dummyStep = { id: 'temp', type: 'condition', name: 'temp', config: { condition } } as WorkflowStep;\n    \n    // This is a simplified evaluation - in production use proper context isolation\n    try {\n      const evalContext = {\n        variables: context.variables,\n        results: context.results\n      };\n      const sandbox = vm.createContext(evalContext);\n      const script = new vm.Script(`(${condition})`);\n      return Boolean(script.runInContext(sandbox, { timeout: 1000 }));\n    } catch {\n      return false;\n    }\n  }\n\n  private async executeLoopStep(stepId: string, context: StepExecutionContext, iteration: number): Promise<any> {\n    // In a real implementation, this would execute the actual step\n    // For now, simulate step execution\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          stepId,\n          iteration,\n          result: `Loop iteration ${iteration} completed`,\n          timestamp: new Date()\n        });\n      }, 100);\n    });\n  }\n}\n\n// HTTP Executor - Real HTTP requests\nexport class HttpExecutor extends BaseStepExecutor {\n  async execute(context: StepExecutionContext): Promise<StepExecutionResult> {\n    const { step } = context;\n    const { \n      method = 'GET', \n      url, \n      headers = {}, \n      body, \n      timeout = 30000,\n      retries = 3,\n      retryDelay = 1000\n    } = step.config;\n\n    try {\n      const { result, duration } = await this.measureExecution(async () => {\n        context.logger('info', `Making ${method} request to ${url}`, step.id);\n\n        // Resolve template variables in URL and body\n        const resolvedUrl = this.resolveTemplate(url, context);\n        const resolvedBody = body ? this.resolveTemplate(JSON.stringify(body), context) : undefined;\n        const resolvedHeaders = this.resolveHeaders(headers, context);\n\n        let lastError: Error | null = null;\n        \n        for (let attempt = 0; attempt < retries; attempt++) {\n          try {\n            const response = await this.makeHttpRequest({\n              method,\n              url: resolvedUrl,\n              headers: resolvedHeaders,\n              body: resolvedBody,\n              timeout\n            });\n\n            context.logger('info', `HTTP request successful (${response.status})`, step.id);\n\n            return {\n              status: response.status,\n              statusText: response.statusText,\n              headers: Object.fromEntries(response.headers.entries()),\n              data: await response.json().catch(() => response.text()),\n              url: resolvedUrl,\n              method,\n              attempt: attempt + 1,\n              timestamp: new Date()\n            };\n          } catch (error) {\n            lastError = error as Error;\n            context.logger('warn', `HTTP request attempt ${attempt + 1} failed: ${error.message}`, step.id);\n            \n            if (attempt < retries - 1) {\n              await new Promise(resolve => setTimeout(resolve, retryDelay));\n            }\n          }\n        }\n\n        throw lastError || new Error('HTTP request failed after all retries');\n      });\n\n      return { success: true, result, duration };\n\n    } catch (error) {\n      context.logger('error', `HTTP request failed: ${error.message}`, step.id);\n      return { success: false, error: error as Error, duration: 0 };\n    }\n  }\n\n  private async makeHttpRequest(options: {\n    method: string;\n    url: string;\n    headers: Record<string, string>;\n    body?: string;\n    timeout: number;\n  }): Promise<any> {\n    const { method, url, headers, body, timeout } = options;\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers\n        },\n        body: body ? body : undefined,\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  }\n\n  private resolveTemplate(template: string, context: StepExecutionContext): string {\n    return template.replace(/\\{\\{(.+?)\\}\\}/g, (match, path) => {\n      const value = this.resolvePath(path.trim(), context);\n      return value !== undefined ? String(value) : match;\n    });\n  }\n\n  private resolveHeaders(headers: Record<string, string>, context: StepExecutionContext): Record<string, string> {\n    const resolved: Record<string, string> = {};\n    for (const [key, value] of Object.entries(headers)) {\n      resolved[key] = this.resolveTemplate(value, context);\n    }\n    return resolved;\n  }\n\n  private resolvePath(path: string, context: StepExecutionContext): any {\n    const segments = path.split('.');\n    let current: any = {\n      variables: context.variables,\n      results: context.results\n    };\n\n    for (const segment of segments) {\n      if (current && typeof current === 'object') {\n        current = current[segment];\n      } else {\n        return undefined;\n      }\n    }\n\n    return current;\n  }\n}\n\n// Script Executor - Secure script execution\nexport class ScriptExecutor extends BaseStepExecutor {\n  async execute(context: StepExecutionContext): Promise<StepExecutionResult> {\n    const { step } = context;\n    const { script, language = 'javascript', timeout = 10000, allowedModules = [] } = step.config;\n\n    try {\n      const { result, duration } = await this.measureExecution(async () => {\n        context.logger('info', `Executing ${language} script`, step.id);\n\n        if (language !== 'javascript') {\n          throw new Error(`Unsupported script language: ${language}`);\n        }\n\n        // Create secure sandbox\n        const sandbox = this.createSecureSandbox(context, allowedModules);\n        \n        // Execute script with timeout\n        const scriptResult = await this.executeScriptInSandbox(script, sandbox, timeout);\n\n        context.logger('info', `Script execution completed`, step.id);\n\n        return {\n          language,\n          result: scriptResult,\n          allowedModules,\n          timestamp: new Date()\n        };\n      });\n\n      return { success: true, result, duration };\n\n    } catch (error) {\n      context.logger('error', `Script execution failed: ${error.message}`, step.id);\n      return { success: false, error: error as Error, duration: 0 };\n    }\n  }\n\n  private createSecureSandbox(context: StepExecutionContext, allowedModules: string[]): any {\n    const sandbox = {\n      // Safe globals\n      console: {\n        log: (...args: any[]) => context.logger('info', args.join(' '), context.step.id),\n        warn: (...args: any[]) => context.logger('warn', args.join(' '), context.step.id),\n        error: (...args: any[]) => context.logger('error', args.join(' '), context.step.id)\n      },\n      Math,\n      Date,\n      JSON,\n      Object,\n      Array,\n      String,\n      Number,\n      Boolean,\n      \n      // Workflow context\n      variables: { ...context.variables },\n      results: { ...context.results },\n      \n      // Allowed modules (restricted)\n      require: (moduleName: string) => {\n        if (!allowedModules.includes(moduleName)) {\n          throw new Error(`Module '${moduleName}' is not allowed`);\n        }\n        // Only allow specific safe modules\n        switch (moduleName) {\n          case 'lodash':\n            return require('lodash');\n          case 'uuid':\n            return require('uuid');\n          default:\n            throw new Error(`Module '${moduleName}' is not available`);\n        }\n      },\n      \n      // Utility functions\n      setTimeout: (fn: Function, delay: number) => {\n        if (delay > 5000) throw new Error('Timeout too long');\n        return setTimeout(fn, delay);\n      }\n    };\n\n    return vm.createContext(sandbox);\n  }\n\n  private async executeScriptInSandbox(script: string, sandbox: any, timeout: number): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error('Script execution timeout'));\n      }, timeout);\n\n      try {\n        const vmScript = new vm.Script(`\n          (async function() {\n            ${script}\n          })()\n        `);\n\n        const result = vmScript.runInContext(sandbox, {\n          timeout: timeout,\n          breakOnSigint: true\n        });\n\n        // Handle async scripts\n        if (result && typeof result.then === 'function') {\n          result\n            .then((asyncResult: any) => {\n              clearTimeout(timeoutId);\n              resolve(asyncResult);\n            })\n            .catch((error: any) => {\n              clearTimeout(timeoutId);\n              reject(error);\n            });\n        } else {\n          clearTimeout(timeoutId);\n          resolve(result);\n        }\n      } catch (error) {\n        clearTimeout(timeoutId);\n        reject(error);\n      }\n    });\n  }\n}\n\n// Step Executor Factory\nexport class StepExecutorFactory {\n  private static executors: Map<string, BaseStepExecutor> = new Map();\n\n  static initialize(): void {\n    this.executors.set('agent-task', new AgentTaskExecutor());\n    this.executors.set('parallel', new ParallelExecutor());\n    this.executors.set('condition', new ConditionExecutor());\n    this.executors.set('loop', new LoopExecutor());\n    this.executors.set('http', new HttpExecutor());\n    this.executors.set('script', new ScriptExecutor());\n  }\n\n  static getExecutor(stepType: string): BaseStepExecutor {\n    const executor = this.executors.get(stepType);\n    if (!executor) {\n      throw new Error(`No executor found for step type: ${stepType}`);\n    }\n    return executor;\n  }\n\n  static registerExecutor(stepType: string, executor: BaseStepExecutor): void {\n    this.executors.set(stepType, executor);\n  }\n}\n\n// Initialize default executors\nStepExecutorFactory.initialize();"],"names":["uuidv4"],"mappings":"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"}