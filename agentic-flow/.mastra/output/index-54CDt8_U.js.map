{"version":3,"file":"index-54CDt8_U.js","sources":["../../src/types/index.ts","../../src/mastra/agents.ts","../../src/utils/logger.ts","../../src/communication/message-router.ts","../../src/communication/message-queue.ts","../../src/communication/message-bus.ts","../../src/goal-engine/goal-engine.ts","../../src/core/agent.base.ts","../../src/coordination/team-coordinator.ts","../../src/agents/coordinator-agent.ts","../../src/agents/executor-agent.ts","../../src/workflows/persistence/workflow-state-manager.ts","../../src/workflows/workflow-engine.ts","../../src/cli/utils/logger.ts","../../src/lib/agent-manager.ts","../../src/mastra/tools.ts","../../src/mastra/workflows.ts","../../src/mastra/index.ts"],"sourcesContent":["/**\n * Core type definitions for the Agentic Flow framework\n */\n\n// Agent-related types\nexport interface AgentId {\n  id: string;\n  namespace?: string;\n}\n\nexport interface AgentCapability {\n  name: string;\n  description: string;\n  inputSchema?: Record<string, any>;\n  outputSchema?: Record<string, any>;\n}\n\nexport interface AgentProfile {\n  id: AgentId;\n  name: string;\n  type: AgentType;\n  capabilities: AgentCapability[];\n  goals: Goal[];\n  state: AgentState;\n  metadata: AgentMetadata;\n}\n\nexport enum AgentType {\n  COORDINATOR = 'coordinator',\n  EXECUTOR = 'executor',\n  ANALYZER = 'analyzer',\n  MONITOR = 'monitor',\n  SPECIALIST = 'specialist'\n}\n\nexport enum AgentState {\n  IDLE = 'idle',\n  THINKING = 'thinking',\n  EXECUTING = 'executing',\n  COMMUNICATING = 'communicating',\n  COORDINATING = 'coordinating',\n  ERROR = 'error',\n  TERMINATED = 'terminated'\n}\n\nexport interface AgentMetadata {\n  createdAt: Date;\n  updatedAt: Date;\n  version: string;\n  tags: string[];\n  performance: PerformanceMetrics;\n}\n\n// Goal-related types\nexport interface Goal {\n  id: string;\n  description: string;\n  type: GoalType;\n  priority: GoalPriority;\n  status: GoalStatus;\n  dependencies: string[];\n  constraints: Constraint[];\n  deadline?: Date;\n  subGoals?: Goal[];\n  metadata?: Record<string, any>;\n}\n\nexport enum GoalType {\n  ACHIEVE = 'achieve',\n  MAINTAIN = 'maintain',\n  QUERY = 'query',\n  PERFORM = 'perform',\n  PREVENT = 'prevent'\n}\n\nexport enum GoalPriority {\n  CRITICAL = 'critical',\n  HIGH = 'high',\n  MEDIUM = 'medium',\n  LOW = 'low'\n}\n\nexport enum GoalStatus {\n  PENDING = 'pending',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  SUSPENDED = 'suspended'\n}\n\nexport interface Constraint {\n  type: string;\n  value: any;\n  description?: string;\n}\n\n// Communication types\nexport interface Message {\n  id: string;\n  from: AgentId;\n  to: AgentId | AgentId[];\n  type: MessageType;\n  content: MessageContent;\n  timestamp: Date;\n  replyTo?: string;\n  priority: MessagePriority;\n  ttl?: number;\n}\n\nexport enum MessageType {\n  REQUEST = 'request',\n  RESPONSE = 'response',\n  INFORM = 'inform',\n  QUERY = 'query',\n  COMMAND = 'command',\n  BROADCAST = 'broadcast',\n  NEGOTIATE = 'negotiate',\n  ACKNOWLEDGE = 'acknowledge'\n}\n\nexport enum MessagePriority {\n  URGENT = 'urgent',\n  HIGH = 'high',\n  NORMAL = 'normal',\n  LOW = 'low'\n}\n\nexport interface MessageContent {\n  topic: string;\n  body: any;\n  performative?: string;\n  language?: string;\n  encoding?: string;\n  ontology?: string;\n}\n\n// Coordination types\nexport interface Team {\n  id: string;\n  name: string;\n  leader: AgentId;\n  members: AgentId[];\n  goals: Goal[];\n  formation: TeamFormation;\n  status: TeamStatus;\n  createdAt: Date;\n}\n\nexport enum TeamFormation {\n  HIERARCHICAL = 'hierarchical',\n  FLAT = 'flat',\n  MATRIX = 'matrix',\n  DYNAMIC = 'dynamic'\n}\n\nexport enum TeamStatus {\n  FORMING = 'forming',\n  ACTIVE = 'active',\n  EXECUTING = 'executing',\n  DISBANDED = 'disbanded'\n}\n\nexport interface CoordinationStrategy {\n  type: string;\n  parameters: Record<string, any>;\n  evaluate: (context: CoordinationContext) => number;\n}\n\nexport interface CoordinationContext {\n  team: Team;\n  currentGoals: Goal[];\n  agentStates: Map<string, AgentState>;\n  environment: Record<string, any>;\n}\n\n// Performance and monitoring types\nexport interface PerformanceMetrics {\n  tasksCompleted: number;\n  successRate: number;\n  averageResponseTime: number;\n  resourceUtilization: number;\n  communicationEfficiency: number;\n}\n\n// Event types\nexport interface AgentEvent {\n  type: string;\n  agentId: AgentId;\n  timestamp: Date;\n  data: any;\n}\n\n// Task execution types\nexport interface Task {\n  id: string;\n  goalId: string;\n  assignedTo: AgentId;\n  description: string;\n  status: TaskStatus;\n  result?: any;\n  error?: Error;\n  startedAt?: Date;\n  completedAt?: Date;\n}\n\nexport enum TaskStatus {\n  PENDING = 'pending',\n  ASSIGNED = 'assigned',\n  IN_PROGRESS = 'in_progress',\n  COMPLETED = 'completed',\n  FAILED = 'failed',\n  CANCELLED = 'cancelled'\n}\n\n// Natural Language Processing types\nexport interface NLPIntent {\n  intent: string;\n  confidence: number;\n  entities: NLPEntity[];\n  context?: Record<string, any>;\n}\n\nexport interface NLPEntity {\n  type: string;\n  value: string;\n  confidence: number;\n  position: [number, number];\n}\n\n// Configuration types\nexport interface AgentConfig {\n  namespace?: string;\n  maxConcurrentTasks?: number;\n  communicationTimeout?: number;\n  retryAttempts?: number;\n  memoryLimit?: number;\n  learningRate?: number;\n}\n\n// Lifecycle hooks\nexport interface AgentLifecycleHooks {\n  onInit?: () => Promise<void>;\n  onStart?: () => Promise<void>;\n  onStop?: () => Promise<void>;\n  onError?: (error: Error) => Promise<void>;\n  onMessage?: (message: Message) => Promise<void>;\n  onGoalReceived?: (goal: Goal) => Promise<void>;\n  onTaskCompleted?: (task: Task) => Promise<void>;\n}","import { Agent } from '@mastra/core';\nimport { BaseAgent } from '../core/agent.base';\nimport { AgentType } from '../types';\n// Note: Tools are imported separately to avoid circular dependencies\n\n/**\n * Create a Mastra agent from an agentic-flow agent\n */\nexport function createMastraAgent(agenticFlowAgent: BaseAgent): Agent {\n  const agentType = agenticFlowAgent.getType();\n  const agentName = agenticFlowAgent.getName();\n  \n  // Map agent types to appropriate models\n  const modelMapping: Record<AgentType, { provider: string; name: string }> = {\n    [AgentType.COORDINATOR]: { provider: 'anthropic', name: 'claude-3-opus-20240229' },\n    [AgentType.EXECUTOR]: { provider: 'anthropic', name: 'claude-3-sonnet-20240229' },\n    [AgentType.RESEARCHER]: { provider: 'openai', name: 'gpt-4-turbo' },\n    [AgentType.ANALYST]: { provider: 'anthropic', name: 'claude-3-sonnet-20240229' },\n    [AgentType.ARCHITECT]: { provider: 'anthropic', name: 'claude-3-opus-20240229' },\n    [AgentType.CODER]: { provider: 'openai', name: 'gpt-4-turbo' },\n    [AgentType.TESTER]: { provider: 'openai', name: 'gpt-4' },\n    [AgentType.DOCUMENTER]: { provider: 'openai', name: 'gpt-4' },\n    [AgentType.REVIEWER]: { provider: 'anthropic', name: 'claude-3-sonnet-20240229' },\n    [AgentType.MONITOR]: { provider: 'openai', name: 'gpt-3.5-turbo' },\n    [AgentType.OPTIMIZER]: { provider: 'anthropic', name: 'claude-3-opus-20240229' },\n    [AgentType.SPECIALIST]: { provider: 'anthropic', name: 'claude-3-opus-20240229' },\n  };\n  \n  const model = modelMapping[agentType] || { provider: 'openai', name: 'gpt-4' };\n  \n  // Generate instructions based on agent capabilities\n  const capabilities = agenticFlowAgent.getCapabilities();\n  const instructions = `You are ${agentName}, an ${agentType} agent with the following capabilities:\n${capabilities.map(cap => `- ${cap.name}: ${cap.description}`).join('\\n')}\n\nYour role is to work within the agentic-flow system to accomplish tasks assigned to you.\nYou should collaborate with other agents and use the available tools to complete your objectives.`;\n  \n  // Tools will be assigned after creation to avoid circular dependencies\n  const tools = [];\n  \n  return new Agent({\n    name: agentName.toLowerCase().replace(/\\s+/g, '-'),\n    description: `${agentType} agent: ${agentName}`,\n    model,\n    instructions,\n    tools,\n  });\n}\n\n/**\n * Pre-defined Mastra agents for common agentic-flow patterns\n */\nexport const researcherAgent = new Agent({\n  name: 'researcher',\n  description: 'Research agent for information gathering and analysis',\n  model: {\n    provider: 'openai',\n    name: 'gpt-4-turbo',\n  },\n  instructions: `You are a research agent specialized in:\n    - Gathering information from various sources\n    - Analyzing and synthesizing data\n    - Identifying patterns and insights\n    - Providing comprehensive research reports\n    - Fact-checking and verification`,\n  tools: [],\n});\n\nexport const architectAgent = new Agent({\n  name: 'architect',\n  description: 'Architecture agent for system design and planning',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-opus-20240229',\n  },\n  instructions: `You are an architecture agent responsible for:\n    - Designing system architectures\n    - Creating technical specifications\n    - Planning implementation strategies\n    - Evaluating technology choices\n    - Ensuring scalability and performance`,\n  tools: [],\n});\n\nexport const coderAgent = new Agent({\n  name: 'coder',\n  description: 'Coding agent for implementation and development',\n  model: {\n    provider: 'openai',\n    name: 'gpt-4-turbo',\n  },\n  instructions: `You are a coding agent specialized in:\n    - Writing clean, efficient code\n    - Implementing features and functionality\n    - Following best practices and patterns\n    - Debugging and problem-solving\n    - Code optimization and refactoring`,\n  tools: [],\n});\n\nexport const testerAgent = new Agent({\n  name: 'tester',\n  description: 'Testing agent for quality assurance',\n  model: {\n    provider: 'openai',\n    name: 'gpt-4',\n  },\n  instructions: `You are a testing agent focused on:\n    - Writing comprehensive test cases\n    - Performing unit and integration testing\n    - Identifying bugs and issues\n    - Ensuring code quality\n    - Test automation and coverage`,\n  tools: [],\n});\n\nexport const reviewerAgent = new Agent({\n  name: 'reviewer',\n  description: 'Review agent for code and design review',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-sonnet-20240229',\n  },\n  instructions: `You are a review agent responsible for:\n    - Conducting thorough code reviews\n    - Ensuring adherence to standards\n    - Identifying potential improvements\n    - Providing constructive feedback\n    - Validating architectural decisions`,\n  tools: [],\n});\n\nexport const monitorAgent = new Agent({\n  name: 'monitor',\n  description: 'Monitoring agent for system observation',\n  model: {\n    provider: 'openai',\n    name: 'gpt-3.5-turbo',\n  },\n  instructions: `You are a monitoring agent tasked with:\n    - Observing system performance\n    - Tracking agent activities\n    - Identifying anomalies\n    - Generating alerts and reports\n    - Ensuring system health`,\n  tools: [],\n});\n\n// Create coordinator and executor agents similar to the main index\nexport const coordinatorMastraAgent = new Agent({\n  name: 'coordinator',\n  description: 'Coordinator agent for team management and task delegation',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-sonnet-20240229',\n  },\n  instructions: `You are a coordinator agent responsible for:\n    - Forming teams of agents for complex goals\n    - Breaking down complex goals into manageable sub-goals\n    - Delegating tasks to appropriate agents or teams\n    - Monitoring team performance and adjusting strategies\n    - Resolving conflicts between agents`,\n  tools: [],\n});\n\nexport const executorMastraAgent = new Agent({\n  name: 'executor',\n  description: 'Executor agent for task execution and implementation',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-sonnet-20240229',\n  },\n  instructions: `You are an executor agent responsible for:\n    - Executing assigned tasks\n    - Implementing solutions based on specifications\n    - Reporting progress and results\n    - Handling errors and retries\n    - Collaborating with other agents`,\n  tools: [],\n});\n\n// Export all predefined agents\nexport const mastraAgents = {\n  coordinator: coordinatorMastraAgent,\n  executor: executorMastraAgent,\n  researcher: researcherAgent,\n  architect: architectAgent,\n  coder: coderAgent,\n  tester: testerAgent,\n  reviewer: reviewerAgent,\n  monitor: monitorAgent,\n};","import winston from 'winston';\n\n/**\n * Logger utility for the Agentic Flow framework\n */\nexport class Logger {\n  private winston: winston.Logger;\n  \n  constructor(context: string) {\n    this.winston = winston.createLogger({\n      level: process.env.LOG_LEVEL || 'info',\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.json()\n      ),\n      defaultMeta: { context },\n      transports: [\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.colorize(),\n            winston.format.simple()\n          )\n        })\n      ]\n    });\n  }\n\n  debug(message: string, meta?: any): void {\n    this.winston.debug(message, meta);\n  }\n\n  info(message: string, meta?: any): void {\n    this.winston.info(message, meta);\n  }\n\n  warn(message: string, meta?: any): void {\n    this.winston.warn(message, meta);\n  }\n\n  error(message: string, error?: any, meta?: any): void {\n    this.winston.error(message, { error, ...meta });\n  }\n}","import { AgentId, Message } from '../types';\nimport { Logger } from '../utils/logger';\n\n/**\n * Message router for determining message recipients\n */\nexport class MessageRouter {\n  private readonly logger: Logger;\n  private readonly agents: Map<string, AgentId>;\n  private readonly topics: Map<string, Set<string>>;\n  private readonly routingRules: RoutingRule[];\n\n  constructor() {\n    this.logger = new Logger('MessageRouter');\n    this.agents = new Map();\n    this.topics = new Map();\n    this.routingRules = [];\n    \n    this.initializeDefaultRules();\n  }\n\n  /**\n   * Initialize default routing rules\n   */\n  private initializeDefaultRules(): void {\n    // Broadcast rule\n    this.addRule({\n      name: 'broadcast',\n      condition: (message) => Array.isArray(message.to) && message.to.length === 0,\n      route: (message) => Array.from(this.agents.values()).filter(\n        agent => this.getAgentKey(agent) !== this.getAgentKey(message.from)\n      )\n    });\n    \n    // Direct message rule\n    this.addRule({\n      name: 'direct',\n      condition: (message) => !Array.isArray(message.to) && message.to !== null,\n      route: (message) => [message.to as AgentId]\n    });\n    \n    // Multi-cast rule\n    this.addRule({\n      name: 'multicast',\n      condition: (message) => Array.isArray(message.to) && message.to.length > 0,\n      route: (message) => message.to as AgentId[]\n    });\n  }\n\n  /**\n   * Register an agent\n   */\n  public registerAgent(agentId: AgentId): void {\n    const key = this.getAgentKey(agentId);\n    this.agents.set(key, agentId);\n    this.logger.debug('Agent registered with router', { agentId: key });\n  }\n\n  /**\n   * Unregister an agent\n   */\n  public unregisterAgent(agentId: AgentId): void {\n    const key = this.getAgentKey(agentId);\n    this.agents.delete(key);\n    \n    // Remove from all topics\n    this.topics.forEach((subscribers, topic) => {\n      subscribers.delete(key);\n    });\n    \n    this.logger.debug('Agent unregistered from router', { agentId: key });\n  }\n\n  /**\n   * Subscribe an agent to a topic\n   */\n  public subscribeTopic(agentId: AgentId, topic: string): void {\n    const key = this.getAgentKey(agentId);\n    \n    if (!this.topics.has(topic)) {\n      this.topics.set(topic, new Set());\n    }\n    \n    this.topics.get(topic)!.add(key);\n    this.logger.debug('Agent subscribed to topic', { agentId: key, topic });\n  }\n\n  /**\n   * Unsubscribe an agent from a topic\n   */\n  public unsubscribeTopic(agentId: AgentId, topic: string): void {\n    const key = this.getAgentKey(agentId);\n    const subscribers = this.topics.get(topic);\n    \n    if (subscribers) {\n      subscribers.delete(key);\n      \n      if (subscribers.size === 0) {\n        this.topics.delete(topic);\n      }\n    }\n    \n    this.logger.debug('Agent unsubscribed from topic', { agentId: key, topic });\n  }\n\n  /**\n   * Route a message to recipients\n   */\n  public async route(message: Message): Promise<AgentId[]> {\n    try {\n      // Check routing rules\n      for (const rule of this.routingRules) {\n        if (rule.condition(message)) {\n          const recipients = rule.route(message);\n          \n          // Filter out non-existent agents\n          const validRecipients = recipients.filter(recipient => {\n            const key = this.getAgentKey(recipient);\n            return this.agents.has(key);\n          });\n          \n          this.logger.debug('Message routed', { \n            messageId: message.id, \n            rule: rule.name,\n            recipients: validRecipients.length \n          });\n          \n          return validRecipients;\n        }\n      }\n      \n      // Topic-based routing\n      if (message.content.topic) {\n        const topicSubscribers = this.getTopicSubscribersInternal(message.content.topic);\n        if (topicSubscribers.length > 0) {\n          return topicSubscribers.filter(\n            agent => this.getAgentKey(agent) !== this.getAgentKey(message.from)\n          );\n        }\n      }\n      \n      this.logger.warn('No routing rule matched', { messageId: message.id });\n      return [];\n    } catch (error) {\n      this.logger.error('Failed to route message', error);\n      return [];\n    }\n  }\n\n  /**\n   * Add a custom routing rule\n   */\n  public addRule(rule: RoutingRule): void {\n    this.routingRules.push(rule);\n    this.logger.info('Added routing rule', { name: rule.name });\n  }\n\n  /**\n   * Remove a routing rule\n   */\n  public removeRule(name: string): void {\n    const index = this.routingRules.findIndex(rule => rule.name === name);\n    if (index >= 0) {\n      this.routingRules.splice(index, 1);\n      this.logger.info('Removed routing rule', { name });\n    }\n  }\n\n  /**\n   * Get subscribers for a topic (internal)\n   */\n  private getTopicSubscribersInternal(topic: string): AgentId[] {\n    const subscribers = this.topics.get(topic);\n    if (!subscribers) {\n      return [];\n    }\n    \n    return Array.from(subscribers).map(key => this.agents.get(key)!).filter(Boolean);\n  }\n\n  /**\n   * Get agent key for consistent identification\n   */\n  private getAgentKey(agentId: AgentId): string {\n    return `${agentId.namespace || 'default'}:${agentId.id}`;\n  }\n\n  /**\n   * Get all registered agents\n   */\n  public getRegisteredAgents(): AgentId[] {\n    return Array.from(this.agents.values());\n  }\n\n  /**\n   * Get all topics\n   */\n  public getTopics(): string[] {\n    return Array.from(this.topics.keys());\n  }\n\n  /**\n   * Get topic subscribers\n   */\n  public getTopicSubscribers(topic: string): AgentId[] {\n    const subscribers = this.topics.get(topic);\n    if (!subscribers) {\n      return [];\n    }\n    \n    return Array.from(subscribers)\n      .map(key => this.agents.get(key))\n      .filter((agent): agent is AgentId => agent !== undefined);\n  }\n}\n\n/**\n * Routing rule interface\n */\ninterface RoutingRule {\n  name: string;\n  condition: (message: Message) => boolean;\n  route: (message: Message) => AgentId[];\n}","import { Message, AgentId, MessagePriority } from '../types';\nimport { Logger } from '../utils/logger';\n\n/**\n * Message queue for storing messages for offline agents\n */\nexport class MessageQueue {\n  private readonly agentId: AgentId;\n  private readonly logger: Logger;\n  private readonly messages: PriorityQueue<Message>;\n  private readonly maxSize: number;\n\n  constructor(agentId: AgentId, maxSize: number = 1000) {\n    this.agentId = agentId;\n    this.logger = new Logger(`MessageQueue:${agentId.id}`);\n    this.messages = new PriorityQueue<Message>(this.compareMessages);\n    this.maxSize = maxSize;\n  }\n\n  /**\n   * Add a message to the queue\n   */\n  public enqueue(message: Message): void {\n    if (this.messages.size() >= this.maxSize) {\n      this.logger.warn('Queue is full, dropping oldest message');\n      // In a priority queue, we need to remove the lowest priority message\n      const allMessages = this.messages.toArray();\n      allMessages.sort(this.compareMessages).reverse();\n      allMessages.pop(); // Remove lowest priority\n      this.messages.clear();\n      allMessages.forEach(m => this.messages.enqueue(m));\n    }\n    \n    this.messages.enqueue(message);\n    this.logger.debug('Message enqueued', { messageId: message.id });\n  }\n\n  /**\n   * Get the next message without removing it\n   */\n  public peek(): Message[] {\n    return this.messages.toArray();\n  }\n\n  /**\n   * Remove and return the next message\n   */\n  public dequeue(): Message | undefined {\n    return this.messages.dequeue();\n  }\n\n  /**\n   * Remove and return all messages\n   */\n  public dequeueAll(): Message[] {\n    const messages: Message[] = [];\n    while (!this.messages.isEmpty()) {\n      const message = this.messages.dequeue();\n      if (message) {\n        messages.push(message);\n      }\n    }\n    return messages;\n  }\n\n  /**\n   * Get queue size\n   */\n  public size(): number {\n    return this.messages.size();\n  }\n\n  /**\n   * Check if queue is empty\n   */\n  public isEmpty(): boolean {\n    return this.messages.isEmpty();\n  }\n\n  /**\n   * Clear all messages\n   */\n  public clear(): void {\n    this.messages.clear();\n    this.logger.debug('Queue cleared');\n  }\n\n  /**\n   * Compare messages for priority ordering\n   */\n  private compareMessages(a: Message, b: Message): number {\n    // Priority comparison\n    const priorityWeight = {\n      [MessagePriority.URGENT]: 4,\n      [MessagePriority.HIGH]: 3,\n      [MessagePriority.NORMAL]: 2,\n      [MessagePriority.LOW]: 1\n    };\n    \n    const priorityDiff = priorityWeight[b.priority] - priorityWeight[a.priority];\n    if (priorityDiff !== 0) return priorityDiff;\n    \n    // Timestamp comparison (older messages first)\n    return a.timestamp.getTime() - b.timestamp.getTime();\n  }\n\n  /**\n   * Remove expired messages\n   */\n  public removeExpired(): number {\n    const now = Date.now();\n    const messages = this.messages.toArray();\n    const validMessages = messages.filter(message => {\n      if (message.ttl) {\n        const expiryTime = message.timestamp.getTime() + message.ttl;\n        return expiryTime > now;\n      }\n      return true;\n    });\n    \n    const removedCount = messages.length - validMessages.length;\n    \n    if (removedCount > 0) {\n      this.messages.clear();\n      validMessages.forEach(m => this.messages.enqueue(m));\n      this.logger.info('Removed expired messages', { count: removedCount });\n    }\n    \n    return removedCount;\n  }\n\n  /**\n   * Get messages by type\n   */\n  public getByType(type: string): Message[] {\n    return this.messages.toArray().filter(m => m.type === type);\n  }\n\n  /**\n   * Get messages by priority\n   */\n  public getByPriority(priority: MessagePriority): Message[] {\n    return this.messages.toArray().filter(m => m.priority === priority);\n  }\n}\n\n/**\n * Priority Queue implementation\n */\nclass PriorityQueue<T> {\n  private items: T[] = [];\n  private compare: (a: T, b: T) => number;\n\n  constructor(compareFunction: (a: T, b: T) => number) {\n    this.compare = compareFunction;\n  }\n\n  enqueue(item: T): void {\n    this.items.push(item);\n    this.items.sort(this.compare);\n  }\n\n  dequeue(): T | undefined {\n    return this.items.shift();\n  }\n\n  peek(): T | undefined {\n    return this.items[0];\n  }\n\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  size(): number {\n    return this.items.length;\n  }\n\n  clear(): void {\n    this.items = [];\n  }\n\n  toArray(): T[] {\n    return [...this.items];\n  }\n}","import { EventEmitter } from 'eventemitter3';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  Message,\n  AgentId,\n  MessageType,\n  MessagePriority,\n  MessageContent\n} from '../types';\nimport { Logger } from '../utils/logger';\nimport { MessageRouter } from './message-router';\nimport { MessageQueue } from './message-queue';\n\n/**\n * Central message bus for inter-agent communication\n */\nexport class MessageBus extends EventEmitter {\n  private static instance: MessageBus;\n  private readonly logger: Logger;\n  private readonly router: MessageRouter;\n  private readonly queues: Map<string, MessageQueue>;\n  private readonly subscribers: Map<string, (message: Message) => Promise<void>>;\n  private readonly messageHistory: Message[];\n  private readonly maxHistorySize: number = 1000;\n\n  private constructor() {\n    super();\n    this.logger = new Logger('MessageBus');\n    this.router = new MessageRouter();\n    this.queues = new Map();\n    this.subscribers = new Map();\n    this.messageHistory = [];\n  }\n\n  /**\n   * Get singleton instance\n   */\n  public static getInstance(): MessageBus {\n    if (!MessageBus.instance) {\n      MessageBus.instance = new MessageBus();\n    }\n    return MessageBus.instance;\n  }\n\n  /**\n   * Register an agent with the message bus\n   */\n  public async registerAgent(agentId: AgentId): Promise<void> {\n    const key = this.getAgentKey(agentId);\n    \n    if (this.queues.has(key)) {\n      throw new Error(`Agent already registered: ${key}`);\n    }\n    \n    // Create message queue for agent\n    const queue = new MessageQueue(agentId);\n    this.queues.set(key, queue);\n    \n    // Register with router\n    this.router.registerAgent(agentId);\n    \n    this.logger.info('Agent registered', { agentId: key });\n    this.emit('agent:registered', agentId);\n  }\n\n  /**\n   * Unregister an agent from the message bus\n   */\n  public async unregisterAgent(agentId: AgentId): Promise<void> {\n    const key = this.getAgentKey(agentId);\n    \n    // Remove queue\n    const queue = this.queues.get(key);\n    if (queue) {\n      queue.clear();\n      this.queues.delete(key);\n    }\n    \n    // Remove subscriber\n    this.subscribers.delete(key);\n    \n    // Unregister from router\n    this.router.unregisterAgent(agentId);\n    \n    this.logger.info('Agent unregistered', { agentId: key });\n    this.emit('agent:unregistered', agentId);\n  }\n\n  /**\n   * Subscribe to messages for an agent\n   */\n  public subscribe(\n    agentId: AgentId,\n    handler: (message: Message) => Promise<void>\n  ): void {\n    const key = this.getAgentKey(agentId);\n    this.subscribers.set(key, handler);\n    \n    // Process any queued messages\n    const queue = this.queues.get(key);\n    if (queue) {\n      this.processQueuedMessages(agentId, handler);\n    }\n  }\n\n  /**\n   * Unsubscribe from messages\n   */\n  public unsubscribe(agentId: AgentId): void {\n    const key = this.getAgentKey(agentId);\n    this.subscribers.delete(key);\n  }\n\n  /**\n   * Send a message\n   */\n  public async send(message: Message): Promise<void> {\n    try {\n      // Validate message\n      this.validateMessage(message);\n      \n      // Add to history\n      this.addToHistory(message);\n      \n      // Route message\n      const recipients = await this.router.route(message);\n      \n      if (recipients.length === 0) {\n        this.logger.warn('No recipients found for message', { messageId: message.id });\n        this.emit('message:undelivered', message);\n        return;\n      }\n      \n      // Deliver to recipients\n      for (const recipient of recipients) {\n        await this.deliverMessage(message, recipient);\n      }\n      \n      this.logger.debug('Message sent', { \n        messageId: message.id, \n        recipientCount: recipients.length \n      });\n      \n      this.emit('message:sent', message);\n    } catch (error) {\n      this.logger.error('Failed to send message', error);\n      this.emit('message:error', { message, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Broadcast a message to all agents\n   */\n  public async broadcast(\n    from: AgentId,\n    type: MessageType,\n    content: MessageContent,\n    priority: MessagePriority = MessagePriority.NORMAL\n  ): Promise<void> {\n    const message: Message = {\n      id: uuidv4(),\n      from,\n      to: [], // Empty array indicates broadcast\n      type,\n      content,\n      timestamp: new Date(),\n      priority\n    };\n    \n    await this.send(message);\n  }\n\n  /**\n   * Reply to a message\n   */\n  public async reply(\n    originalMessage: Message,\n    from: AgentId,\n    type: MessageType,\n    content: MessageContent,\n    priority?: MessagePriority\n  ): Promise<void> {\n    const replyMessage: Message = {\n      id: uuidv4(),\n      from,\n      to: originalMessage.from,\n      type,\n      content,\n      timestamp: new Date(),\n      replyTo: originalMessage.id,\n      priority: priority || originalMessage.priority\n    };\n    \n    await this.send(replyMessage);\n    \n    // Emit response event for request-response pattern\n    if (type === MessageType.RESPONSE) {\n      this.emit(`response:${originalMessage.id}`, replyMessage);\n    }\n  }\n\n  /**\n   * Enhanced message delivery with coordination tracking\n   */\n  private async deliverMessage(message: Message, recipient: AgentId): Promise<void> {\n    const key = this.getAgentKey(recipient);\n    const handler = this.subscribers.get(key);\n    \n    if (handler) {\n      // Direct delivery\n      try {\n        await handler(message);\n        this.emit('message:delivered', { message, recipient });\n        \n        // Also emit the message for coordination patterns\n        this.emit('message:delivered', message);\n      } catch (error) {\n        this.logger.error('Handler failed to process message', error);\n        this.emit('message:handlerError', { message, recipient, error });\n      }\n    } else {\n      // Queue for later delivery\n      const queue = this.queues.get(key);\n      if (queue) {\n        queue.enqueue(message);\n        this.logger.debug('Message queued for offline agent', { \n          messageId: message.id, \n          agentId: key \n        });\n        this.emit('message:queued', { message, recipient });\n      } else {\n        this.logger.warn('No queue found for recipient', { agentId: key });\n        this.emit('message:undeliverable', { message, recipient });\n      }\n    }\n  }\n\n  /**\n   * Process queued messages for an agent\n   */\n  private async processQueuedMessages(\n    agentId: AgentId,\n    handler: (message: Message) => Promise<void>\n  ): Promise<void> {\n    const key = this.getAgentKey(agentId);\n    const queue = this.queues.get(key);\n    \n    if (!queue) return;\n    \n    const messages = queue.dequeueAll();\n    this.logger.info('Processing queued messages', { \n      agentId: key, \n      count: messages.length \n    });\n    \n    for (const message of messages) {\n      try {\n        await handler(message);\n        this.emit('message:delivered', { message, recipient: agentId });\n      } catch (error) {\n        this.logger.error('Failed to process queued message', error);\n        this.emit('message:handlerError', { message, recipient: agentId, error });\n      }\n    }\n  }\n\n  /**\n   * Validate message\n   */\n  private validateMessage(message: Message): void {\n    if (!message.id) {\n      throw new Error('Message must have an ID');\n    }\n    \n    if (!message.from) {\n      throw new Error('Message must have a sender');\n    }\n    \n    if (!message.type) {\n      throw new Error('Message must have a type');\n    }\n    \n    if (!message.content) {\n      throw new Error('Message must have content');\n    }\n  }\n\n  /**\n   * Add message to history\n   */\n  private addToHistory(message: Message): void {\n    this.messageHistory.push(message);\n    \n    // Trim history if needed\n    if (this.messageHistory.length > this.maxHistorySize) {\n      this.messageHistory.shift();\n    }\n  }\n\n  /**\n   * Get message history\n   */\n  public getHistory(filter?: {\n    from?: AgentId;\n    to?: AgentId;\n    type?: MessageType;\n    since?: Date;\n  }): Message[] {\n    let history = [...this.messageHistory];\n    \n    if (filter) {\n      if (filter.from) {\n        const fromKey = this.getAgentKey(filter.from);\n        history = history.filter(m => this.getAgentKey(m.from) === fromKey);\n      }\n      \n      if (filter.to) {\n        const toKey = this.getAgentKey(filter.to);\n        history = history.filter(m => {\n          if (Array.isArray(m.to)) {\n            return m.to.some(t => this.getAgentKey(t) === toKey);\n          }\n          return this.getAgentKey(m.to) === toKey;\n        });\n      }\n      \n      if (filter.type) {\n        history = history.filter(m => m.type === filter.type);\n      }\n      \n      if (filter.since) {\n        history = history.filter(m => m.timestamp >= filter.since!);\n      }\n    }\n    \n    return history;\n  }\n\n  /**\n   * Get agent key for consistent identification\n   */\n  private getAgentKey(agentId: AgentId): string {\n    return `${agentId.namespace || 'default'}:${agentId.id}`;\n  }\n\n  /**\n   * Get queue status for an agent\n   */\n  public getQueueStatus(agentId: AgentId): { size: number; messages: Message[] } {\n    const key = this.getAgentKey(agentId);\n    const queue = this.queues.get(key);\n    \n    if (!queue) {\n      return { size: 0, messages: [] };\n    }\n    \n    return {\n      size: queue.size(),\n      messages: queue.peek()\n    };\n  }\n\n  /**\n   * Clear all messages for an agent\n   */\n  public clearAgentMessages(agentId: AgentId): void {\n    const key = this.getAgentKey(agentId);\n    const queue = this.queues.get(key);\n    \n    if (queue) {\n      queue.clear();\n    }\n  }\n\n  /**\n   * Get registered agents\n   */\n  public getRegisteredAgents(): AgentId[] {\n    return this.router.getRegisteredAgents();\n  }\n  \n  // ========================\n  // ENHANCED COORDINATION FEATURES\n  // ========================\n  \n  /**\n   * Send request and wait for response\n   */\n  public async sendAndWaitForResponse(\n    message: Message,\n    timeoutMs: number = 30000\n  ): Promise<Message> {\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        this.removeListener(`response:${message.id}`, responseHandler);\n        reject(new Error(`Response timeout for message ${message.id}`));\n      }, timeoutMs);\n      \n      const responseHandler = (response: Message) => {\n        clearTimeout(timeoutId);\n        resolve(response);\n      };\n      \n      this.once(`response:${message.id}`, responseHandler);\n      \n      this.send(message).catch(error => {\n        clearTimeout(timeoutId);\n        this.removeListener(`response:${message.id}`, responseHandler);\n        reject(error);\n      });\n    });\n  }\n  \n  \n  /**\n   * Coordinate synchronous message exchange between agents\n   */\n  public async coordinatedExchange(\n    initiator: AgentId,\n    participants: AgentId[],\n    topic: string,\n    data: any,\n    timeoutMs: number = 60000\n  ): Promise<Map<string, any>> {\n    const exchangeId = uuidv4();\n    const responses = new Map<string, any>();\n    const pendingResponses = new Set(participants.map(p => this.getAgentKey(p)));\n    \n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Coordinated exchange timeout: ${exchangeId}`));\n      }, timeoutMs);\n      \n      const responseHandler = (message: Message) => {\n        if (message.content.topic === `${topic}:response` && \n            message.content.body.exchangeId === exchangeId) {\n          const senderKey = this.getAgentKey(message.from);\n          responses.set(senderKey, message.content.body);\n          pendingResponses.delete(senderKey);\n          \n          if (pendingResponses.size === 0) {\n            clearTimeout(timeoutId);\n            this.removeListener('message:delivered', responseHandler);\n            resolve(responses);\n          }\n        }\n      };\n      \n      this.on('message:delivered', responseHandler);\n      \n      // Send coordination message to all participants\n      const coordinationMessage: Message = {\n        id: uuidv4(),\n        from: initiator,\n        to: participants,\n        type: MessageType.REQUEST,\n        content: {\n          topic,\n          body: {\n            exchangeId,\n            data,\n            requiredResponse: true,\n            deadline: new Date(Date.now() + timeoutMs)\n          }\n        },\n        timestamp: new Date(),\n        priority: MessagePriority.HIGH\n      };\n      \n      this.send(coordinationMessage).catch(error => {\n        clearTimeout(timeoutId);\n        this.removeListener('message:delivered', responseHandler);\n        reject(error);\n      });\n    });\n  }\n  \n  /**\n   * Implement barrier synchronization for coordinated actions\n   */\n  public async barrierSync(\n    participants: AgentId[],\n    barrierName: string,\n    timeoutMs: number = 30000\n  ): Promise<void> {\n    const barrierId = `${barrierName}_${Date.now()}`;\n    const arrivedAgents = new Set<string>();\n    const requiredCount = participants.length;\n    \n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Barrier synchronization timeout: ${barrierId}`));\n      }, timeoutMs);\n      \n      const arrivalHandler = (message: Message) => {\n        if (message.content.topic === 'barrier:arrival' && \n            message.content.body.barrierId === barrierId) {\n          const agentKey = this.getAgentKey(message.from);\n          arrivedAgents.add(agentKey);\n          \n          this.logger.debug('Agent arrived at barrier', { \n            agentKey, \n            barrierId, \n            arrived: arrivedAgents.size, \n            required: requiredCount \n          });\n          \n          if (arrivedAgents.size === requiredCount) {\n            clearTimeout(timeoutId);\n            this.removeListener('message:delivered', arrivalHandler);\n            \n            // Notify all participants that barrier is released\n            this.broadcast(\n              { id: 'barrier_coordinator', namespace: 'system' },\n              MessageType.INFORM,\n              {\n                topic: 'barrier:released',\n                body: { barrierId, participants: Array.from(arrivedAgents) }\n              },\n              MessagePriority.HIGH\n            );\n            \n            resolve();\n          }\n        }\n      };\n      \n      this.on('message:delivered', arrivalHandler);\n      \n      // Send barrier setup message to all participants\n      const barrierMessage: Message = {\n        id: uuidv4(),\n        from: { id: 'barrier_coordinator', namespace: 'system' },\n        to: participants,\n        type: MessageType.INFORM,\n        content: {\n          topic: 'barrier:setup',\n          body: {\n            barrierId,\n            participants: participants.map(p => this.getAgentKey(p)),\n            deadline: new Date(Date.now() + timeoutMs)\n          }\n        },\n        timestamp: new Date(),\n        priority: MessagePriority.HIGH\n      };\n      \n      this.send(barrierMessage).catch(error => {\n        clearTimeout(timeoutId);\n        this.removeListener('message:delivered', arrivalHandler);\n        reject(error);\n      });\n    });\n  }\n  \n  /**\n   * Implement consensus mechanism for distributed decision making\n   */\n  public async reachConsensus(\n    participants: AgentId[],\n    proposal: any,\n    consensusThreshold: number = 0.67,\n    timeoutMs: number = 60000\n  ): Promise<{ success: boolean; votes: Map<string, boolean>; consensus?: any }> {\n    const consensusId = uuidv4();\n    const votes = new Map<string, boolean>();\n    const responses = new Map<string, any>();\n    \n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        const success = this.evaluateConsensus(votes, consensusThreshold);\n        resolve({ success: false, votes, consensus: success ? proposal : undefined });\n      }, timeoutMs);\n      \n      const voteHandler = (message: Message) => {\n        if (message.content.topic === 'consensus:vote' && \n            message.content.body.consensusId === consensusId) {\n          const agentKey = this.getAgentKey(message.from);\n          const vote = message.content.body.vote;\n          const response = message.content.body.response;\n          \n          votes.set(agentKey, vote);\n          responses.set(agentKey, response);\n          \n          this.logger.debug('Vote received', { \n            agentKey, \n            vote, \n            consensusId,\n            totalVotes: votes.size,\n            required: participants.length\n          });\n          \n          if (votes.size === participants.length) {\n            clearTimeout(timeoutId);\n            this.removeListener('message:delivered', voteHandler);\n            \n            const success = this.evaluateConsensus(votes, consensusThreshold);\n            const consensus = success ? this.mergeConsensusResponses(responses) : undefined;\n            \n            // Notify all participants of consensus result\n            this.broadcast(\n              { id: 'consensus_coordinator', namespace: 'system' },\n              MessageType.INFORM,\n              {\n                topic: 'consensus:result',\n                body: {\n                  consensusId,\n                  success,\n                  votes: Object.fromEntries(votes),\n                  consensus\n                }\n              },\n              MessagePriority.HIGH\n            );\n            \n            resolve({ success, votes, consensus });\n          }\n        }\n      };\n      \n      this.on('message:delivered', voteHandler);\n      \n      // Send consensus proposal to all participants\n      const proposalMessage: Message = {\n        id: uuidv4(),\n        from: { id: 'consensus_coordinator', namespace: 'system' },\n        to: participants,\n        type: MessageType.REQUEST,\n        content: {\n          topic: 'consensus:proposal',\n          body: {\n            consensusId,\n            proposal,\n            threshold: consensusThreshold,\n            deadline: new Date(Date.now() + timeoutMs)\n          }\n        },\n        timestamp: new Date(),\n        priority: MessagePriority.HIGH\n      };\n      \n      this.send(proposalMessage).catch(error => {\n        clearTimeout(timeoutId);\n        this.removeListener('message:delivered', voteHandler);\n        reject(error);\n      });\n    });\n  }\n  \n  /**\n   * Pipeline coordination for sequential task execution\n   */\n  public async coordinatePipeline(\n    stages: { agentId: AgentId; task: any }[],\n    initialData: any,\n    timeoutMs: number = 120000\n  ): Promise<any> {\n    let currentData = initialData;\n    \n    for (let i = 0; i < stages.length; i++) {\n      const stage = stages[i];\n      const stageId = uuidv4();\n      \n      try {\n        const stageMessage: Message = {\n          id: uuidv4(),\n          from: { id: 'pipeline_coordinator', namespace: 'system' },\n          to: stage.agentId,\n          type: MessageType.COMMAND,\n          content: {\n            topic: 'pipeline:stage',\n            body: {\n              stageId,\n              stageNumber: i + 1,\n              totalStages: stages.length,\n              task: stage.task,\n              inputData: currentData,\n              deadline: new Date(Date.now() + timeoutMs / stages.length)\n            }\n          },\n          timestamp: new Date(),\n          priority: MessagePriority.HIGH\n        };\n        \n        const response = await this.sendAndWaitForResponse(stageMessage, timeoutMs / stages.length);\n        currentData = response.content.body.outputData;\n        \n        this.logger.info('Pipeline stage completed', { \n          stageId, \n          stageNumber: i + 1, \n          agentId: this.getAgentKey(stage.agentId) \n        });\n        \n      } catch (error) {\n        this.logger.error('Pipeline stage failed', { \n          stageNumber: i + 1, \n          agentId: this.getAgentKey(stage.agentId), \n          error \n        });\n        throw new Error(`Pipeline failed at stage ${i + 1}: ${error}`);\n      }\n    }\n    \n    return currentData;\n  }\n  \n  /**\n   * Monitor message flow and detect coordination issues\n   */\n  public getCoordinationMetrics(): {\n    messageCount: number;\n    averageResponseTime: number;\n    failureRate: number;\n    activeAgents: number;\n    queueSizes: Map<string, number>;\n  } {\n    const now = Date.now();\n    const recentMessages = this.messageHistory.filter(\n      m => now - m.timestamp.getTime() < 60000 // Last minute\n    );\n    \n    const responseMessages = recentMessages.filter(m => m.replyTo);\n    const averageResponseTime = responseMessages.length > 0 ?\n      responseMessages.reduce((sum, m) => {\n        const original = this.messageHistory.find(orig => orig.id === m.replyTo);\n        return sum + (original ? m.timestamp.getTime() - original.timestamp.getTime() : 0);\n      }, 0) / responseMessages.length : 0;\n    \n    const queueSizes = new Map<string, number>();\n    for (const [key, queue] of this.queues) {\n      queueSizes.set(key, queue.size());\n    }\n    \n    return {\n      messageCount: recentMessages.length,\n      averageResponseTime,\n      failureRate: 0, // Would track actual failures\n      activeAgents: this.router.getRegisteredAgents().length,\n      queueSizes\n    };\n  }\n  \n  /**\n   * Utility methods for consensus and coordination\n   */\n  private evaluateConsensus(votes: Map<string, boolean>, threshold: number): boolean {\n    if (votes.size === 0) return false;\n    \n    const positiveVotes = Array.from(votes.values()).filter(v => v).length;\n    return (positiveVotes / votes.size) >= threshold;\n  }\n  \n  private mergeConsensusResponses(responses: Map<string, any>): any {\n    // Simple consensus merging - can be enhanced based on requirements\n    const allResponses = Array.from(responses.values());\n    if (allResponses.length === 0) return null;\n    \n    // For now, return the most common response\n    const responseCount = new Map<string, number>();\n    allResponses.forEach(response => {\n      const key = JSON.stringify(response);\n      responseCount.set(key, (responseCount.get(key) || 0) + 1);\n    });\n    \n    let maxCount = 0;\n    let consensusResponse = null;\n    for (const [responseKey, count] of responseCount) {\n      if (count > maxCount) {\n        maxCount = count;\n        consensusResponse = JSON.parse(responseKey);\n      }\n    }\n    \n    return consensusResponse;\n  }\n}","import { EventEmitter } from 'eventemitter3';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as natural from 'natural';\nimport nlp from 'compromise';\nimport {\n  Goal,\n  GoalType,\n  GoalPriority,\n  GoalStatus,\n  AgentId,\n  Constraint,\n  NLPIntent,\n  NLPEntity,\n  Task,\n  TaskStatus\n} from '../types';\nimport { Logger } from '../utils/logger';\n\n/**\n * Goal Engine for natural language processing and goal management\n */\nexport class GoalEngine extends EventEmitter {\n  private readonly agentId: AgentId;\n  private readonly logger: Logger;\n  private goals: Map<string, Goal>;\n  private goalDependencies: Map<string, Set<string>>;\n  private tokenizer: natural.WordTokenizer;\n  private classifier: natural.BayesClassifier;\n  private goalQueue: PriorityQueue<Goal>;\n\n  constructor(agentId: AgentId) {\n    super();\n    this.agentId = agentId;\n    this.logger = new Logger(`GoalEngine:${agentId.id}`);\n    this.goals = new Map();\n    this.goalDependencies = new Map();\n    this.tokenizer = new natural.WordTokenizer();\n    this.classifier = new natural.BayesClassifier();\n    this.goalQueue = new PriorityQueue<Goal>(this.compareGoals);\n    \n    this.initializeClassifier();\n  }\n\n  /**\n   * Initialize the NLP classifier with training data\n   */\n  private initializeClassifier(): void {\n    // Train classifier for goal types\n    this.classifier.addDocument('achieve complete finish accomplish', GoalType.ACHIEVE);\n    this.classifier.addDocument('maintain keep preserve sustain', GoalType.MAINTAIN);\n    this.classifier.addDocument('query find search discover what how why', GoalType.QUERY);\n    this.classifier.addDocument('perform execute run do action', GoalType.PERFORM);\n    this.classifier.addDocument('prevent avoid stop block prohibit', GoalType.PREVENT);\n    \n    this.classifier.train();\n  }\n\n  /**\n   * Parse natural language input into a Goal\n   */\n  public async parseGoal(input: string, context?: Record<string, any>): Promise<Goal> {\n    try {\n      this.logger.debug('Parsing goal from input', { input });\n      \n      // Extract intent and entities\n      const intent = await this.extractIntent(input);\n      const entities = await this.extractEntities(input);\n      \n      // Determine goal type\n      const goalType = this.classifier.classify(input) as GoalType;\n      \n      // Extract priority from keywords\n      const priority = this.extractPriority(input);\n      \n      // Extract deadline if present\n      const deadline = this.extractDeadline(input);\n      \n      // Create goal\n      const goal: Goal = {\n        id: uuidv4(),\n        description: input,\n        type: goalType,\n        priority,\n        status: GoalStatus.PENDING,\n        dependencies: [],\n        constraints: this.extractConstraints(input, entities),\n        deadline,\n        metadata: {\n          nlpIntent: intent,\n          entities,\n          context,\n          createdAt: new Date()\n        }\n      };\n      \n      this.logger.info('Parsed goal successfully', { goalId: goal.id, type: goalType });\n      return goal;\n    } catch (error) {\n      this.logger.error('Failed to parse goal', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Extract intent from natural language input\n   */\n  private async extractIntent(input: string): Promise<NLPIntent> {\n    const doc = nlp(input);\n    \n    // Extract verbs as potential intents\n    const verbs = doc.verbs().out('array');\n    const intent = verbs[0] || 'unknown';\n    \n    // Calculate confidence based on clarity\n    const confidence = this.calculateConfidence(input);\n    \n    // Extract entities\n    const entities: NLPEntity[] = [];\n    \n    // Extract people\n    doc.people().forEach((term: any) => {\n      entities.push({\n        type: 'person',\n        value: term.text(),\n        confidence: 0.9,\n        position: [term.offset, term.offset + term.length]\n      });\n    });\n    \n    // Extract places\n    doc.places().forEach((term: any) => {\n      entities.push({\n        type: 'place',\n        value: term.text(),\n        confidence: 0.9,\n        position: [term.offset, term.offset + term.length]\n      });\n    });\n    \n    // Extract dates (using generic term iteration)\n    const terms = doc.terms().out('array') as string[];\n    terms.forEach((term, index) => {\n      if (/\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}/.test(term)) {\n        entities.push({\n          type: 'date',\n          value: term,\n          confidence: 0.9,\n          position: [index * 10, (index + 1) * 10]\n        });\n      }\n    });\n    \n    return {\n      intent,\n      confidence,\n      entities\n    };\n  }\n\n  /**\n   * Extract entities from input\n   */\n  private async extractEntities(input: string): Promise<NLPEntity[]> {\n    const doc = nlp(input);\n    const entities: NLPEntity[] = [];\n    \n    // Extract nouns as potential entities\n    doc.nouns().forEach((noun: any) => {\n      entities.push({\n        type: 'object',\n        value: noun.text(),\n        confidence: 0.8,\n        position: [noun.offset, noun.offset + noun.length]\n      });\n    });\n    \n    // Extract numbers\n    const docTerms = doc.terms().out('array') as string[];\n    docTerms.forEach((term, index) => {\n      if (/^\\d+$/.test(term)) {\n        entities.push({\n          type: 'number',\n          value: term,\n          confidence: 0.95,\n          position: [index * 10, (index + 1) * 10]\n        });\n      }\n    });\n    \n    return entities;\n  }\n\n  /**\n   * Extract priority from input\n   */\n  private extractPriority(input: string): GoalPriority {\n    const lowercased = input.toLowerCase();\n    \n    if (lowercased.includes('urgent') || lowercased.includes('critical') || lowercased.includes('asap')) {\n      return GoalPriority.CRITICAL;\n    } else if (lowercased.includes('high priority') || lowercased.includes('important')) {\n      return GoalPriority.HIGH;\n    } else if (lowercased.includes('low priority') || lowercased.includes('when possible')) {\n      return GoalPriority.LOW;\n    }\n    \n    return GoalPriority.MEDIUM;\n  }\n\n  /**\n   * Extract deadline from input\n   */\n  private extractDeadline(input: string): Date | undefined {\n    // Simple regex-based date extraction\n    const dateRegex = /\\b\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}\\b/;\n    const match = input.match(dateRegex);\n    \n    if (match) {\n      const parsed = new Date(match[0]);\n      if (!isNaN(parsed.getTime())) {\n        return parsed;\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Extract constraints from input and entities\n   */\n  private extractConstraints(input: string, entities: NLPEntity[]): Constraint[] {\n    const constraints: Constraint[] = [];\n    \n    // Time constraints\n    if (input.includes('within') || input.includes('before')) {\n      const timeEntity = entities.find(e => e.type === 'date' || e.type === 'number');\n      if (timeEntity) {\n        constraints.push({\n          type: 'time',\n          value: timeEntity.value,\n          description: 'Time constraint'\n        });\n      }\n    }\n    \n    // Resource constraints\n    if (input.includes('using') || input.includes('with')) {\n      const resourceEntities = entities.filter(e => e.type === 'object');\n      resourceEntities.forEach(entity => {\n        constraints.push({\n          type: 'resource',\n          value: entity.value,\n          description: 'Required resource'\n        });\n      });\n    }\n    \n    return constraints;\n  }\n\n  /**\n   * Calculate confidence score for intent extraction\n   */\n  private calculateConfidence(input: string): number {\n    const tokens = this.tokenizer.tokenize(input) || [];\n    const sentenceLength = tokens.length;\n    \n    // Simple heuristic: longer, more specific sentences have higher confidence\n    if (sentenceLength < 3) return 0.3;\n    if (sentenceLength < 5) return 0.5;\n    if (sentenceLength < 10) return 0.7;\n    return 0.9;\n  }\n\n  /**\n   * Add a goal to the engine\n   */\n  public async addGoal(goal: Goal): Promise<void> {\n    try {\n      this.logger.info('Adding goal to engine', { goalId: goal.id });\n      \n      // Store goal\n      this.goals.set(goal.id, goal);\n      \n      // Process dependencies\n      if (goal.dependencies.length > 0) {\n        this.goalDependencies.set(goal.id, new Set(goal.dependencies));\n      }\n      \n      // Add to priority queue if ready\n      if (this.isGoalReady(goal)) {\n        this.goalQueue.enqueue(goal);\n      }\n      \n      this.emit('goal:added', goal);\n    } catch (error) {\n      this.logger.error('Failed to add goal', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update goal status\n   */\n  public async updateGoalStatus(goalId: string, status: GoalStatus): Promise<void> {\n    const goal = this.goals.get(goalId);\n    if (!goal) {\n      throw new Error(`Goal not found: ${goalId}`);\n    }\n    \n    const previousStatus = goal.status;\n    goal.status = status;\n    \n    this.logger.info('Updated goal status', { goalId, previousStatus, newStatus: status });\n    \n    // Handle status transitions\n    if (status === GoalStatus.COMPLETED || status === GoalStatus.FAILED) {\n      // Check dependent goals\n      this.checkDependentGoals(goalId);\n    }\n    \n    this.emit('goal:statusChanged', { goal, previousStatus, newStatus: status });\n  }\n\n  /**\n   * Get next goal to process\n   */\n  public getNextGoal(): Goal | undefined {\n    while (!this.goalQueue.isEmpty()) {\n      const goal = this.goalQueue.dequeue();\n      if (goal && this.isGoalReady(goal)) {\n        return goal;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Decompose a goal into sub-goals\n   */\n  public async decomposeGoal(goal: Goal): Promise<Goal[]> {\n    try {\n      this.logger.debug('Decomposing goal', { goalId: goal.id });\n      \n      const subGoals: Goal[] = [];\n      \n      // Analyze goal description for decomposition hints\n      const doc = nlp(goal.description);\n      const clauses = doc.clauses().out('array');\n      \n      if (clauses.length > 1) {\n        // Create sub-goals from clauses\n        for (const clause of clauses) {\n          const subGoal = await this.parseGoal(clause, goal.metadata);\n          subGoal.dependencies = [goal.id];\n          subGoals.push(subGoal);\n        }\n      } else {\n        // Try to identify steps in the goal\n        const steps = this.identifySteps(goal.description);\n        for (const step of steps) {\n          const subGoal = await this.parseGoal(step, goal.metadata);\n          subGoal.dependencies = [goal.id];\n          subGoals.push(subGoal);\n        }\n      }\n      \n      goal.subGoals = subGoals;\n      this.logger.info('Decomposed goal into sub-goals', { goalId: goal.id, count: subGoals.length });\n      \n      return subGoals;\n    } catch (error) {\n      this.logger.error('Failed to decompose goal', error);\n      return [];\n    }\n  }\n\n  /**\n   * Convert a goal to executable tasks\n   */\n  public async goalToTasks(goal: Goal): Promise<Task[]> {\n    try {\n      this.logger.debug('Converting goal to tasks', { goalId: goal.id });\n      \n      const tasks: Task[] = [];\n      \n      // If goal has sub-goals, convert them first\n      if (goal.subGoals && goal.subGoals.length > 0) {\n        for (const subGoal of goal.subGoals) {\n          const subTasks = await this.goalToTasks(subGoal);\n          tasks.push(...subTasks);\n        }\n      } else {\n        // Create a single task for the goal\n        const task: Task = {\n          id: uuidv4(),\n          goalId: goal.id,\n          assignedTo: this.agentId,\n          description: goal.description,\n          status: TaskStatus.PENDING\n        };\n        tasks.push(task);\n      }\n      \n      this.logger.info('Converted goal to tasks', { goalId: goal.id, taskCount: tasks.length });\n      return tasks;\n    } catch (error) {\n      this.logger.error('Failed to convert goal to tasks', error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if a goal is ready to be processed\n   */\n  private isGoalReady(goal: Goal): boolean {\n    if (goal.status !== GoalStatus.PENDING) {\n      return false;\n    }\n    \n    // Check dependencies\n    for (const depId of goal.dependencies) {\n      const depGoal = this.goals.get(depId);\n      if (!depGoal || depGoal.status !== GoalStatus.COMPLETED) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  /**\n   * Check and activate dependent goals\n   */\n  private checkDependentGoals(completedGoalId: string): void {\n    for (const [goalId, deps] of this.goalDependencies) {\n      if (deps.has(completedGoalId)) {\n        const goal = this.goals.get(goalId);\n        if (goal && this.isGoalReady(goal)) {\n          this.goalQueue.enqueue(goal);\n          this.emit('goal:ready', goal);\n        }\n      }\n    }\n  }\n\n  /**\n   * Identify steps in a goal description\n   */\n  private identifySteps(description: string): string[] {\n    const steps: string[] = [];\n    \n    // Look for numbered steps\n    const numberedSteps = description.match(/\\d+\\.\\s+[^.]+/g);\n    if (numberedSteps) {\n      return numberedSteps.map(step => step.replace(/^\\d+\\.\\s+/, ''));\n    }\n    \n    // Look for sequence words\n    const sequenceWords = ['first', 'then', 'next', 'after', 'finally'];\n    const doc = nlp(description);\n    const sentences = doc.sentences().out('array');\n    \n    for (const sentence of sentences) {\n      const hasSequence = sequenceWords.some(word => \n        sentence.toLowerCase().includes(word)\n      );\n      if (hasSequence) {\n        steps.push(sentence);\n      }\n    }\n    \n    return steps.length > 0 ? steps : [description];\n  }\n\n  /**\n   * Compare goals for priority queue\n   */\n  private compareGoals(a: Goal, b: Goal): number {\n    // Priority comparison\n    const priorityWeight = { \n      [GoalPriority.CRITICAL]: 4,\n      [GoalPriority.HIGH]: 3,\n      [GoalPriority.MEDIUM]: 2,\n      [GoalPriority.LOW]: 1\n    };\n    \n    const priorityDiff = priorityWeight[b.priority] - priorityWeight[a.priority];\n    if (priorityDiff !== 0) return priorityDiff;\n    \n    // Deadline comparison\n    if (a.deadline && b.deadline) {\n      return a.deadline.getTime() - b.deadline.getTime();\n    } else if (a.deadline) {\n      return -1;\n    } else if (b.deadline) {\n      return 1;\n    }\n    \n    return 0;\n  }\n\n  /**\n   * Get all goals\n   */\n  public getAllGoals(): Goal[] {\n    return Array.from(this.goals.values());\n  }\n\n  /**\n   * Get goals by status\n   */\n  public getGoalsByStatus(status: GoalStatus): Goal[] {\n    return Array.from(this.goals.values()).filter(goal => goal.status === status);\n  }\n\n  /**\n   * Clear all goals\n   */\n  public clearGoals(): void {\n    this.goals.clear();\n    this.goalDependencies.clear();\n    this.goalQueue.clear();\n    this.emit('goals:cleared');\n  }\n}\n\n/**\n * Priority Queue implementation for goal scheduling\n */\nclass PriorityQueue<T> {\n  private items: T[] = [];\n  private compare: (a: T, b: T) => number;\n\n  constructor(compareFunction: (a: T, b: T) => number) {\n    this.compare = compareFunction;\n  }\n\n  enqueue(item: T): void {\n    this.items.push(item);\n    this.items.sort(this.compare);\n  }\n\n  dequeue(): T | undefined {\n    return this.items.shift();\n  }\n\n  isEmpty(): boolean {\n    return this.items.length === 0;\n  }\n\n  size(): number {\n    return this.items.length;\n  }\n\n  clear(): void {\n    this.items = [];\n  }\n}","import { EventEmitter } from 'eventemitter3';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  AgentId,\n  AgentProfile,\n  AgentType,\n  AgentState,\n  AgentCapability,\n  Goal,\n  Message,\n  Task,\n  AgentConfig,\n  AgentLifecycleHooks,\n  PerformanceMetrics\n} from '../types';\nimport { Logger } from '../utils/logger';\nimport { MessageBus } from '../communication/message-bus';\nimport { GoalEngine } from '../goal-engine/goal-engine';\n\n/**\n * Base class for all autonomous agents in the Agentic Flow framework\n */\nexport abstract class BaseAgent extends EventEmitter {\n  protected readonly id: AgentId;\n  protected readonly logger: Logger;\n  protected profile: AgentProfile;\n  protected config: AgentConfig;\n  protected hooks: AgentLifecycleHooks;\n  protected messageBus: MessageBus;\n  protected goalEngine: GoalEngine;\n  protected activeTasks: Map<string, Task>;\n  protected messageHandlers: Map<string, (message: Message) => Promise<void>>;\n\n  constructor(\n    name: string,\n    type: AgentType,\n    config: AgentConfig = {},\n    hooks: AgentLifecycleHooks = {}\n  ) {\n    super();\n    \n    this.id = {\n      id: uuidv4(),\n      namespace: 'default'\n    };\n    \n    this.logger = new Logger(`Agent:${name}`);\n    this.config = this.mergeConfig(config);\n    this.hooks = hooks;\n    this.activeTasks = new Map();\n    this.messageHandlers = new Map();\n    \n    this.profile = this.createProfile(name, type);\n    this.messageBus = MessageBus.getInstance();\n    this.goalEngine = new GoalEngine(this.id);\n    \n    this.setupMessageHandlers();\n    this.setupEventListeners();\n  }\n\n  /**\n   * Create the agent's profile\n   */\n  private createProfile(name: string, type: AgentType): AgentProfile {\n    const now = new Date();\n    return {\n      id: this.id,\n      name,\n      type,\n      capabilities: this.defineCapabilities(),\n      goals: [],\n      state: AgentState.IDLE,\n      metadata: {\n        createdAt: now,\n        updatedAt: now,\n        version: '1.0.0',\n        tags: [],\n        performance: {\n          tasksCompleted: 0,\n          successRate: 0,\n          averageResponseTime: 0,\n          resourceUtilization: 0,\n          communicationEfficiency: 0\n        }\n      }\n    };\n  }\n\n  /**\n   * Define agent capabilities - must be implemented by subclasses\n   */\n  protected abstract defineCapabilities(): AgentCapability[];\n\n  /**\n   * Process incoming goals - must be implemented by subclasses\n   */\n  protected abstract processGoal(goal: Goal): Promise<void>;\n\n  /**\n   * Execute a task - must be implemented by subclasses\n   */\n  protected abstract executeTask(task: Task): Promise<any>;\n\n  /**\n   * Initialize the agent\n   */\n  public async initialize(): Promise<void> {\n    try {\n      this.logger.info('Initializing agent...', { id: this.id });\n      \n      // Register with message bus\n      await this.messageBus.registerAgent(this.id);\n      \n      // Run initialization hook\n      if (this.hooks.onInit) {\n        await this.hooks.onInit();\n      }\n      \n      this.updateState(AgentState.IDLE);\n      this.emit('initialized', this.profile);\n      \n      this.logger.info('Agent initialized successfully', { id: this.id });\n    } catch (error) {\n      this.logger.error('Failed to initialize agent', error);\n      this.updateState(AgentState.ERROR);\n      throw error;\n    }\n  }\n\n  /**\n   * Start the agent\n   */\n  public async start(): Promise<void> {\n    try {\n      this.logger.info('Starting agent...', { id: this.id });\n      \n      // Subscribe to messages\n      this.messageBus.subscribe(this.id, this.handleMessage.bind(this));\n      \n      // Run start hook\n      if (this.hooks.onStart) {\n        await this.hooks.onStart();\n      }\n      \n      this.updateState(AgentState.IDLE);\n      this.emit('started', this.profile);\n      \n      this.logger.info('Agent started successfully', { id: this.id });\n    } catch (error) {\n      this.logger.error('Failed to start agent', error);\n      this.updateState(AgentState.ERROR);\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the agent\n   */\n  public async stop(): Promise<void> {\n    try {\n      this.logger.info('Stopping agent...', { id: this.id });\n      \n      // Cancel active tasks\n      for (const [, task] of this.activeTasks) {\n        task.status = TaskStatus.CANCELLED;\n        this.emit('task:cancelled', task);\n      }\n      this.activeTasks.clear();\n      \n      // Unsubscribe from messages\n      this.messageBus.unsubscribe(this.id);\n      \n      // Run stop hook\n      if (this.hooks.onStop) {\n        await this.hooks.onStop();\n      }\n      \n      this.updateState(AgentState.TERMINATED);\n      this.emit('stopped', this.profile);\n      \n      this.logger.info('Agent stopped successfully', { id: this.id });\n    } catch (error) {\n      this.logger.error('Failed to stop agent', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add a new goal to the agent\n   */\n  public async addGoal(goal: Goal): Promise<void> {\n    try {\n      this.logger.info('Adding new goal', { goalId: goal.id });\n      \n      // Add to goal engine\n      await this.goalEngine.addGoal(goal);\n      \n      // Add to profile\n      this.profile.goals.push(goal);\n      \n      // Run goal received hook\n      if (this.hooks.onGoalReceived) {\n        await this.hooks.onGoalReceived(goal);\n      }\n      \n      // Process the goal\n      this.updateState(AgentState.THINKING);\n      await this.processGoal(goal);\n      \n      this.emit('goal:added', goal);\n    } catch (error) {\n      this.logger.error('Failed to add goal', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a message to another agent or broadcast\n   */\n  public async sendMessage(\n    to: AgentId | AgentId[],\n    type: MessageType,\n    content: MessageContent,\n    priority: MessagePriority = MessagePriority.NORMAL\n  ): Promise<void> {\n    const message: Message = {\n      id: uuidv4(),\n      from: this.id,\n      to,\n      type,\n      content,\n      timestamp: new Date(),\n      priority\n    };\n    \n    this.updateState(AgentState.COMMUNICATING);\n    await this.messageBus.send(message);\n    this.updateState(AgentState.IDLE);\n    \n    this.emit('message:sent', message);\n  }\n\n  /**\n   * Reply to a message\n   */\n  public async reply(\n    originalMessage: Message,\n    type: MessageType,\n    content: MessageContent,\n    priority?: MessagePriority\n  ): Promise<void> {\n    const replyMessage: Message = {\n      id: uuidv4(),\n      from: this.id,\n      to: originalMessage.from,\n      type,\n      content,\n      timestamp: new Date(),\n      replyTo: originalMessage.id,\n      priority: priority || originalMessage.priority\n    };\n    \n    await this.messageBus.send(replyMessage);\n    this.emit('message:sent', replyMessage);\n  }\n\n  /**\n   * Handle incoming messages\n   */\n  private async handleMessage(message: Message): Promise<void> {\n    try {\n      this.logger.debug('Received message', { messageId: message.id, type: message.type });\n      \n      // Run message hook\n      if (this.hooks.onMessage) {\n        await this.hooks.onMessage(message);\n      }\n      \n      // Check for registered handler\n      const handler = this.messageHandlers.get(message.type);\n      if (handler) {\n        await handler(message);\n      } else {\n        await this.handleUnknownMessage(message);\n      }\n      \n      this.emit('message:received', message);\n    } catch (error) {\n      this.logger.error('Failed to handle message', error);\n      this.emit('message:error', { message, error });\n    }\n  }\n\n  /**\n   * Handle unknown message types\n   */\n  protected async handleUnknownMessage(message: Message): Promise<void> {\n    this.logger.warn('Received unknown message type', { type: message.type });\n  }\n\n  /**\n   * Register a message handler\n   */\n  protected registerMessageHandler(\n    type: MessageType,\n    handler: (message: Message) => Promise<void>\n  ): void {\n    this.messageHandlers.set(type, handler);\n  }\n\n  /**\n   * Update agent state\n   */\n  protected updateState(state: AgentState): void {\n    const previousState = this.profile.state;\n    this.profile.state = state;\n    this.profile.metadata.updatedAt = new Date();\n    \n    this.emit('state:changed', { previous: previousState, current: state });\n  }\n\n  /**\n   * Update performance metrics\n   */\n  protected updatePerformanceMetrics(updates: Partial<PerformanceMetrics>): void {\n    Object.assign(this.profile.metadata.performance, updates);\n    this.emit('metrics:updated', this.profile.metadata.performance);\n  }\n\n  /**\n   * Setup message handlers\n   */\n  private setupMessageHandlers(): void {\n    // Default handlers can be overridden by subclasses\n    this.registerMessageHandler(MessageType.QUERY, async (message) => {\n      await this.handleQueryMessage(message);\n    });\n    \n    this.registerMessageHandler(MessageType.COMMAND, async (message) => {\n      await this.handleCommandMessage(message);\n    });\n  }\n\n  /**\n   * Setup event listeners\n   */\n  private setupEventListeners(): void {\n    this.on('error', (error) => {\n      this.logger.error('Agent error', error);\n      if (this.hooks.onError) {\n        this.hooks.onError(error).catch(err => \n          this.logger.error('Error in error hook', err)\n        );\n      }\n    });\n  }\n\n  /**\n   * Handle query messages\n   */\n  protected async handleQueryMessage(message: Message): Promise<void> {\n    // Default implementation - can be overridden\n    this.logger.debug('Handling query message', { content: message.content });\n  }\n\n  /**\n   * Handle command messages\n   */\n  protected async handleCommandMessage(message: Message): Promise<void> {\n    // Default implementation - can be overridden\n    this.logger.debug('Handling command message', { content: message.content });\n  }\n\n  /**\n   * Merge configuration with defaults\n   */\n  private mergeConfig(config: AgentConfig): AgentConfig {\n    return {\n      maxConcurrentTasks: 5,\n      communicationTimeout: 30000,\n      retryAttempts: 3,\n      memoryLimit: 100 * 1024 * 1024, // 100MB\n      learningRate: 0.01,\n      ...config\n    };\n  }\n\n  /**\n   * Get agent profile\n   */\n  public getProfile(): AgentProfile {\n    return { ...this.profile };\n  }\n\n  /**\n   * Get agent ID\n   */\n  public getId(): AgentId {\n    return { ...this.id };\n  }\n\n  /**\n   * Get current state\n   */\n  public getState(): AgentState {\n    return this.profile.state;\n  }\n\n  /**\n   * Get active goals\n   */\n  public getGoals(): Goal[] {\n    return [...this.profile.goals];\n  }\n\n  /**\n   * Get capabilities\n   */\n  public getCapabilities(): AgentCapability[] {\n    return [...this.profile.capabilities];\n  }\n}\n\n// Re-export types needed by task execution\nimport { TaskStatus, MessageType, MessageContent, MessagePriority } from '../types';","import { EventEmitter } from 'eventemitter3';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  Team,\n  TeamFormation,\n  TeamStatus,\n  AgentId,\n  Goal,\n  GoalPriority,\n  GoalStatus,\n  AgentProfile,\n  AgentCapability,\n  AgentState as AgentStateEnum,\n  CoordinationStrategy,\n  CoordinationContext,\n  Message,\n  MessageType,\n  MessagePriority,\n  Constraint\n} from '../types';\nimport { Logger } from '../utils/logger';\nimport { MessageBus } from '../communication/message-bus';\n\n/**\n * Team coordinator for managing agent teams and coordination\n */\nexport class TeamCoordinator extends EventEmitter {\n  private readonly logger: Logger;\n  private readonly messageBus: MessageBus;\n  private teams: Map<string, Team>;\n  private agentTeams: Map<string, string>; // agentId -> teamId\n  private strategies: Map<string, CoordinationStrategy>;\n\n  constructor() {\n    super();\n    this.logger = new Logger('TeamCoordinator');\n    this.messageBus = MessageBus.getInstance();\n    this.teams = new Map();\n    this.agentTeams = new Map();\n    this.strategies = new Map();\n    \n    this.initializeStrategies();\n  }\n\n  /**\n   * Initialize default coordination strategies\n   */\n  private initializeStrategies(): void {\n    // Hierarchical strategy\n    this.registerStrategy({\n      type: 'hierarchical',\n      parameters: { levels: 3 },\n      evaluate: (context) => {\n        // Evaluate based on team size and goal complexity\n        const teamSize = context.team.members.length;\n        const goalComplexity = context.currentGoals.reduce((sum, g) => \n          sum + (g.subGoals?.length || 1), 0\n        );\n        return teamSize > 5 && goalComplexity > 10 ? 0.9 : 0.5;\n      }\n    });\n    \n    // Flat strategy\n    this.registerStrategy({\n      type: 'flat',\n      parameters: { maxSize: 10 },\n      evaluate: (context) => {\n        // Better for small teams with simple goals\n        const teamSize = context.team.members.length;\n        const goalComplexity = context.currentGoals.reduce((sum, g) => \n          sum + (g.subGoals?.length || 1), 0\n        );\n        return teamSize <= 5 && goalComplexity <= 5 ? 0.9 : 0.3;\n      }\n    });\n    \n    // Matrix strategy\n    this.registerStrategy({\n      type: 'matrix',\n      parameters: { dimensions: 2 },\n      evaluate: (context) => {\n        // Good for cross-functional teams\n        const uniqueCapabilities = new Set<string>();\n        context.team.members.forEach(memberId => {\n          // In real implementation, would look up agent capabilities\n          uniqueCapabilities.add('default');\n        });\n        return uniqueCapabilities.size > 3 ? 0.8 : 0.4;\n      }\n    });\n    \n    // Dynamic strategy\n    this.registerStrategy({\n      type: 'dynamic',\n      parameters: { adaptationRate: 0.1 },\n      evaluate: (context) => {\n        // Always moderately good, adapts over time\n        return 0.7;\n      }\n    });\n  }\n\n  /**\n   * Create a new team\n   */\n  public async createTeam(\n    name: string,\n    leader: AgentId,\n    goals: Goal[],\n    formation: TeamFormation = TeamFormation.DYNAMIC\n  ): Promise<Team> {\n    try {\n      this.logger.info('Creating new team', { name, leader: leader.id });\n      \n      const team: Team = {\n        id: uuidv4(),\n        name,\n        leader,\n        members: [leader],\n        goals,\n        formation,\n        status: TeamStatus.FORMING,\n        createdAt: new Date()\n      };\n      \n      // Store team\n      this.teams.set(team.id, team);\n      this.agentTeams.set(this.getAgentKey(leader), team.id);\n      \n      // Notify leader\n      await this.notifyTeamUpdate(team, 'team:created');\n      \n      this.emit('team:created', team);\n      return team;\n    } catch (error) {\n      this.logger.error('Failed to create team', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add member to team\n   */\n  public async addMember(teamId: string, agentId: AgentId): Promise<void> {\n    const team = this.teams.get(teamId);\n    if (!team) {\n      throw new Error(`Team not found: ${teamId}`);\n    }\n    \n    const agentKey = this.getAgentKey(agentId);\n    \n    // Check if agent is already in a team\n    if (this.agentTeams.has(agentKey)) {\n      throw new Error(`Agent already in team: ${agentKey}`);\n    }\n    \n    // Add to team\n    team.members.push(agentId);\n    this.agentTeams.set(agentKey, teamId);\n    \n    // Notify team members\n    await this.notifyTeamUpdate(team, 'member:added', { newMember: agentId });\n    \n    this.logger.info('Added member to team', { teamId, agentId: agentKey });\n    this.emit('team:memberAdded', { team, member: agentId });\n  }\n\n  /**\n   * Remove member from team\n   */\n  public async removeMember(teamId: string, agentId: AgentId): Promise<void> {\n    const team = this.teams.get(teamId);\n    if (!team) {\n      throw new Error(`Team not found: ${teamId}`);\n    }\n    \n    const agentKey = this.getAgentKey(agentId);\n    \n    // Remove from team\n    team.members = team.members.filter(m => \n      this.getAgentKey(m) !== agentKey\n    );\n    this.agentTeams.delete(agentKey);\n    \n    // Check if team is empty\n    if (team.members.length === 0) {\n      await this.disbandTeam(teamId);\n      return;\n    }\n    \n    // Assign new leader if needed\n    if (this.getAgentKey(team.leader) === agentKey) {\n      team.leader = team.members[0];\n      await this.notifyTeamUpdate(team, 'leader:changed', { newLeader: team.leader });\n    }\n    \n    // Notify remaining members\n    await this.notifyTeamUpdate(team, 'member:removed', { removedMember: agentId });\n    \n    this.logger.info('Removed member from team', { teamId, agentId: agentKey });\n    this.emit('team:memberRemoved', { team, member: agentId });\n  }\n\n  /**\n   * Assign goal to team\n   */\n  public async assignGoal(teamId: string, goal: Goal): Promise<void> {\n    const team = this.teams.get(teamId);\n    if (!team) {\n      throw new Error(`Team not found: ${teamId}`);\n    }\n    \n    // Add goal\n    team.goals.push(goal);\n    \n    // Update team status if needed\n    if (team.status === TeamStatus.ACTIVE) {\n      team.status = TeamStatus.EXECUTING;\n    }\n    \n    // Notify team members\n    await this.notifyTeamUpdate(team, 'goal:assigned', { goal });\n    \n    // Coordinate goal execution\n    await this.coordinateGoalExecution(team, goal);\n    \n    this.logger.info('Assigned goal to team', { teamId, goalId: goal.id });\n    this.emit('team:goalAssigned', { team, goal });\n  }\n\n  /**\n   * Coordinate goal execution within team\n   */\n  private async coordinateGoalExecution(team: Team, goal: Goal): Promise<void> {\n    try {\n      // Select coordination strategy\n      const strategy = this.selectStrategy(team, [goal]);\n      \n      // Create coordination context\n      const context: CoordinationContext = {\n        team,\n        currentGoals: [goal],\n        agentStates: new Map(), // Would be populated with actual states\n        environment: {}\n      };\n      \n      // Apply strategy\n      this.logger.debug('Applying coordination strategy', { \n        teamId: team.id, \n        strategy: strategy.type \n      });\n      \n      // Decompose goal based on team formation\n      const taskAssignments = await this.decomposeAndAssign(team, goal, strategy);\n      \n      // Send task assignments to team members\n      for (const [agentId, tasks] of taskAssignments) {\n        await this.messageBus.send({\n          id: uuidv4(),\n          from: team.leader,\n          to: agentId,\n          type: MessageType.COMMAND,\n          content: {\n            topic: 'task:assignment',\n            body: { tasks, goal, strategy: strategy.type }\n          },\n          timestamp: new Date(),\n          priority: MessagePriority.HIGH\n        });\n      }\n      \n      this.emit('coordination:executed', { team, goal, strategy });\n    } catch (error) {\n      this.logger.error('Failed to coordinate goal execution', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Decompose goal and assign tasks to team members using real coordination algorithms\n   */\n  private async decomposeAndAssign(\n    team: Team,\n    goal: Goal,\n    strategy: CoordinationStrategy\n  ): Promise<Map<AgentId, any[]>> {\n    const assignments = new Map<AgentId, any[]>();\n    \n    // Get agent capabilities for intelligent assignment\n    const agentCapabilities = await this.getTeamCapabilities(team);\n    \n    // Decompose goal based on strategy\n    const subGoals = goal.subGoals || await this.intelligentGoalDecomposition(goal);\n    \n    switch (strategy.type) {\n      case 'hierarchical':\n        return this.hierarchicalAssignment(team, subGoals, agentCapabilities);\n      case 'flat':\n        return this.capabilityBasedAssignment(team, subGoals, agentCapabilities);\n      case 'matrix':\n        return this.matrixAssignment(team, subGoals, agentCapabilities);\n      case 'dynamic':\n        return this.dynamicAssignment(team, subGoals, agentCapabilities);\n      default:\n        return this.defaultAssignment(team, subGoals);\n    }\n  }\n  \n  /**\n   * Get capabilities of all team members\n   */\n  private async getTeamCapabilities(team: Team): Promise<Map<string, string[]>> {\n    const capabilities = new Map<string, string[]>();\n    \n    for (const member of team.members) {\n      try {\n        // Query agent for capabilities\n        const response = await this.messageBus.sendAndWaitForResponse({\n          id: uuidv4(),\n          from: team.leader,\n          to: member,\n          type: MessageType.REQUEST,\n          content: {\n            topic: 'capability:query',\n            body: { requestId: uuidv4() }\n          },\n          timestamp: new Date(),\n          priority: MessagePriority.HIGH\n        }, 5000);\n        \n        const agentKey = this.getAgentKey(member);\n        capabilities.set(agentKey, response.content.body.capabilities || []);\n      } catch (error) {\n        this.logger.warn('Failed to get agent capabilities', { member: this.getAgentKey(member), error });\n        capabilities.set(this.getAgentKey(member), []);\n      }\n    }\n    \n    return capabilities;\n  }\n  \n  /**\n   * Intelligent goal decomposition\n   */\n  private async intelligentGoalDecomposition(goal: Goal): Promise<Goal[]> {\n    const decomposed: Goal[] = [];\n    \n    // Analyze goal complexity and type\n    const complexityScore = this.analyzeGoalComplexity(goal);\n    \n    if (complexityScore > 0.7) {\n      // High complexity - break into phases\n      const phases = this.identifyGoalPhases(goal);\n      \n      phases.forEach((phase, index) => {\n        decomposed.push({\n          id: uuidv4(),\n          description: phase.description,\n          type: goal.type,\n          priority: goal.priority,\n          status: GoalStatus.PENDING,\n          dependencies: index > 0 ? [decomposed[index - 1].id] : [],\n          constraints: phase.constraints || [],\n          subGoals: [],\n          metadata: {\n            parentGoal: goal.id,\n            phase: index + 1,\n            totalPhases: phases.length\n          }\n        });\n      });\n    } else {\n      // Low complexity - create parallel sub-goals\n      const subTasks = this.identifyParallelTasks(goal);\n      \n      subTasks.forEach(task => {\n        decomposed.push({\n          id: uuidv4(),\n          description: task.description,\n          type: goal.type,\n          priority: task.priority || goal.priority,\n          status: GoalStatus.PENDING,\n          dependencies: [],\n          constraints: task.constraints || [],\n          subGoals: [],\n          metadata: {\n            parentGoal: goal.id,\n            taskType: task.type\n          }\n        });\n      });\n    }\n    \n    return decomposed.length > 0 ? decomposed : [goal];\n  }\n  \n  /**\n   * Hierarchical task assignment\n   */\n  private async hierarchicalAssignment(\n    team: Team,\n    subGoals: Goal[],\n    agentCapabilities: Map<string, string[]>\n  ): Promise<Map<AgentId, any[]>> {\n    const assignments = new Map<AgentId, any[]>();\n    \n    // Leader handles coordination and complex tasks\n    const leaderKey = this.getAgentKey(team.leader);\n    const leaderCapabilities = agentCapabilities.get(leaderKey) || [];\n    \n    const complexTasks: Goal[] = [];\n    const simpleTasks: Goal[] = [];\n    \n    subGoals.forEach(goal => {\n      if (this.analyzeGoalComplexity(goal) > 0.6) {\n        complexTasks.push(goal);\n      } else {\n        simpleTasks.push(goal);\n      }\n    });\n    \n    // Assign complex tasks to leader if capable\n    if (complexTasks.length > 0) {\n      assignments.set(team.leader, complexTasks.map(task => ({\n        goalId: task.id,\n        description: task.description,\n        type: task.type,\n        priority: task.priority,\n        role: 'coordinator'\n      })));\n    }\n    \n    // Distribute simple tasks among other members\n    const otherMembers = team.members.filter(m => this.getAgentKey(m) !== leaderKey);\n    this.distributeTasksByCapability(simpleTasks, otherMembers, agentCapabilities, assignments);\n    \n    return assignments;\n  }\n  \n  /**\n   * Capability-based assignment\n   */\n  private async capabilityBasedAssignment(\n    team: Team,\n    subGoals: Goal[],\n    agentCapabilities: Map<string, string[]>\n  ): Promise<Map<AgentId, any[]>> {\n    const assignments = new Map<AgentId, any[]>();\n    \n    for (const goal of subGoals) {\n      const requiredCapabilities = this.analyzeRequiredCapabilities(goal);\n      const bestAgent = this.findBestAgentForTask(team.members, requiredCapabilities, agentCapabilities);\n      \n      if (!assignments.has(bestAgent)) {\n        assignments.set(bestAgent, []);\n      }\n      \n      assignments.get(bestAgent)!.push({\n        goalId: goal.id,\n        description: goal.description,\n        type: goal.type,\n        priority: goal.priority,\n        requiredCapabilities,\n        assignmentReason: 'capability-match'\n      });\n    }\n    \n    return assignments;\n  }\n  \n  /**\n   * Matrix assignment for cross-functional collaboration\n   */\n  private async matrixAssignment(\n    team: Team,\n    subGoals: Goal[],\n    agentCapabilities: Map<string, string[]>\n  ): Promise<Map<AgentId, any[]>> {\n    const assignments = new Map<AgentId, any[]>();\n    \n    // Create capability matrix\n    const capabilityMatrix = this.createCapabilityMatrix(team.members, agentCapabilities);\n    \n    for (const goal of subGoals) {\n      const requiredCapabilities = this.analyzeRequiredCapabilities(goal);\n      \n      if (requiredCapabilities.length > 1) {\n        // Multi-capability task - assign to multiple agents\n        const collaborativeAssignment = this.createCollaborativeAssignment(\n          goal, \n          requiredCapabilities, \n          capabilityMatrix\n        );\n        \n        for (const [agentId, taskPart] of collaborativeAssignment) {\n          if (!assignments.has(agentId)) {\n            assignments.set(agentId, []);\n          }\n          assignments.get(agentId)!.push(taskPart);\n        }\n      } else {\n        // Single capability task - standard assignment\n        const bestAgent = this.findBestAgentForTask(team.members, requiredCapabilities, agentCapabilities);\n        \n        if (!assignments.has(bestAgent)) {\n          assignments.set(bestAgent, []);\n        }\n        \n        assignments.get(bestAgent)!.push({\n          goalId: goal.id,\n          description: goal.description,\n          type: goal.type,\n          priority: goal.priority,\n          role: 'primary'\n        });\n      }\n    }\n    \n    return assignments;\n  }\n  \n  /**\n   * Dynamic assignment based on current workload and performance\n   */\n  private async dynamicAssignment(\n    team: Team,\n    subGoals: Goal[],\n    agentCapabilities: Map<string, string[]>\n  ): Promise<Map<AgentId, any[]>> {\n    const assignments = new Map<AgentId, any[]>();\n    \n    // Get current workload for each agent\n    const workloads = await this.getTeamWorkloads(team);\n    \n    // Sort goals by priority\n    const sortedGoals = subGoals.sort((a, b) => {\n      const priorityWeight = {\n        'critical': 4,\n        'high': 3,\n        'medium': 2,\n        'low': 1\n      };\n      return priorityWeight[b.priority] - priorityWeight[a.priority];\n    });\n    \n    for (const goal of sortedGoals) {\n      const requiredCapabilities = this.analyzeRequiredCapabilities(goal);\n      \n      // Find agent with matching capabilities and lowest workload\n      const candidateAgents = team.members.filter(agent => {\n        const agentKey = this.getAgentKey(agent);\n        const capabilities = agentCapabilities.get(agentKey) || [];\n        return this.hasRequiredCapabilities(capabilities, requiredCapabilities);\n      });\n      \n      if (candidateAgents.length === 0) {\n        // No perfect match - assign to least loaded agent\n        const leastLoadedAgent = this.getLeastLoadedAgent(team.members, workloads);\n        \n        if (!assignments.has(leastLoadedAgent)) {\n          assignments.set(leastLoadedAgent, []);\n        }\n        \n        assignments.get(leastLoadedAgent)!.push({\n          goalId: goal.id,\n          description: goal.description,\n          type: goal.type,\n          priority: goal.priority,\n          needsSupport: true,\n          supportCapabilities: requiredCapabilities\n        });\n      } else {\n        // Find least loaded among capable agents\n        const bestAgent = this.getLeastLoadedAgent(candidateAgents, workloads);\n        \n        if (!assignments.has(bestAgent)) {\n          assignments.set(bestAgent, []);\n        }\n        \n        assignments.get(bestAgent)!.push({\n          goalId: goal.id,\n          description: goal.description,\n          type: goal.type,\n          priority: goal.priority,\n          confidence: 'high'\n        });\n        \n        // Update workload simulation\n        const agentKey = this.getAgentKey(bestAgent);\n        workloads.set(agentKey, (workloads.get(agentKey) || 0) + this.estimateTaskLoad(goal));\n      }\n    }\n    \n    return assignments;\n  }\n  \n  /**\n   * Utility methods for assignment algorithms\n   */\n  private analyzeGoalComplexity(goal: Goal): number {\n    let complexity = 0;\n    \n    // Analyze description complexity\n    const words = goal.description.toLowerCase().split(' ');\n    const complexityIndicators = [\n      'analyze', 'research', 'implement', 'design', 'create',\n      'optimize', 'integrate', 'coordinate', 'synthesize'\n    ];\n    \n    complexity += words.filter(word => \n      complexityIndicators.some(indicator => word.includes(indicator))\n    ).length * 0.1;\n    \n    // Consider constraints\n    complexity += (goal.constraints?.length || 0) * 0.05;\n    \n    // Consider sub-goals\n    complexity += (goal.subGoals?.length || 0) * 0.1;\n    \n    // Consider dependencies\n    complexity += goal.dependencies.length * 0.05;\n    \n    return Math.min(complexity, 1.0);\n  }\n  \n  private identifyGoalPhases(goal: Goal): Array<{ description: string; constraints?: Constraint[] }> {\n    const phases = [];\n    const description = goal.description.toLowerCase();\n    \n    if (description.includes('research') || description.includes('analyze')) {\n      phases.push({ description: `Research and analysis for: ${goal.description}` });\n    }\n    \n    if (description.includes('design') || description.includes('plan')) {\n      phases.push({ description: `Design and planning for: ${goal.description}` });\n    }\n    \n    if (description.includes('implement') || description.includes('build') || description.includes('create')) {\n      phases.push({ description: `Implementation of: ${goal.description}` });\n    }\n    \n    if (description.includes('test') || description.includes('verify') || description.includes('validate')) {\n      phases.push({ description: `Testing and validation for: ${goal.description}` });\n    }\n    \n    return phases.length > 0 ? phases : [{ description: goal.description }];\n  }\n  \n  private identifyParallelTasks(goal: Goal): Array<{ description: string; type?: string; priority?: GoalPriority; constraints?: Constraint[] }> {\n    const tasks = [];\n    const description = goal.description.toLowerCase();\n    \n    // Identify different aspects that can be worked on in parallel\n    if (description.includes('data') || description.includes('information')) {\n      tasks.push({ \n        description: `Data collection and preparation for: ${goal.description}`,\n        type: 'data_task'\n      });\n    }\n    \n    if (description.includes('interface') || description.includes('ui') || description.includes('user')) {\n      tasks.push({ \n        description: `User interface work for: ${goal.description}`,\n        type: 'ui_task'\n      });\n    }\n    \n    if (description.includes('backend') || description.includes('server') || description.includes('api')) {\n      tasks.push({ \n        description: `Backend development for: ${goal.description}`,\n        type: 'backend_task'\n      });\n    }\n    \n    if (description.includes('documentation') || description.includes('docs')) {\n      tasks.push({ \n        description: `Documentation for: ${goal.description}`,\n        type: 'documentation_task',\n        priority: GoalPriority.LOW\n      });\n    }\n    \n    return tasks.length > 0 ? tasks : [{ description: goal.description }];\n  }\n  \n  private analyzeRequiredCapabilities(goal: Goal): string[] {\n    const capabilities = [];\n    const description = goal.description.toLowerCase();\n    \n    // Map keywords to capabilities\n    const capabilityMap = {\n      'research': ['research', 'analysis'],\n      'analyze': ['analysis', 'data_processing'],\n      'code': ['programming', 'software_development'],\n      'implement': ['programming', 'implementation'],\n      'design': ['design', 'architecture'],\n      'write': ['writing', 'documentation'],\n      'test': ['testing', 'quality_assurance'],\n      'coordinate': ['coordination', 'project_management'],\n      'ui': ['ui_design', 'frontend_development'],\n      'backend': ['backend_development', 'server_management'],\n      'data': ['data_processing', 'database_management']\n    };\n    \n    for (const [keyword, caps] of Object.entries(capabilityMap)) {\n      if (description.includes(keyword)) {\n        capabilities.push(...caps);\n      }\n    }\n    \n    return [...new Set(capabilities)];\n  }\n  \n  private findBestAgentForTask(\n    agents: AgentId[],\n    requiredCapabilities: string[],\n    agentCapabilities: Map<string, string[]>\n  ): AgentId {\n    if (requiredCapabilities.length === 0) {\n      return agents[0]; // Default to first agent\n    }\n    \n    let bestAgent = agents[0];\n    let bestScore = -1;\n    \n    for (const agent of agents) {\n      const agentKey = this.getAgentKey(agent);\n      const capabilities = agentCapabilities.get(agentKey) || [];\n      \n      const matchingCapabilities = requiredCapabilities.filter(req => \n        capabilities.some(cap => cap.toLowerCase().includes(req.toLowerCase()))\n      );\n      \n      const score = matchingCapabilities.length / requiredCapabilities.length;\n      \n      if (score > bestScore) {\n        bestScore = score;\n        bestAgent = agent;\n      }\n    }\n    \n    return bestAgent;\n  }\n  \n  private distributeTasksByCapability(\n    tasks: Goal[],\n    agents: AgentId[],\n    agentCapabilities: Map<string, string[]>,\n    assignments: Map<AgentId, any[]>\n  ): void {\n    for (const task of tasks) {\n      const requiredCapabilities = this.analyzeRequiredCapabilities(task);\n      const bestAgent = this.findBestAgentForTask(agents, requiredCapabilities, agentCapabilities);\n      \n      if (!assignments.has(bestAgent)) {\n        assignments.set(bestAgent, []);\n      }\n      \n      assignments.get(bestAgent)!.push({\n        goalId: task.id,\n        description: task.description,\n        type: task.type,\n        priority: task.priority,\n        role: 'executor'\n      });\n    }\n  }\n  \n  private createCapabilityMatrix(agents: AgentId[], agentCapabilities: Map<string, string[]>): Map<string, Set<string>> {\n    const matrix = new Map<string, Set<string>>();\n    \n    for (const agent of agents) {\n      const agentKey = this.getAgentKey(agent);\n      const capabilities = agentCapabilities.get(agentKey) || [];\n      matrix.set(agentKey, new Set(capabilities));\n    }\n    \n    return matrix;\n  }\n  \n  private createCollaborativeAssignment(\n    goal: Goal,\n    requiredCapabilities: string[],\n    capabilityMatrix: Map<string, Set<string>>\n  ): Map<AgentId, any> {\n    const assignment = new Map<AgentId, any>();\n    \n    for (const capability of requiredCapabilities) {\n      const capableAgents = Array.from(capabilityMatrix.entries())\n        .filter(([_, caps]) => caps.has(capability))\n        .map(([agentKey, _]) => agentKey);\n      \n      if (capableAgents.length > 0) {\n        const selectedAgentKey = capableAgents[0]; // Simple selection\n        const agentId = { id: selectedAgentKey.split(':')[1], namespace: selectedAgentKey.split(':')[0] };\n        \n        assignment.set(agentId, {\n          goalId: goal.id,\n          description: `${capability} work for: ${goal.description}`,\n          type: goal.type,\n          priority: goal.priority,\n          role: 'collaborator',\n          focus: capability\n        });\n      }\n    }\n    \n    return assignment;\n  }\n  \n  private async getTeamWorkloads(team: Team): Promise<Map<string, number>> {\n    const workloads = new Map<string, number>();\n    \n    for (const member of team.members) {\n      try {\n        const response = await this.messageBus.sendAndWaitForResponse({\n          id: uuidv4(),\n          from: team.leader,\n          to: member,\n          type: MessageType.REQUEST,\n          content: {\n            topic: 'state:query',\n            body: { requestId: uuidv4() }\n          },\n          timestamp: new Date(),\n          priority: MessagePriority.NORMAL\n        }, 3000);\n        \n        const agentKey = this.getAgentKey(member);\n        workloads.set(agentKey, response.content.body.workload || 0);\n      } catch (error) {\n        const agentKey = this.getAgentKey(member);\n        workloads.set(agentKey, 50); // Default moderate workload\n      }\n    }\n    \n    return workloads;\n  }\n  \n  private hasRequiredCapabilities(agentCapabilities: string[], requiredCapabilities: string[]): boolean {\n    return requiredCapabilities.some(required => \n      agentCapabilities.some(agent => agent.toLowerCase().includes(required.toLowerCase()))\n    );\n  }\n  \n  private getLeastLoadedAgent(agents: AgentId[], workloads: Map<string, number>): AgentId {\n    let leastLoadedAgent = agents[0];\n    let lowestWorkload = Infinity;\n    \n    for (const agent of agents) {\n      const agentKey = this.getAgentKey(agent);\n      const workload = workloads.get(agentKey) || 0;\n      \n      if (workload < lowestWorkload) {\n        lowestWorkload = workload;\n        leastLoadedAgent = agent;\n      }\n    }\n    \n    return leastLoadedAgent;\n  }\n  \n  private estimateTaskLoad(goal: Goal): number {\n    const complexity = this.analyzeGoalComplexity(goal);\n    const priorityWeight = {\n      'critical': 1.5,\n      'high': 1.2,\n      'medium': 1.0,\n      'low': 0.8\n    };\n    \n    return complexity * priorityWeight[goal.priority] * 20; // Base load of 20\n  }\n  \n  private defaultAssignment(team: Team, subGoals: Goal[]): Map<AgentId, any[]> {\n    const assignments = new Map<AgentId, any[]>();\n    \n    subGoals.forEach((subGoal, index) => {\n      const assignedAgent = team.members[index % team.members.length];\n      \n      if (!assignments.has(assignedAgent)) {\n        assignments.set(assignedAgent, []);\n      }\n      \n      assignments.get(assignedAgent)!.push({\n        goalId: subGoal.id,\n        description: subGoal.description,\n        type: subGoal.type,\n        priority: subGoal.priority\n      });\n    });\n    \n    return assignments;\n  }\n\n  /**\n   * Select best coordination strategy for current context\n   */\n  private selectStrategy(team: Team, goals: Goal[]): CoordinationStrategy {\n    let bestStrategy: CoordinationStrategy | null = null;\n    let bestScore = -1;\n    \n    const context: CoordinationContext = {\n      team,\n      currentGoals: goals,\n      agentStates: new Map(),\n      environment: {}\n    };\n    \n    // Evaluate each strategy\n    for (const strategy of this.strategies.values()) {\n      const score = strategy.evaluate(context);\n      if (score > bestScore) {\n        bestScore = score;\n        bestStrategy = strategy;\n      }\n    }\n    \n    // Default to team's formation strategy\n    if (!bestStrategy) {\n      bestStrategy = this.strategies.get(team.formation) || \n                   this.strategies.get('dynamic')!;\n    }\n    \n    return bestStrategy;\n  }\n\n  /**\n   * Update team status\n   */\n  public async updateTeamStatus(teamId: string, status: TeamStatus): Promise<void> {\n    const team = this.teams.get(teamId);\n    if (!team) {\n      throw new Error(`Team not found: ${teamId}`);\n    }\n    \n    const previousStatus = team.status;\n    team.status = status;\n    \n    await this.notifyTeamUpdate(team, 'status:changed', { previousStatus, newStatus: status });\n    \n    this.logger.info('Updated team status', { teamId, previousStatus, newStatus: status });\n    this.emit('team:statusChanged', { team, previousStatus, newStatus: status });\n  }\n\n  /**\n   * Disband a team\n   */\n  public async disbandTeam(teamId: string): Promise<void> {\n    const team = this.teams.get(teamId);\n    if (!team) {\n      throw new Error(`Team not found: ${teamId}`);\n    }\n    \n    // Update status\n    team.status = TeamStatus.DISBANDED;\n    \n    // Remove all members from team mapping\n    team.members.forEach(member => {\n      this.agentTeams.delete(this.getAgentKey(member));\n    });\n    \n    // Notify members\n    await this.notifyTeamUpdate(team, 'team:disbanded');\n    \n    // Remove team\n    this.teams.delete(teamId);\n    \n    this.logger.info('Disbanded team', { teamId });\n    this.emit('team:disbanded', team);\n  }\n\n  /**\n   * Notify team members of updates\n   */\n  private async notifyTeamUpdate(\n    team: Team,\n    updateType: string,\n    data?: any\n  ): Promise<void> {\n    const message: Message = {\n      id: uuidv4(),\n      from: team.leader,\n      to: team.members,\n      type: MessageType.INFORM,\n      content: {\n        topic: updateType,\n        body: {\n          teamId: team.id,\n          teamName: team.name,\n          ...data\n        }\n      },\n      timestamp: new Date(),\n      priority: MessagePriority.HIGH\n    };\n    \n    await this.messageBus.send(message);\n  }\n\n  /**\n   * Register a coordination strategy\n   */\n  public registerStrategy(strategy: CoordinationStrategy): void {\n    this.strategies.set(strategy.type, strategy);\n    this.logger.info('Registered coordination strategy', { type: strategy.type });\n  }\n\n  /**\n   * Get team by ID\n   */\n  public getTeam(teamId: string): Team | undefined {\n    return this.teams.get(teamId);\n  }\n\n  /**\n   * Get team for agent\n   */\n  public getAgentTeam(agentId: AgentId): Team | undefined {\n    const teamId = this.agentTeams.get(this.getAgentKey(agentId));\n    return teamId ? this.teams.get(teamId) : undefined;\n  }\n\n  /**\n   * Get all teams\n   */\n  public getAllTeams(): Team[] {\n    return Array.from(this.teams.values());\n  }\n\n  /**\n   * Get teams by status\n   */\n  public getTeamsByStatus(status: TeamStatus): Team[] {\n    return Array.from(this.teams.values()).filter(team => team.status === status);\n  }\n\n  /**\n   * Find teams capable of handling specific goal types\n   */\n  public findCapableTeams(requiredCapabilities: string[]): Team[] {\n    // In real implementation, would check actual agent capabilities\n    // For now, return all active teams\n    return this.getTeamsByStatus(TeamStatus.ACTIVE);\n  }\n\n  /**\n   * Get agent key for consistent identification\n   */\n  private getAgentKey(agentId: AgentId): string {\n    return `${agentId.namespace || 'default'}:${agentId.id}`;\n  }\n\n  /**\n   * Real-time performance-based team optimization\n   */\n  public async optimizeTeamFormation(teamId: string): Promise<void> {\n    const team = this.teams.get(teamId);\n    if (!team) {\n      throw new Error(`Team not found: ${teamId}`);\n    }\n    \n    // Get real performance metrics\n    const performanceMetrics = await this.gatherTeamPerformanceMetrics(team);\n    const agentStates = await this.getTeamStates(team);\n    \n    const context: CoordinationContext = {\n      team,\n      currentGoals: team.goals,\n      agentStates,\n      environment: {\n        performance: performanceMetrics,\n        timestamp: new Date()\n      }\n    };\n    \n    // Evaluate current formation\n    const currentStrategy = this.strategies.get(team.formation);\n    if (!currentStrategy) return;\n    \n    const currentScore = currentStrategy.evaluate(context);\n    \n    // Test all available strategies with current context\n    let bestFormation = team.formation;\n    let bestScore = currentScore;\n    let bestStrategy: CoordinationStrategy | null = null;\n    \n    for (const [formationType, strategy] of this.strategies) {\n      const score = strategy.evaluate(context);\n      \n      this.logger.debug('Strategy evaluation', {\n        teamId,\n        strategy: formationType,\n        score,\n        currentScore\n      });\n      \n      if (score > bestScore) {\n        bestScore = score;\n        bestFormation = formationType as TeamFormation;\n        bestStrategy = strategy;\n      }\n    }\n    \n    // Apply optimization if significant improvement found\n    const improvementThreshold = 0.1; // 10% improvement required\n    if (bestFormation !== team.formation && \n        (bestScore - currentScore) > improvementThreshold) {\n      \n      const previousFormation = team.formation;\n      team.formation = bestFormation;\n      \n      // Implement formation change\n      await this.implementFormationChange(team, previousFormation, bestFormation, bestStrategy!);\n      \n      await this.notifyTeamUpdate(team, 'formation:optimized', { \n        previousFormation,\n        newFormation: bestFormation,\n        improvement: bestScore - currentScore,\n        performanceMetrics\n      });\n      \n      this.logger.info('Team formation optimized', { \n        teamId, \n        previousFormation,\n        newFormation: bestFormation,\n        improvement: bestScore - currentScore\n      });\n    } else {\n      this.logger.debug('No significant improvement found', {\n        teamId,\n        currentScore,\n        bestScore,\n        improvement: bestScore - currentScore\n      });\n    }\n  }\n  \n  /**\n   * Gather real performance metrics from team members\n   */\n  private async gatherTeamPerformanceMetrics(team: Team): Promise<any> {\n    const metrics = {\n      completionRate: 0,\n      averageResponseTime: 0,\n      errorRate: 0,\n      collaborationScore: 0,\n      workloadBalance: 0\n    };\n    \n    let successfulResponses = 0;\n    \n    for (const member of team.members) {\n      try {\n        const response = await this.messageBus.sendAndWaitForResponse({\n          id: uuidv4(),\n          from: team.leader,\n          to: member,\n          type: MessageType.REQUEST,\n          content: {\n            topic: 'performance:metrics',\n            body: { timeframe: '1h' }\n          },\n          timestamp: new Date(),\n          priority: MessagePriority.NORMAL\n        }, 5000);\n        \n        const agentMetrics = response.content.body;\n        \n        // Aggregate metrics\n        metrics.completionRate += agentMetrics.tasksCompleted || 0;\n        metrics.averageResponseTime += agentMetrics.averageResponseTime || 0;\n        metrics.errorRate += agentMetrics.errorRate || 0;\n        \n        successfulResponses++;\n      } catch (error) {\n        this.logger.warn('Failed to get performance metrics', { \n          member: this.getAgentKey(member),\n          error \n        });\n      }\n    }\n    \n    // Calculate averages\n    if (successfulResponses > 0) {\n      metrics.completionRate /= successfulResponses;\n      metrics.averageResponseTime /= successfulResponses;\n      metrics.errorRate /= successfulResponses;\n    }\n    \n    // Calculate collaboration score based on message patterns\n    metrics.collaborationScore = await this.calculateCollaborationScore(team);\n    \n    // Calculate workload balance\n    metrics.workloadBalance = await this.calculateWorkloadBalance(team);\n    \n    return metrics;\n  }\n  \n  /**\n   * Get current states of all team members\n   */\n  private async getTeamStates(team: Team): Promise<Map<string, AgentStateEnum>> {\n    const states = new Map<string, AgentStateEnum>();\n    \n    for (const member of team.members) {\n      try {\n        const response = await this.messageBus.sendAndWaitForResponse({\n          id: uuidv4(),\n          from: team.leader,\n          to: member,\n          type: MessageType.REQUEST,\n          content: {\n            topic: 'state:query',\n            body: {}\n          },\n          timestamp: new Date(),\n          priority: MessagePriority.NORMAL\n        }, 3000);\n        \n        const agentKey = this.getAgentKey(member);\n        states.set(agentKey, response.content.body.state || AgentStateEnum.IDLE);\n      } catch (error) {\n        const agentKey = this.getAgentKey(member);\n        states.set(agentKey, AgentStateEnum.IDLE);\n      }\n    }\n    \n    return states;\n  }\n  \n  /**\n   * Implement formation change with coordination\n   */\n  private async implementFormationChange(\n    team: Team,\n    previousFormation: TeamFormation,\n    newFormation: TeamFormation,\n    strategy: CoordinationStrategy\n  ): Promise<void> {\n    // Notify all team members of formation change\n    await this.notifyTeamUpdate(team, 'formation:changing', {\n      previousFormation,\n      newFormation,\n      strategy: strategy.type\n    });\n    \n    // Reorganize based on new formation\n    switch (newFormation) {\n      case TeamFormation.HIERARCHICAL:\n        await this.implementHierarchicalStructure(team);\n        break;\n      case TeamFormation.FLAT:\n        await this.implementFlatStructure(team);\n        break;\n      case TeamFormation.MATRIX:\n        await this.implementMatrixStructure(team);\n        break;\n      case TeamFormation.DYNAMIC:\n        await this.implementDynamicStructure(team);\n        break;\n    }\n    \n    // Update coordination patterns\n    await this.updateCoordinationPatterns(team, newFormation);\n  }\n  \n  /**\n   * Calculate collaboration score based on message patterns\n   */\n  private async calculateCollaborationScore(team: Team): Promise<number> {\n    const coordinationMetrics = this.messageBus.getCoordinationMetrics();\n    \n    // Simple collaboration scoring based on communication patterns\n    const messageCount = coordinationMetrics.messageCount;\n    const responseTime = coordinationMetrics.averageResponseTime;\n    const activeAgents = coordinationMetrics.activeAgents;\n    \n    // Normalize and combine metrics\n    const messageScore = Math.min(messageCount / 100, 1); // Up to 100 messages is good\n    const responseScore = Math.max(0, 1 - (responseTime / 10000)); // Under 10 seconds is good\n    const participationScore = activeAgents / team.members.length;\n    \n    return (messageScore + responseScore + participationScore) / 3;\n  }\n  \n  /**\n   * Calculate workload balance across team\n   */\n  private async calculateWorkloadBalance(team: Team): Promise<number> {\n    const workloads = await this.getTeamWorkloads(team);\n    const workloadValues = Array.from(workloads.values());\n    \n    if (workloadValues.length === 0) return 1;\n    \n    const average = workloadValues.reduce((sum, val) => sum + val, 0) / workloadValues.length;\n    const variance = workloadValues.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / workloadValues.length;\n    const standardDeviation = Math.sqrt(variance);\n    \n    // Lower standard deviation = better balance\n    // Normalize to 0-1 scale where 1 is perfect balance\n    return Math.max(0, 1 - (standardDeviation / 50)); // 50 is reasonable max deviation\n  }\n  \n  /**\n   * Formation-specific implementation methods\n   */\n  private async implementHierarchicalStructure(team: Team): Promise<void> {\n    // Set up clear reporting structure\n    await this.messageBus.send({\n      id: uuidv4(),\n      from: team.leader,\n      to: team.members.filter(m => this.getAgentKey(m) !== this.getAgentKey(team.leader)),\n      type: MessageType.INFORM,\n      content: {\n        topic: 'structure:hierarchical',\n        body: {\n          leader: team.leader,\n          reportingStructure: 'centralized',\n          decisionMaking: 'top-down'\n        }\n      },\n      timestamp: new Date(),\n      priority: MessagePriority.HIGH\n    });\n  }\n  \n  private async implementFlatStructure(team: Team): Promise<void> {\n    // Enable peer-to-peer communication\n    await this.messageBus.send({\n      id: uuidv4(),\n      from: team.leader,\n      to: team.members,\n      type: MessageType.INFORM,\n      content: {\n        topic: 'structure:flat',\n        body: {\n          communicationPattern: 'peer-to-peer',\n          decisionMaking: 'consensus',\n          autonomy: 'high'\n        }\n      },\n      timestamp: new Date(),\n      priority: MessagePriority.HIGH\n    });\n  }\n  \n  private async implementMatrixStructure(team: Team): Promise<void> {\n    // Set up cross-functional collaboration\n    await this.messageBus.send({\n      id: uuidv4(),\n      from: team.leader,\n      to: team.members,\n      type: MessageType.INFORM,\n      content: {\n        topic: 'structure:matrix',\n        body: {\n          collaborationPattern: 'cross-functional',\n          reportingStructure: 'dual',\n          taskAllocation: 'capability-based'\n        }\n      },\n      timestamp: new Date(),\n      priority: MessagePriority.HIGH\n    });\n  }\n  \n  private async implementDynamicStructure(team: Team): Promise<void> {\n    // Enable adaptive coordination\n    await this.messageBus.send({\n      id: uuidv4(),\n      from: team.leader,\n      to: team.members,\n      type: MessageType.INFORM,\n      content: {\n        topic: 'structure:dynamic',\n        body: {\n          adaptationEnabled: true,\n          restructuringTriggers: ['performance', 'workload', 'capabilities'],\n          evaluationInterval: '15m'\n        }\n      },\n      timestamp: new Date(),\n      priority: MessagePriority.HIGH\n    });\n  }\n  \n  private async updateCoordinationPatterns(team: Team, formation: TeamFormation): Promise<void> {\n    // Update message routing and coordination rules based on new formation\n    const patterns = {\n      [TeamFormation.HIERARCHICAL]: 'hub-and-spoke',\n      [TeamFormation.FLAT]: 'mesh',\n      [TeamFormation.MATRIX]: 'hybrid',\n      [TeamFormation.DYNAMIC]: 'adaptive'\n    };\n    \n    await this.messageBus.send({\n      id: uuidv4(),\n      from: team.leader,\n      to: team.members,\n      type: MessageType.INFORM,\n      content: {\n        topic: 'coordination:pattern_updated',\n        body: {\n          pattern: patterns[formation],\n          formation,\n          effectiveAt: new Date()\n        }\n      },\n      timestamp: new Date(),\n      priority: MessagePriority.HIGH\n    });\n  }\n}","import { BaseAgent } from '../core/agent.base';\nimport {\n  AgentType,\n  AgentCapability,\n  Goal,\n  Task,\n  TaskStatus,\n  Message,\n  MessageType,\n  MessagePriority,\n  Team,\n  TeamFormation\n} from '../types';\nimport { TeamCoordinator } from '../coordination/team-coordinator';\n\n/**\n * Coordinator agent responsible for team management and high-level coordination\n */\nexport class CoordinatorAgent extends BaseAgent {\n  private teamCoordinator: TeamCoordinator;\n  private managedTeams: Set<string>;\n\n  constructor(name: string = 'Coordinator') {\n    super(name, AgentType.COORDINATOR, {\n      maxConcurrentTasks: 10,\n      communicationTimeout: 60000\n    });\n    \n    this.teamCoordinator = new TeamCoordinator();\n    this.managedTeams = new Set();\n    \n    this.setupCoordinatorHandlers();\n  }\n\n  /**\n   * Define coordinator capabilities\n   */\n  protected defineCapabilities(): AgentCapability[] {\n    return [\n      {\n        name: 'team-formation',\n        description: 'Form teams of agents for complex goals'\n      },\n      {\n        name: 'goal-decomposition',\n        description: 'Break down complex goals into manageable sub-goals'\n      },\n      {\n        name: 'task-delegation',\n        description: 'Delegate tasks to appropriate agents or teams'\n      },\n      {\n        name: 'progress-monitoring',\n        description: 'Monitor and track progress of delegated tasks'\n      },\n      {\n        name: 'conflict-resolution',\n        description: 'Resolve conflicts between agents or teams'\n      },\n      {\n        name: 'resource-allocation',\n        description: 'Allocate resources optimally across teams'\n      }\n    ];\n  }\n\n  /**\n   * Process incoming goals\n   */\n  protected async processGoal(goal: Goal): Promise<void> {\n    try {\n      this.logger.info('Processing coordinator goal', { goalId: goal.id });\n      \n      // Decompose complex goal\n      const subGoals = await this.goalEngine.decomposeGoal(goal);\n      \n      if (subGoals.length > 1) {\n        // Complex goal requiring team coordination\n        await this.handleComplexGoal(goal, subGoals);\n      } else {\n        // Simple goal - delegate directly\n        await this.delegateSimpleGoal(goal);\n      }\n      \n      // Update goal status\n      await this.goalEngine.updateGoalStatus(goal.id, GoalStatus.ACTIVE);\n    } catch (error) {\n      this.logger.error('Failed to process goal', error);\n      await this.goalEngine.updateGoalStatus(goal.id, GoalStatus.FAILED);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle complex goals requiring team formation\n   */\n  private async handleComplexGoal(goal: Goal, subGoals: Goal[]): Promise<void> {\n    // Determine required capabilities\n    const requiredCapabilities = this.analyzeRequiredCapabilities(subGoals);\n    \n    // Check if existing team can handle it\n    let team = this.findSuitableTeam(requiredCapabilities);\n    \n    if (!team) {\n      // Form new team\n      team = await this.formTeam(goal, requiredCapabilities);\n    }\n    \n    // Assign goal to team\n    await this.teamCoordinator.assignGoal(team.id, goal);\n    \n    // Track team\n    this.managedTeams.add(team.id);\n  }\n\n  /**\n   * Form a new team for a goal\n   */\n  private async formTeam(goal: Goal, requiredCapabilities: string[]): Promise<Team> {\n    // Request agents with required capabilities\n    const availableAgents = await this.requestAvailableAgents(requiredCapabilities);\n    \n    // Select best formation strategy\n    const formation = this.selectFormationStrategy(goal, availableAgents.length);\n    \n    // Create team with self as leader\n    const team = await this.teamCoordinator.createTeam(\n      `Team-${goal.id}`,\n      this.id,\n      [goal],\n      formation\n    );\n    \n    // Add selected agents to team\n    for (const agentId of availableAgents) {\n      await this.teamCoordinator.addMember(team.id, agentId);\n    }\n    \n    // Update team status\n    await this.teamCoordinator.updateTeamStatus(team.id, TeamStatus.ACTIVE);\n    \n    return team;\n  }\n\n  /**\n   * Execute coordinator-specific tasks\n   */\n  protected async executeTask(task: Task): Promise<any> {\n    try {\n      this.logger.debug('Executing coordinator task', { taskId: task.id });\n      \n      switch (task.description) {\n        case 'monitor-progress':\n          return await this.monitorProgress(task);\n        case 'resolve-conflict':\n          return await this.resolveConflict(task);\n        case 'optimize-teams':\n          return await this.optimizeTeams(task);\n        default:\n          // Delegate to specialized handler\n          return await this.handleSpecializedTask(task);\n      }\n    } catch (error) {\n      this.logger.error('Task execution failed', error);\n      task.status = TaskStatus.FAILED;\n      task.error = error as Error;\n      throw error;\n    }\n  }\n\n  /**\n   * Monitor progress of teams and agents\n   */\n  private async monitorProgress(_task: Task): Promise<any> {\n    const progress = {\n      teams: [] as any[],\n      overallCompletion: 0\n    };\n    \n    for (const teamId of this.managedTeams) {\n      const team = this.teamCoordinator.getTeam(teamId);\n      if (team) {\n        const teamProgress = await this.getTeamProgress(team);\n        progress.teams.push({\n          teamId: team.id,\n          status: team.status,\n          progress: teamProgress\n        });\n      }\n    }\n    \n    progress.overallCompletion = progress.teams.reduce((sum, t) => \n      sum + t.progress, 0\n    ) / progress.teams.length;\n    \n    return progress;\n  }\n\n  /**\n   * Get progress for a specific team\n   */\n  private async getTeamProgress(team: Team): Promise<number> {\n    // Query team members for progress\n    const progressReports = await Promise.all(\n      team.members.map(member => this.queryAgentProgress(member))\n    );\n    \n    return progressReports.reduce((sum, p) => sum + p, 0) / progressReports.length;\n  }\n\n  /**\n   * Query an agent for progress\n   */\n  private async queryAgentProgress(agentId: AgentId): Promise<number> {\n    return new Promise((resolve) => {\n      const timeout = setTimeout(() => resolve(0), 5000);\n      \n      this.once(`progress:${agentId.id}`, (progress: number) => {\n        clearTimeout(timeout);\n        resolve(progress);\n      });\n      \n      this.sendMessage(\n        agentId,\n        MessageType.QUERY,\n        { topic: 'progress', body: {} },\n        MessagePriority.HIGH\n      );\n    });\n  }\n\n  /**\n   * Setup coordinator-specific message handlers\n   */\n  private setupCoordinatorHandlers(): void {\n    // Handle team requests\n    this.registerMessageHandler(MessageType.REQUEST, async (message) => {\n      if (message.content.topic === 'team:join') {\n        await this.handleTeamJoinRequest(message);\n      }\n    });\n    \n    // Handle progress reports\n    this.registerMessageHandler(MessageType.INFORM, async (message) => {\n      if (message.content.topic === 'progress:report') {\n        this.emit(`progress:${message.from.id}`, message.content.body.progress);\n      }\n    });\n  }\n\n  /**\n   * Handle team join requests\n   */\n  private async handleTeamJoinRequest(message: Message): Promise<void> {\n    const { capabilities } = message.content.body;\n    \n    // Find suitable team\n    const teams = this.teamCoordinator.findCapableTeams(capabilities);\n    \n    if (teams.length > 0) {\n      // Add to first suitable team\n      await this.teamCoordinator.addMember(teams[0].id, message.from);\n      \n      // Send confirmation\n      await this.sendMessage(\n        message.from,\n        MessageType.RESPONSE,\n        {\n          topic: 'team:joined',\n          body: { teamId: teams[0].id, role: 'member' }\n        }\n      );\n    } else {\n      // No suitable team\n      await this.sendMessage(\n        message.from,\n        MessageType.RESPONSE,\n        {\n          topic: 'team:unavailable',\n          body: { reason: 'No suitable team found' }\n        }\n      );\n    }\n  }\n\n  /**\n   * Delegate simple goals to individual agents\n   */\n  private async delegateSimpleGoal(goal: Goal): Promise<void> {\n    // Find capable agent\n    const agents = await this.requestAvailableAgents([goal.type]);\n    \n    if (agents.length > 0) {\n      // Send goal to first available agent\n      await this.sendMessage(\n        agents[0],\n        MessageType.COMMAND,\n        {\n          topic: 'goal:execute',\n          body: { goal }\n        },\n        MessagePriority.HIGH\n      );\n    } else {\n      // No capable agent - mark as failed\n      await this.goalEngine.updateGoalStatus(goal.id, GoalStatus.FAILED);\n    }\n  }\n\n  /**\n   * Request available agents with specific capabilities\n   */\n  private async requestAvailableAgents(capabilities: string[]): Promise<AgentId[]> {\n    return new Promise((resolve) => {\n      const agents: AgentId[] = [];\n      const timeout = setTimeout(() => resolve(agents), 10000);\n      \n      this.once('agents:available', (availableAgents: AgentId[]) => {\n        clearTimeout(timeout);\n        resolve(availableAgents);\n      });\n      \n      // Broadcast request\n      this.messageBus.broadcast(\n        this.id,\n        MessageType.REQUEST,\n        {\n          topic: 'agents:needed',\n          body: { capabilities, coordinator: this.id }\n        },\n        MessagePriority.HIGH\n      );\n    });\n  }\n\n  /**\n   * Analyze required capabilities from sub-goals\n   */\n  private analyzeRequiredCapabilities(subGoals: Goal[]): string[] {\n    const capabilities = new Set<string>();\n    \n    subGoals.forEach(goal => {\n      // Map goal types to capabilities\n      switch (goal.type) {\n        case GoalType.ACHIEVE:\n          capabilities.add('execution');\n          break;\n        case GoalType.QUERY:\n          capabilities.add('analysis');\n          break;\n        case GoalType.MAINTAIN:\n          capabilities.add('monitoring');\n          break;\n        default:\n          capabilities.add('general');\n      }\n    });\n    \n    return Array.from(capabilities);\n  }\n\n  /**\n   * Select best team formation strategy\n   */\n  private selectFormationStrategy(_goal: Goal, teamSize: number): TeamFormation {\n    if (teamSize <= 3) {\n      return TeamFormation.FLAT;\n    } else if (teamSize <= 7) {\n      return TeamFormation.HIERARCHICAL;\n    } else {\n      return TeamFormation.MATRIX;\n    }\n  }\n\n  /**\n   * Find suitable existing team\n   */\n  private findSuitableTeam(requiredCapabilities: string[]): Team | undefined {\n    const teams = this.teamCoordinator.findCapableTeams(requiredCapabilities);\n    \n    // Return first team that's not at capacity\n    return teams.find(team => \n      team.status === TeamStatus.ACTIVE && \n      team.members.length < 10\n    );\n  }\n\n  /**\n   * Resolve conflicts between agents or teams\n   */\n  private async resolveConflict(task: Task): Promise<any> {\n    // Placeholder for conflict resolution logic\n    this.logger.info('Resolving conflict', { taskId: task.id });\n    return { resolved: true };\n  }\n\n  /**\n   * Optimize team formations\n   */\n  private async optimizeTeams(_task: Task): Promise<any> {\n    const optimizations = [];\n    \n    for (const teamId of this.managedTeams) {\n      await this.teamCoordinator.optimizeTeamFormation(teamId);\n      optimizations.push({ teamId, optimized: true });\n    }\n    \n    return { optimizations };\n  }\n\n  /**\n   * Handle specialized coordinator tasks\n   */\n  private async handleSpecializedTask(task: Task): Promise<any> {\n    this.logger.warn('Unhandled task type', { taskId: task.id, description: task.description });\n    return { handled: false };\n  }\n}\n\n// Re-export necessary types\nimport { GoalStatus, GoalType, TeamStatus, AgentId } from '../types';","import { BaseAgent } from '../core/agent.base';\nimport {\n  AgentType,\n  AgentCapability,\n  Goal,\n  Task,\n  TaskStatus,\n  Message,\n  MessageType\n} from '../types';\n\n/**\n * Executor agent responsible for executing specific tasks\n */\nexport class ExecutorAgent extends BaseAgent {\n  private executionQueue: Task[];\n  private executionHistory: Map<string, any>;\n\n  constructor(name: string = 'Executor') {\n    super(name, AgentType.EXECUTOR, {\n      maxConcurrentTasks: 3,\n      communicationTimeout: 30000\n    });\n    \n    this.executionQueue = [];\n    this.executionHistory = new Map();\n    \n    this.setupExecutorHandlers();\n  }\n\n  /**\n   * Define executor capabilities\n   */\n  protected defineCapabilities(): AgentCapability[] {\n    return [\n      {\n        name: 'task-execution',\n        description: 'Execute assigned tasks'\n      },\n      {\n        name: 'resource-management',\n        description: 'Manage execution resources'\n      },\n      {\n        name: 'status-reporting',\n        description: 'Report execution status and progress'\n      },\n      {\n        name: 'error-handling',\n        description: 'Handle execution errors gracefully'\n      }\n    ];\n  }\n\n  /**\n   * Process incoming goals\n   */\n  protected async processGoal(goal: Goal): Promise<void> {\n    try {\n      this.logger.info('Processing executor goal', { goalId: goal.id });\n      \n      // Convert goal to tasks\n      const tasks = await this.goalEngine.goalToTasks(goal);\n      \n      // Add tasks to execution queue\n      tasks.forEach(task => {\n        task.status = TaskStatus.ASSIGNED;\n        this.executionQueue.push(task);\n        this.activeTasks.set(task.id, task);\n      });\n      \n      // Start execution\n      await this.processExecutionQueue();\n      \n      // Update goal status\n      await this.goalEngine.updateGoalStatus(goal.id, GoalStatus.ACTIVE);\n    } catch (error) {\n      this.logger.error('Failed to process goal', error);\n      await this.goalEngine.updateGoalStatus(goal.id, GoalStatus.FAILED);\n      throw error;\n    }\n  }\n\n  /**\n   * Execute a specific task\n   */\n  protected async executeTask(task: Task): Promise<any> {\n    try {\n      this.logger.debug('Executing task', { taskId: task.id });\n      \n      task.status = TaskStatus.IN_PROGRESS;\n      task.startedAt = new Date();\n      \n      // Simulate task execution based on description\n      const result = await this.performTaskExecution(task);\n      \n      task.status = TaskStatus.COMPLETED;\n      task.completedAt = new Date();\n      task.result = result;\n      \n      // Store in history\n      this.executionHistory.set(task.id, result);\n      \n      // Report completion\n      await this.reportTaskCompletion(task);\n      \n      // Update performance metrics\n      this.updatePerformanceMetrics({\n        tasksCompleted: this.profile.metadata.performance.tasksCompleted + 1,\n        successRate: this.calculateSuccessRate()\n      });\n      \n      if (this.hooks.onTaskCompleted) {\n        await this.hooks.onTaskCompleted(task);\n      }\n      \n      return result;\n    } catch (error) {\n      this.logger.error('Task execution failed', error);\n      task.status = TaskStatus.FAILED;\n      task.error = error as Error;\n      task.completedAt = new Date();\n      \n      await this.reportTaskFailure(task);\n      throw error;\n    }\n  }\n\n  /**\n   * Perform actual task execution\n   */\n  private async performTaskExecution(task: Task): Promise<any> {\n    // Simulate different types of task execution\n    const executionTime = Math.random() * 5000 + 1000; // 1-6 seconds\n    \n    await new Promise(resolve => setTimeout(resolve, executionTime));\n    \n    // Return mock result based on task description\n    if (task.description.includes('calculate')) {\n      return { calculation: Math.random() * 100 };\n    } else if (task.description.includes('analyze')) {\n      return { analysis: 'Completed analysis', confidence: 0.85 };\n    } else if (task.description.includes('process')) {\n      return { processed: true, items: Math.floor(Math.random() * 50) };\n    }\n    \n    return { executed: true, timestamp: new Date() };\n  }\n\n  /**\n   * Process execution queue\n   */\n  private async processExecutionQueue(): Promise<void> {\n    while (this.executionQueue.length > 0 && \n           this.activeTasks.size < this.config.maxConcurrentTasks!) {\n      const task = this.executionQueue.shift();\n      if (task) {\n        // Execute task asynchronously\n        this.executeTask(task).catch(error => {\n          this.logger.error('Queue processing error', error);\n        });\n      }\n    }\n  }\n\n  /**\n   * Report task completion\n   */\n  private async reportTaskCompletion(task: Task): Promise<void> {\n    // Report to coordinator or requester\n    await this.sendMessage(\n      task.assignedTo,\n      MessageType.INFORM,\n      {\n        topic: 'task:completed',\n        body: {\n          taskId: task.id,\n          goalId: task.goalId,\n          result: task.result,\n          executionTime: task.completedAt!.getTime() - task.startedAt!.getTime()\n        }\n      }\n    );\n  }\n\n  /**\n   * Report task failure\n   */\n  private async reportTaskFailure(task: Task): Promise<void> {\n    await this.sendMessage(\n      task.assignedTo,\n      MessageType.INFORM,\n      {\n        topic: 'task:failed',\n        body: {\n          taskId: task.id,\n          goalId: task.goalId,\n          error: task.error?.message,\n          executionTime: task.completedAt!.getTime() - task.startedAt!.getTime()\n        }\n      }\n    );\n  }\n\n  /**\n   * Calculate success rate\n   */\n  private calculateSuccessRate(): number {\n    const completed = Array.from(this.executionHistory.keys()).length;\n    const failed = Array.from(this.activeTasks.values())\n      .filter(t => t.status === TaskStatus.FAILED).length;\n    \n    const total = completed + failed;\n    return total > 0 ? completed / total : 0;\n  }\n\n  /**\n   * Setup executor-specific message handlers\n   */\n  private setupExecutorHandlers(): void {\n    // Handle task assignments\n    this.registerMessageHandler(MessageType.COMMAND, async (message) => {\n      if (message.content.topic === 'task:assignment') {\n        await this.handleTaskAssignment(message);\n      }\n    });\n    \n    // Handle status queries\n    this.registerMessageHandler(MessageType.QUERY, async (message) => {\n      if (message.content.topic === 'status') {\n        await this.handleStatusQuery(message);\n      } else if (message.content.topic === 'progress') {\n        await this.handleProgressQuery(message);\n      }\n    });\n  }\n\n  /**\n   * Handle task assignment from coordinator\n   */\n  private async handleTaskAssignment(message: Message): Promise<void> {\n    const { tasks, goal } = message.content.body;\n    \n    // Add goal if provided\n    if (goal) {\n      await this.addGoal(goal);\n    }\n    \n    // Add tasks to queue\n    for (const taskData of tasks) {\n      const task: Task = {\n        id: taskData.id || uuidv4(),\n        goalId: taskData.goalId,\n        assignedTo: this.id,\n        description: taskData.description,\n        status: TaskStatus.ASSIGNED\n      };\n      \n      this.executionQueue.push(task);\n      this.activeTasks.set(task.id, task);\n    }\n    \n    // Process queue\n    await this.processExecutionQueue();\n    \n    // Acknowledge assignment\n    await this.reply(\n      message,\n      MessageType.ACKNOWLEDGE,\n      {\n        topic: 'task:acknowledged',\n        body: { tasksReceived: tasks.length }\n      }\n    );\n  }\n\n  /**\n   * Handle status query\n   */\n  private async handleStatusQuery(message: Message): Promise<void> {\n    const status = {\n      state: this.getState(),\n      activeTasks: this.activeTasks.size,\n      queuedTasks: this.executionQueue.length,\n      completedTasks: this.executionHistory.size,\n      performance: this.profile.metadata.performance\n    };\n    \n    await this.reply(\n      message,\n      MessageType.RESPONSE,\n      {\n        topic: 'status:report',\n        body: status\n      }\n    );\n  }\n\n  /**\n   * Handle progress query\n   */\n  private async handleProgressQuery(message: Message): Promise<void> {\n    const totalTasks = this.activeTasks.size + \n                      this.executionQueue.length + \n                      this.executionHistory.size;\n    \n    const progress = totalTasks > 0 \n      ? this.executionHistory.size / totalTasks \n      : 0;\n    \n    await this.reply(\n      message,\n      MessageType.INFORM,\n      {\n        topic: 'progress:report',\n        body: { progress }\n      }\n    );\n  }\n\n  /**\n   * Get execution history\n   */\n  public getExecutionHistory(): Map<string, any> {\n    return new Map(this.executionHistory);\n  }\n\n  /**\n   * Clear execution history\n   */\n  public clearHistory(): void {\n    this.executionHistory.clear();\n  }\n\n  /**\n   * Get queue status\n   */\n  public getQueueStatus(): { queued: number; active: number; completed: number } {\n    return {\n      queued: this.executionQueue.length,\n      active: this.activeTasks.size,\n      completed: this.executionHistory.size\n    };\n  }\n}\n\n// Re-export necessary types\nimport { v4 as uuidv4 } from 'uuid';\nimport { GoalStatus } from '../types';","// Workflow state management and persistence\nimport { EventEmitter } from 'events';\nimport { Database } from 'sqlite3';\nimport { v4 as uuidv4 } from 'uuid';\nimport { WorkflowExecution, WorkflowDefinition, WorkflowLog } from '../workflow-engine';\n\nexport interface WorkflowSnapshot {\n  id: string;\n  executionId: string;\n  timestamp: Date;\n  state: any;\n  checksum: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface WorkflowStateStore {\n  saveExecution(execution: WorkflowExecution): Promise<void>;\n  updateExecution(execution: WorkflowExecution): Promise<void>;\n  getExecution(executionId: string): Promise<WorkflowExecution | null>;\n  deleteExecution(executionId: string): Promise<void>;\n  \n  saveSnapshot(snapshot: WorkflowSnapshot): Promise<void>;\n  getLatestSnapshot(executionId: string): Promise<WorkflowSnapshot | null>;\n  getSnapshot(snapshotId: string): Promise<WorkflowSnapshot | null>;\n  deleteSnapshots(executionId: string): Promise<void>;\n  \n  saveWorkflowDefinition(workflow: WorkflowDefinition): Promise<void>;\n  getWorkflowDefinition(workflowId: string): Promise<WorkflowDefinition | null>;\n  \n  saveLogs(logs: WorkflowLog[], executionId: string): Promise<void>;\n  getLogs(executionId: string, limit?: number): Promise<WorkflowLog[]>;\n}\n\n// SQLite implementation of WorkflowStateStore\nexport class SQLiteWorkflowStateStore implements WorkflowStateStore {\n  private db: Database;\n  private initialized = false;\n\n  constructor(dbPath: string = ':memory:') {\n    this.db = new Database(dbPath);\n  }\n\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    await this.createTables();\n    this.initialized = true;\n  }\n\n  private createTables(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const createTablesSQL = `\n        -- Workflow definitions table\n        CREATE TABLE IF NOT EXISTS workflow_definitions (\n          id TEXT PRIMARY KEY,\n          name TEXT NOT NULL,\n          description TEXT,\n          version TEXT NOT NULL,\n          definition TEXT NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n        );\n\n        -- Workflow executions table\n        CREATE TABLE IF NOT EXISTS workflow_executions (\n          id TEXT PRIMARY KEY,\n          workflow_id TEXT NOT NULL,\n          status TEXT NOT NULL,\n          start_time DATETIME NOT NULL,\n          end_time DATETIME,\n          current_step TEXT,\n          variables TEXT,\n          results TEXT,\n          error_message TEXT,\n          parent_execution_id TEXT,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (workflow_id) REFERENCES workflow_definitions(id)\n        );\n\n        -- Workflow snapshots table\n        CREATE TABLE IF NOT EXISTS workflow_snapshots (\n          id TEXT PRIMARY KEY,\n          execution_id TEXT NOT NULL,\n          timestamp DATETIME NOT NULL,\n          state TEXT NOT NULL,\n          checksum TEXT NOT NULL,\n          metadata TEXT,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (execution_id) REFERENCES workflow_executions(id)\n        );\n\n        -- Workflow logs table\n        CREATE TABLE IF NOT EXISTS workflow_logs (\n          id TEXT PRIMARY KEY,\n          execution_id TEXT NOT NULL,\n          timestamp DATETIME NOT NULL,\n          level TEXT NOT NULL,\n          message TEXT NOT NULL,\n          step_id TEXT,\n          data TEXT,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (execution_id) REFERENCES workflow_executions(id)\n        );\n\n        -- Create indexes for better performance\n        CREATE INDEX IF NOT EXISTS idx_executions_workflow_id ON workflow_executions(workflow_id);\n        CREATE INDEX IF NOT EXISTS idx_executions_status ON workflow_executions(status);\n        CREATE INDEX IF NOT EXISTS idx_snapshots_execution_id ON workflow_snapshots(execution_id);\n        CREATE INDEX IF NOT EXISTS idx_snapshots_timestamp ON workflow_snapshots(timestamp);\n        CREATE INDEX IF NOT EXISTS idx_logs_execution_id ON workflow_logs(execution_id);\n        CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON workflow_logs(timestamp);\n      `;\n\n      this.db.exec(createTablesSQL, (err) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  async saveExecution(execution: WorkflowExecution): Promise<void> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        INSERT INTO workflow_executions (\n          id, workflow_id, status, start_time, end_time, current_step,\n          variables, results, error_message, parent_execution_id\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n      `;\n\n      const params = [\n        execution.id,\n        execution.workflowId,\n        execution.status,\n        execution.startTime.toISOString(),\n        execution.endTime?.toISOString() || null,\n        execution.currentStep || null,\n        JSON.stringify(execution.variables),\n        JSON.stringify(execution.results),\n        null, // error_message will be updated separately\n        null  // parent_execution_id\n      ];\n\n      this.db.run(sql, params, function(err) {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  async updateExecution(execution: WorkflowExecution): Promise<void> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        UPDATE workflow_executions \n        SET status = ?, end_time = ?, current_step = ?, variables = ?, \n            results = ?, error_message = ?, updated_at = CURRENT_TIMESTAMP\n        WHERE id = ?\n      `;\n\n      const params = [\n        execution.status,\n        execution.endTime?.toISOString() || null,\n        execution.currentStep || null,\n        JSON.stringify(execution.variables),\n        JSON.stringify(execution.results),\n        execution.logs.find(l => l.level === 'error')?.message || null,\n        execution.id\n      ];\n\n      this.db.run(sql, params, function(err) {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  async getExecution(executionId: string): Promise<WorkflowExecution | null> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT * FROM workflow_executions WHERE id = ?\n      `;\n\n      this.db.get(sql, [executionId], (err, row: any) => {\n        if (err) {\n          reject(err);\n        } else if (!row) {\n          resolve(null);\n        } else {\n          // Convert database row to WorkflowExecution\n          const execution: WorkflowExecution = {\n            id: row.id,\n            workflowId: row.workflow_id,\n            status: row.status,\n            startTime: new Date(row.start_time),\n            endTime: row.end_time ? new Date(row.end_time) : undefined,\n            currentStep: row.current_step,\n            variables: JSON.parse(row.variables || '{}'),\n            results: JSON.parse(row.results || '{}'),\n            logs: [] // Logs are loaded separately\n          };\n          resolve(execution);\n        }\n      });\n    });\n  }\n\n  async deleteExecution(executionId: string): Promise<void> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      // Delete in order due to foreign key constraints\n      const deleteStatements = [\n        'DELETE FROM workflow_logs WHERE execution_id = ?',\n        'DELETE FROM workflow_snapshots WHERE execution_id = ?',\n        'DELETE FROM workflow_executions WHERE id = ?'\n      ];\n\n      let completed = 0;\n      const total = deleteStatements.length;\n\n      deleteStatements.forEach(sql => {\n        this.db.run(sql, [executionId], (err) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          completed++;\n          if (completed === total) {\n            resolve();\n          }\n        });\n      });\n    });\n  }\n\n  async saveSnapshot(snapshot: WorkflowSnapshot): Promise<void> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        INSERT INTO workflow_snapshots (\n          id, execution_id, timestamp, state, checksum, metadata\n        ) VALUES (?, ?, ?, ?, ?, ?)\n      `;\n\n      const params = [\n        snapshot.id,\n        snapshot.executionId,\n        snapshot.timestamp.toISOString(),\n        JSON.stringify(snapshot.state),\n        snapshot.checksum,\n        JSON.stringify(snapshot.metadata || {})\n      ];\n\n      this.db.run(sql, params, function(err) {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  async getLatestSnapshot(executionId: string): Promise<WorkflowSnapshot | null> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT * FROM workflow_snapshots \n        WHERE execution_id = ? \n        ORDER BY timestamp DESC \n        LIMIT 1\n      `;\n\n      this.db.get(sql, [executionId], (err, row: any) => {\n        if (err) {\n          reject(err);\n        } else if (!row) {\n          resolve(null);\n        } else {\n          const snapshot: WorkflowSnapshot = {\n            id: row.id,\n            executionId: row.execution_id,\n            timestamp: new Date(row.timestamp),\n            state: JSON.parse(row.state),\n            checksum: row.checksum,\n            metadata: JSON.parse(row.metadata || '{}')\n          };\n          resolve(snapshot);\n        }\n      });\n    });\n  }\n\n  async getSnapshot(snapshotId: string): Promise<WorkflowSnapshot | null> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `SELECT * FROM workflow_snapshots WHERE id = ?`;\n\n      this.db.get(sql, [snapshotId], (err, row: any) => {\n        if (err) {\n          reject(err);\n        } else if (!row) {\n          resolve(null);\n        } else {\n          const snapshot: WorkflowSnapshot = {\n            id: row.id,\n            executionId: row.execution_id,\n            timestamp: new Date(row.timestamp),\n            state: JSON.parse(row.state),\n            checksum: row.checksum,\n            metadata: JSON.parse(row.metadata || '{}')\n          };\n          resolve(snapshot);\n        }\n      });\n    });\n  }\n\n  async deleteSnapshots(executionId: string): Promise<void> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `DELETE FROM workflow_snapshots WHERE execution_id = ?`;\n\n      this.db.run(sql, [executionId], function(err) {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  async saveWorkflowDefinition(workflow: WorkflowDefinition): Promise<void> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        INSERT OR REPLACE INTO workflow_definitions (\n          id, name, description, version, definition, updated_at\n        ) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n      `;\n\n      const params = [\n        workflow.id,\n        workflow.name,\n        workflow.description,\n        workflow.version,\n        JSON.stringify(workflow)\n      ];\n\n      this.db.run(sql, params, function(err) {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n\n  async getWorkflowDefinition(workflowId: string): Promise<WorkflowDefinition | null> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `SELECT definition FROM workflow_definitions WHERE id = ?`;\n\n      this.db.get(sql, [workflowId], (err, row: any) => {\n        if (err) {\n          reject(err);\n        } else if (!row) {\n          resolve(null);\n        } else {\n          resolve(JSON.parse(row.definition));\n        }\n      });\n    });\n  }\n\n  async saveLogs(logs: WorkflowLog[], executionId: string): Promise<void> {\n    await this.initialize();\n\n    if (logs.length === 0) return;\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        INSERT INTO workflow_logs (\n          id, execution_id, timestamp, level, message, step_id, data\n        ) VALUES (?, ?, ?, ?, ?, ?, ?)\n      `;\n\n      const stmt = this.db.prepare(sql);\n      let completed = 0;\n\n      logs.forEach(log => {\n        const params = [\n          uuidv4(),\n          executionId,\n          log.timestamp.toISOString(),\n          log.level,\n          log.message,\n          log.stepId || null,\n          JSON.stringify(log.data || {})\n        ];\n\n        stmt.run(params, (err: any) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          completed++;\n          if (completed === logs.length) {\n            stmt.finalize(() => resolve());\n          }\n        });\n      });\n    });\n  }\n\n  async getLogs(executionId: string, limit = 1000): Promise<WorkflowLog[]> {\n    await this.initialize();\n\n    return new Promise((resolve, reject) => {\n      const sql = `\n        SELECT * FROM workflow_logs \n        WHERE execution_id = ? \n        ORDER BY timestamp ASC \n        LIMIT ?\n      `;\n\n      this.db.all(sql, [executionId, limit], (err, rows: any[]) => {\n        if (err) {\n          reject(err);\n        } else {\n          const logs: WorkflowLog[] = rows.map(row => ({\n            timestamp: new Date(row.timestamp),\n            level: row.level,\n            message: row.message,\n            stepId: row.step_id,\n            data: JSON.parse(row.data || '{}')\n          }));\n          resolve(logs);\n        }\n      });\n    });\n  }\n\n  async close(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.db.close((err) => {\n        if (err) reject(err);\n        else resolve();\n      });\n    });\n  }\n}\n\n// Workflow State Manager - High-level interface\nexport class WorkflowStateManager extends EventEmitter {\n  private store: WorkflowStateStore;\n  private snapshotTimers: Map<string, NodeJS.Timeout> = new Map();\n\n  constructor(store: WorkflowStateStore) {\n    super();\n    this.store = store;\n  }\n\n  async saveExecution(execution: WorkflowExecution): Promise<void> {\n    await this.store.saveExecution(execution);\n    this.emit('execution:saved', { executionId: execution.id });\n  }\n\n  async updateExecution(execution: WorkflowExecution): Promise<void> {\n    await this.store.updateExecution(execution);\n    \n    // Save logs separately\n    if (execution.logs.length > 0) {\n      await this.store.saveLogs(execution.logs, execution.id);\n      execution.logs = []; // Clear logs after saving to prevent duplicates\n    }\n    \n    this.emit('execution:updated', { executionId: execution.id });\n  }\n\n  async getExecution(executionId: string): Promise<WorkflowExecution | null> {\n    const execution = await this.store.getExecution(executionId);\n    if (execution) {\n      // Load logs\n      execution.logs = await this.store.getLogs(executionId);\n    }\n    return execution;\n  }\n\n  async createSnapshot(executionId: string, state: any): Promise<string> {\n    const snapshot: WorkflowSnapshot = {\n      id: uuidv4(),\n      executionId,\n      timestamp: new Date(),\n      state,\n      checksum: this.calculateChecksum(state)\n    };\n\n    await this.store.saveSnapshot(snapshot);\n    this.emit('snapshot:created', { snapshotId: snapshot.id, executionId });\n    \n    return snapshot.id;\n  }\n\n  async restoreFromSnapshot(snapshotId: string): Promise<WorkflowExecution | null> {\n    const snapshot = await this.store.getSnapshot(snapshotId);\n    if (!snapshot) return null;\n\n    return snapshot.state;\n  }\n\n  async enableAutoSnapshots(executionId: string, intervalMs = 60000): Promise<void> {\n    // Clear existing timer\n    const existingTimer = this.snapshotTimers.get(executionId);\n    if (existingTimer) {\n      clearInterval(existingTimer);\n    }\n\n    // Set up new timer\n    const timer = setInterval(async () => {\n      try {\n        const execution = await this.getExecution(executionId);\n        if (execution && execution.status === 'running') {\n          await this.createSnapshot(executionId, execution);\n        } else {\n          // Stop timer if execution is not running\n          this.disableAutoSnapshots(executionId);\n        }\n      } catch (error) {\n        this.emit('error', { error, executionId, operation: 'auto-snapshot' });\n      }\n    }, intervalMs);\n\n    this.snapshotTimers.set(executionId, timer);\n    this.emit('auto-snapshots:enabled', { executionId, intervalMs });\n  }\n\n  disableAutoSnapshots(executionId: string): void {\n    const timer = this.snapshotTimers.get(executionId);\n    if (timer) {\n      clearInterval(timer);\n      this.snapshotTimers.delete(executionId);\n      this.emit('auto-snapshots:disabled', { executionId });\n    }\n  }\n\n  async saveWorkflow(workflow: WorkflowDefinition): Promise<void> {\n    await this.store.saveWorkflowDefinition(workflow);\n    this.emit('workflow:saved', { workflowId: workflow.id });\n  }\n\n  async getWorkflow(workflowId: string): Promise<WorkflowDefinition | null> {\n    return this.store.getWorkflowDefinition(workflowId);\n  }\n\n  async cleanup(executionId: string): Promise<void> {\n    this.disableAutoSnapshots(executionId);\n    \n    // Optional: Clean up old snapshots (keep only latest 10)\n    await this.cleanupOldSnapshots(executionId);\n    \n    this.emit('cleanup:completed', { executionId });\n  }\n\n  private async cleanupOldSnapshots(executionId: string, keepCount = 10): Promise<void> {\n    // This would require additional SQL to delete old snapshots\n    // Implementation depends on specific requirements\n  }\n\n  private calculateChecksum(state: any): string {\n    // Simple checksum implementation\n    const stateString = JSON.stringify(state);\n    let hash = 0;\n    for (let i = 0; i < stateString.length; i++) {\n      const char = stateString.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return hash.toString(16);\n  }\n\n  async shutdown(): Promise<void> {\n    // Clear all timers\n    for (const timer of this.snapshotTimers.values()) {\n      clearInterval(timer);\n    }\n    this.snapshotTimers.clear();\n\n    // Close store if it supports it\n    if ('close' in this.store && typeof this.store.close === 'function') {\n      await this.store.close();\n    }\n\n    this.removeAllListeners();\n  }\n}","import { EventEmitter } from 'events';\nimport { createMachine, interpret, State } from 'xstate';\nimport { v4 as uuidv4 } from 'uuid';\nimport { WorkflowStateManager, SQLiteWorkflowStateStore } from './persistence/workflow-state-manager';\n\nexport interface WorkflowStep {\n  id: string;\n  type: 'agent-task' | 'parallel' | 'condition' | 'loop' | 'http' | 'script';\n  name: string;\n  config: any;\n  next?: string[];\n  onSuccess?: string;\n  onFailure?: string;\n}\n\nexport interface WorkflowDefinition {\n  id: string;\n  name: string;\n  description: string;\n  version: string;\n  steps: WorkflowStep[];\n  variables: Record<string, any>;\n  triggers: WorkflowTrigger[];\n}\n\nexport interface WorkflowTrigger {\n  type: 'manual' | 'scheduled' | 'event' | 'webhook';\n  config: any;\n}\n\nexport interface WorkflowExecution {\n  id: string;\n  workflowId: string;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  startTime: Date;\n  endTime?: Date;\n  currentStep?: string;\n  variables: Record<string, any>;\n  results: Record<string, any>;\n  logs: WorkflowLog[];\n}\n\nexport interface WorkflowLog {\n  timestamp: Date;\n  level: 'info' | 'warn' | 'error';\n  message: string;\n  stepId?: string;\n  data?: any;\n}\n\nexport class WorkflowEngine extends EventEmitter {\n  private workflows: Map<string, WorkflowDefinition> = new Map();\n  private executions: Map<string, WorkflowExecution> = new Map();\n  private machines: Map<string, any> = new Map();\n  private stateManager: WorkflowStateManager;\n  private enablePersistence: boolean;\n\n  constructor(options: { enablePersistence?: boolean; dbPath?: string } = {}) {\n    super();\n    this.enablePersistence = options.enablePersistence ?? true;\n    \n    if (this.enablePersistence) {\n      const store = new SQLiteWorkflowStateStore(options.dbPath);\n      this.stateManager = new WorkflowStateManager(store);\n      this.setupStateManagerEvents();\n    }\n  }\n\n  async createWorkflow(definition: WorkflowDefinition): Promise<void> {\n    // Validate workflow definition\n    this.validateWorkflow(definition);\n    \n    // Create XState machine\n    const machine = this.createStateMachine(definition);\n    \n    // Store workflow and machine\n    this.workflows.set(definition.id, definition);\n    this.machines.set(definition.id, machine);\n    \n    // Persist workflow definition\n    if (this.enablePersistence) {\n      await this.stateManager.saveWorkflow(definition);\n    }\n    \n    this.emit('workflow:created', { workflowId: definition.id });\n  }\n\n  async executeWorkflow(workflowId: string, variables: Record<string, any> = {}): Promise<string> {\n    const workflow = this.workflows.get(workflowId);\n    if (!workflow) {\n      throw new Error(`Workflow ${workflowId} not found`);\n    }\n\n    const executionId = uuidv4();\n    const execution: WorkflowExecution = {\n      id: executionId,\n      workflowId,\n      status: 'pending',\n      startTime: new Date(),\n      variables: { ...workflow.variables, ...variables },\n      results: {},\n      logs: []\n    };\n\n    this.executions.set(executionId, execution);\n    \n    // Persist initial execution state\n    if (this.enablePersistence) {\n      await this.stateManager.saveExecution(execution);\n    }\n    \n    // Start execution\n    this.startExecution(execution);\n    \n    return executionId;\n  }\n\n  private async startExecution(execution: WorkflowExecution): Promise<void> {\n    const workflow = this.workflows.get(execution.workflowId)!;\n    const machine = this.machines.get(execution.workflowId)!;\n    \n    execution.status = 'running';\n    this.logExecution(execution, 'info', `Starting workflow execution`);\n    \n    try {\n      const service = interpret(machine).onTransition((state) => {\n        this.handleStateTransition(execution, state);\n      });\n      \n      service.start();\n      \n      // Execute first step\n      const firstStep = workflow.steps[0];\n      if (firstStep) {\n        await this.executeStep(execution, firstStep);\n      }\n      \n    } catch (error) {\n      execution.status = 'failed';\n      execution.endTime = new Date();\n      this.logExecution(execution, 'error', `Workflow failed: ${error.message}`);\n      this.emit('workflow:failed', { executionId: execution.id, error });\n    }\n  }\n\n  private async executeStep(execution: WorkflowExecution, step: WorkflowStep): Promise<void> {\n    execution.currentStep = step.id;\n    this.logExecution(execution, 'info', `Executing step: ${step.name}`, step.id);\n    \n    try {\n      let result: any;\n      \n      switch (step.type) {\n        case 'agent-task':\n          result = await this.executeAgentTask(execution, step);\n          break;\n        case 'parallel':\n          result = await this.executeParallel(execution, step);\n          break;\n        case 'condition':\n          result = await this.executeCondition(execution, step);\n          break;\n        case 'loop':\n          result = await this.executeLoop(execution, step);\n          break;\n        case 'http':\n          result = await this.executeHttpRequest(execution, step);\n          break;\n        case 'script':\n          result = await this.executeScript(execution, step);\n          break;\n        default:\n          throw new Error(`Unknown step type: ${step.type}`);\n      }\n      \n      execution.results[step.id] = result;\n      this.logExecution(execution, 'info', `Step completed: ${step.name}`, step.id);\n      \n      // Persist execution state after step completion\n      if (this.enablePersistence) {\n        await this.stateManager.updateExecution(execution);\n      }\n      \n      // Execute next steps\n      await this.executeNextSteps(execution, step, result);\n      \n    } catch (error) {\n      this.logExecution(execution, 'error', `Step failed: ${error.message}`, step.id);\n      \n      if (step.onFailure) {\n        await this.executeNextStep(execution, step.onFailure);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private async executeAgentTask(execution: WorkflowExecution, step: WorkflowStep): Promise<any> {\n    const { StepExecutorFactory } = await import('./executors/step-executors');\n    const executor = StepExecutorFactory.getExecutor('agent-task');\n    \n    const context = {\n      execution,\n      step,\n      variables: execution.variables,\n      results: execution.results,\n      logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => {\n        this.logExecution(execution, level, message, stepId);\n      }\n    };\n\n    const result = await executor.execute(context);\n    if (!result.success) {\n      throw result.error || new Error('Agent task execution failed');\n    }\n    \n    return result.result;\n  }\n\n  private async executeParallel(execution: WorkflowExecution, step: WorkflowStep): Promise<any> {\n    const { StepExecutorFactory } = await import('./executors/step-executors');\n    const executor = StepExecutorFactory.getExecutor('parallel');\n    \n    const context = {\n      execution,\n      step,\n      variables: execution.variables,\n      results: execution.results,\n      logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => {\n        this.logExecution(execution, level, message, stepId);\n      }\n    };\n\n    const result = await executor.execute(context);\n    if (!result.success) {\n      throw result.error || new Error('Parallel execution failed');\n    }\n    \n    return result.result;\n  }\n\n  private async executeCondition(execution: WorkflowExecution, step: WorkflowStep): Promise<any> {\n    const { StepExecutorFactory } = await import('./executors/step-executors');\n    const executor = StepExecutorFactory.getExecutor('condition');\n    \n    const context = {\n      execution,\n      step,\n      variables: execution.variables,\n      results: execution.results,\n      logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => {\n        this.logExecution(execution, level, message, stepId);\n      }\n    };\n\n    const result = await executor.execute(context);\n    if (!result.success) {\n      throw result.error || new Error('Condition evaluation failed');\n    }\n    \n    // Handle next step execution based on condition result\n    const { nextStep } = result.result;\n    if (nextStep) {\n      await this.executeNextStep(execution, nextStep);\n    }\n    \n    return result.result;\n  }\n\n  private async executeLoop(execution: WorkflowExecution, step: WorkflowStep): Promise<any> {\n    const { StepExecutorFactory } = await import('./executors/step-executors');\n    const executor = StepExecutorFactory.getExecutor('loop');\n    \n    const context = {\n      execution,\n      step,\n      variables: execution.variables,\n      results: execution.results,\n      logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => {\n        this.logExecution(execution, level, message, stepId);\n      }\n    };\n\n    const result = await executor.execute(context);\n    if (!result.success) {\n      throw result.error || new Error('Loop execution failed');\n    }\n    \n    return result.result;\n  }\n\n  private async executeHttpRequest(execution: WorkflowExecution, step: WorkflowStep): Promise<any> {\n    const { StepExecutorFactory } = await import('./executors/step-executors');\n    const executor = StepExecutorFactory.getExecutor('http');\n    \n    const context = {\n      execution,\n      step,\n      variables: execution.variables,\n      results: execution.results,\n      logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => {\n        this.logExecution(execution, level, message, stepId);\n      }\n    };\n\n    const result = await executor.execute(context);\n    if (!result.success) {\n      throw result.error || new Error('HTTP request failed');\n    }\n    \n    return result.result;\n  }\n\n  private async executeScript(execution: WorkflowExecution, step: WorkflowStep): Promise<any> {\n    const { StepExecutorFactory } = await import('./executors/step-executors');\n    const executor = StepExecutorFactory.getExecutor('script');\n    \n    const context = {\n      execution,\n      step,\n      variables: execution.variables,\n      results: execution.results,\n      logger: (level: 'info' | 'warn' | 'error', message: string, stepId?: string) => {\n        this.logExecution(execution, level, message, stepId);\n      }\n    };\n\n    const result = await executor.execute(context);\n    if (!result.success) {\n      throw result.error || new Error('Script execution failed');\n    }\n    \n    return result.result;\n  }\n\n  private async executeNextSteps(execution: WorkflowExecution, step: WorkflowStep, result: any): Promise<void> {\n    if (step.next) {\n      for (const nextStepId of step.next) {\n        await this.executeNextStep(execution, nextStepId);\n      }\n    } else if (step.onSuccess) {\n      await this.executeNextStep(execution, step.onSuccess);\n    } else {\n      // No more steps, complete workflow\n      execution.status = 'completed';\n      execution.endTime = new Date();\n      this.logExecution(execution, 'info', 'Workflow completed successfully');\n      \n      // Persist final state\n      if (this.enablePersistence) {\n        await this.stateManager.updateExecution(execution);\n        await this.stateManager.cleanup(execution.id);\n      }\n      \n      this.emit('workflow:completed', { executionId: execution.id });\n    }\n  }\n\n  private async executeNextStep(execution: WorkflowExecution, stepId: string): Promise<any> {\n    const workflow = this.workflows.get(execution.workflowId)!;\n    const nextStep = workflow.steps.find(s => s.id === stepId);\n    \n    if (!nextStep) {\n      throw new Error(`Next step ${stepId} not found`);\n    }\n    \n    return this.executeStep(execution, nextStep);\n  }\n\n  private evaluateCondition(condition: string, execution: WorkflowExecution): boolean {\n    // Simple condition evaluation\n    // In a real implementation, this would use a proper expression evaluator\n    const context = {\n      variables: execution.variables,\n      results: execution.results\n    };\n    \n    try {\n      // This is a simplified evaluation - use a proper expression parser in production\n      return new Function('context', `with(context) { return ${condition}; }`)(context);\n    } catch (error) {\n      this.logExecution(execution, 'warn', `Condition evaluation failed: ${error.message}`);\n      return false;\n    }\n  }\n\n  private createStateMachine(workflow: WorkflowDefinition): any {\n    const states: any = {};\n    \n    workflow.steps.forEach(step => {\n      states[step.id] = {\n        on: {\n          COMPLETE: step.next ? step.next[0] : 'completed',\n          FAIL: step.onFailure || 'failed'\n        }\n      };\n    });\n    \n    states.completed = { type: 'final' };\n    states.failed = { type: 'final' };\n    \n    return createMachine({\n      id: workflow.id,\n      initial: workflow.steps[0]?.id || 'completed',\n      states\n    });\n  }\n\n  private handleStateTransition(execution: WorkflowExecution, state: State<any>): void {\n    this.logExecution(execution, 'info', `State transition: ${state.value}`);\n    this.emit('workflow:state-change', { \n      executionId: execution.id, \n      state: state.value \n    });\n  }\n\n  private validateWorkflow(workflow: WorkflowDefinition): void {\n    if (!workflow.id || !workflow.name || !workflow.steps.length) {\n      throw new Error('Invalid workflow definition');\n    }\n    \n    // Validate step references\n    const stepIds = new Set(workflow.steps.map(s => s.id));\n    workflow.steps.forEach(step => {\n      if (step.next) {\n        step.next.forEach(nextId => {\n          if (!stepIds.has(nextId)) {\n            throw new Error(`Invalid step reference: ${nextId}`);\n          }\n        });\n      }\n    });\n  }\n\n  private logExecution(execution: WorkflowExecution, level: 'info' | 'warn' | 'error', message: string, stepId?: string): void {\n    const log: WorkflowLog = {\n      timestamp: new Date(),\n      level,\n      message,\n      stepId\n    };\n    \n    execution.logs.push(log);\n    this.emit('workflow:log', { executionId: execution.id, log });\n    \n    // Persist logs periodically (every 10 logs) - handle async without blocking\n    if (this.enablePersistence && execution.logs.length % 10 === 0) {\n      this.stateManager.updateExecution(execution).catch(error => {\n        console.error('Failed to persist execution logs:', error);\n      });\n    }\n  }\n\n  // Public API methods\n  getWorkflow(id: string): WorkflowDefinition | undefined {\n    return this.workflows.get(id);\n  }\n\n  getExecution(id: string): WorkflowExecution | undefined {\n    return this.executions.get(id);\n  }\n\n  listWorkflows(): WorkflowDefinition[] {\n    return Array.from(this.workflows.values());\n  }\n\n  listExecutions(workflowId?: string): WorkflowExecution[] {\n    const executions = Array.from(this.executions.values());\n    return workflowId ? executions.filter(e => e.workflowId === workflowId) : executions;\n  }\n\n  async cancelExecution(executionId: string): Promise<void> {\n    const execution = this.executions.get(executionId);\n    if (!execution) {\n      throw new Error(`Execution ${executionId} not found`);\n    }\n    \n    execution.status = 'cancelled';\n    execution.endTime = new Date();\n    this.logExecution(execution, 'info', 'Execution cancelled');\n    \n    // Persist cancelled state\n    if (this.enablePersistence) {\n      await this.stateManager.updateExecution(execution);\n      await this.stateManager.cleanup(execution.id);\n    }\n    \n    this.emit('workflow:cancelled', { executionId });\n  }\n\n  // Workflow resume capability\n  async resumeWorkflow(executionId: string): Promise<void> {\n    if (!this.enablePersistence) {\n      throw new Error('Persistence is disabled, cannot resume workflow');\n    }\n\n    // Load execution from persistence\n    const execution = await this.stateManager.getExecution(executionId);\n    if (!execution) {\n      throw new Error(`Execution ${executionId} not found`);\n    }\n\n    if (execution.status !== 'paused' && execution.status !== 'failed') {\n      throw new Error(`Cannot resume workflow in status ${execution.status}`);\n    }\n\n    // Load workflow definition\n    const workflow = await this.stateManager.getWorkflow(execution.workflowId);\n    if (!workflow) {\n      throw new Error(`Workflow definition ${execution.workflowId} not found`);\n    }\n\n    // Restore to in-memory maps\n    this.workflows.set(execution.workflowId, workflow);\n    this.executions.set(executionId, execution);\n\n    // Create XState machine\n    const machine = this.createStateMachine(workflow);\n    this.machines.set(execution.workflowId, machine);\n\n    // Resume from current step\n    execution.status = 'running';\n    await this.stateManager.updateExecution(execution);\n\n    if (execution.currentStep) {\n      const currentStep = workflow.steps.find(s => s.id === execution.currentStep);\n      if (currentStep) {\n        this.logExecution(execution, 'info', `Resuming workflow from step: ${currentStep.name}`);\n        await this.executeStep(execution, currentStep);\n      }\n    }\n\n    this.emit('workflow:resumed', { executionId });\n  }\n\n  // Pause workflow execution\n  async pauseWorkflow(executionId: string): Promise<void> {\n    const execution = this.executions.get(executionId);\n    if (!execution) {\n      throw new Error(`Execution ${executionId} not found`);\n    }\n\n    if (execution.status !== 'running') {\n      throw new Error(`Cannot pause workflow in status ${execution.status}`);\n    }\n\n    execution.status = 'paused';\n    this.logExecution(execution, 'info', 'Workflow paused');\n\n    if (this.enablePersistence) {\n      await this.stateManager.updateExecution(execution);\n      await this.stateManager.createSnapshot(executionId, execution);\n    }\n\n    this.emit('workflow:paused', { executionId });\n  }\n\n  // Enable auto-snapshots for running workflows\n  async enableAutoSnapshots(executionId: string, intervalMs = 60000): Promise<void> {\n    if (!this.enablePersistence) {\n      throw new Error('Persistence is disabled, cannot enable auto-snapshots');\n    }\n\n    await this.stateManager.enableAutoSnapshots(executionId, intervalMs);\n  }\n\n  // Setup state manager event handlers\n  private setupStateManagerEvents(): void {\n    if (!this.stateManager) return;\n\n    this.stateManager.on('execution:saved', (data) => {\n      this.emit('persistence:execution-saved', data);\n    });\n\n    this.stateManager.on('execution:updated', (data) => {\n      this.emit('persistence:execution-updated', data);\n    });\n\n    this.stateManager.on('snapshot:created', (data) => {\n      this.emit('persistence:snapshot-created', data);\n    });\n\n    this.stateManager.on('workflow:saved', (data) => {\n      this.emit('persistence:workflow-saved', data);\n    });\n\n    this.stateManager.on('error', (data) => {\n      this.emit('persistence:error', data);\n    });\n  }\n\n  // Cleanup and shutdown\n  async shutdown(): Promise<void> {\n    // Cancel all running executions\n    for (const [executionId, execution] of this.executions) {\n      if (execution.status === 'running') {\n        await this.cancelExecution(executionId);\n      }\n    }\n\n    // Shutdown state manager\n    if (this.stateManager) {\n      await this.stateManager.shutdown();\n    }\n\n    // Clear all data\n    this.workflows.clear();\n    this.executions.clear();\n    this.machines.clear();\n\n    this.removeAllListeners();\n  }\n\n  // Get workflow execution metrics\n  getExecutionMetrics(executionId: string): any {\n    const execution = this.executions.get(executionId);\n    if (!execution) return null;\n\n    const totalSteps = execution.results ? Object.keys(execution.results).length : 0;\n    const duration = execution.endTime \n      ? execution.endTime.getTime() - execution.startTime.getTime()\n      : Date.now() - execution.startTime.getTime();\n\n    return {\n      executionId,\n      status: execution.status,\n      totalSteps,\n      duration,\n      startTime: execution.startTime,\n      endTime: execution.endTime,\n      currentStep: execution.currentStep,\n      logs: execution.logs.length,\n      errors: execution.logs.filter(l => l.level === 'error').length\n    };\n  }\n\n  // List all executions with optional filtering\n  listExecutions(filter?: { status?: string; workflowId?: string }): WorkflowExecution[] {\n    let executions = Array.from(this.executions.values());\n\n    if (filter) {\n      if (filter.status) {\n        executions = executions.filter(e => e.status === filter.status);\n      }\n      if (filter.workflowId) {\n        executions = executions.filter(e => e.workflowId === filter.workflowId);\n      }\n    }\n\n    return executions;\n  }\n}","import winston from 'winston';\nimport path from 'path';\nimport fs from 'fs-extra';\n\n// Ensure log directory exists\nconst logDir = path.join(process.cwd(), '.agentic-flow', 'logs');\nfs.ensureDirSync(logDir);\n\n// Create logger instance\nexport const logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'agentic-flow' },\n  transports: [\n    // Write all logs to file\n    new winston.transports.File({\n      filename: path.join(logDir, 'error.log'),\n      level: 'error',\n    }),\n    new winston.transports.File({\n      filename: path.join(logDir, 'combined.log'),\n    }),\n  ],\n});\n\n// Add console transport in development\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.colorize(),\n        winston.format.simple()\n      ),\n      silent: process.env.QUIET === 'true',\n    })\n  );\n}","import { EventEmitter } from 'events';\nimport { v4 as uuidv4 } from 'uuid';\nimport { logger } from '../cli/utils/logger';\n\nexport interface Agent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'idle' | 'running' | 'stopped' | 'error';\n  capabilities: string[];\n  model: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  createdAt: string;\n  startedAt?: string;\n  stoppedAt?: string;\n  lastTaskAt?: string;\n  metrics: {\n    tasksCompleted: number;\n    successRate: number;\n    avgResponseTime: number;\n  };\n}\n\nexport class AgentManager extends EventEmitter {\n  private agents: Map<string, Agent> = new Map();\n  private runningAgents: Set<string> = new Set();\n\n  constructor() {\n    super();\n  }\n\n  async createAgent(config: Partial<Agent>): Promise<Agent> {\n    const agent: Agent = {\n      id: config.id || uuidv4(),\n      name: config.name || `agent-${Date.now()}`,\n      type: config.type || 'generic',\n      status: 'idle',\n      capabilities: config.capabilities || [],\n      model: config.model || 'claude-3',\n      priority: config.priority || 'medium',\n      createdAt: new Date().toISOString(),\n      metrics: {\n        tasksCompleted: 0,\n        successRate: 100,\n        avgResponseTime: 0,\n      },\n      ...config,\n    };\n\n    this.agents.set(agent.id, agent);\n    this.emit('agent:created', agent);\n    \n    logger.info('Agent created', { agentId: agent.id, name: agent.name });\n    \n    return agent;\n  }\n\n  async startAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    \n    if (!agent) {\n      throw new Error(`Agent not found: ${agentId}`);\n    }\n\n    if (agent.status === 'running') {\n      throw new Error(`Agent ${agent.name} is already running`);\n    }\n\n    agent.status = 'running';\n    agent.startedAt = new Date().toISOString();\n    this.runningAgents.add(agentId);\n    \n    this.emit('agent:started', agent);\n    logger.info('Agent started', { agentId, name: agent.name });\n\n    // Simulate agent initialization\n    await this.simulateAgentWork(agent);\n  }\n\n  async stopAgent(agentId: string, force: boolean = false): Promise<void> {\n    const agent = this.agents.get(agentId);\n    \n    if (!agent) {\n      throw new Error(`Agent not found: ${agentId}`);\n    }\n\n    if (agent.status !== 'running') {\n      throw new Error(`Agent ${agent.name} is not running`);\n    }\n\n    if (!force) {\n      // Graceful shutdown\n      this.emit('agent:stopping', agent);\n      await this.waitForTaskCompletion(agent);\n    }\n\n    agent.status = 'stopped';\n    agent.stoppedAt = new Date().toISOString();\n    this.runningAgents.delete(agentId);\n    \n    this.emit('agent:stopped', agent);\n    logger.info('Agent stopped', { agentId, name: agent.name, force });\n  }\n\n  async removeAgent(agentId: string): Promise<void> {\n    const agent = this.agents.get(agentId);\n    \n    if (!agent) {\n      throw new Error(`Agent not found: ${agentId}`);\n    }\n\n    if (agent.status === 'running') {\n      await this.stopAgent(agentId, true);\n    }\n\n    this.agents.delete(agentId);\n    this.emit('agent:removed', agent);\n    \n    logger.info('Agent removed', { agentId, name: agent.name });\n  }\n\n  getAgent(agentId: string): Agent | undefined {\n    return this.agents.get(agentId);\n  }\n\n  getAllAgents(): Agent[] {\n    return Array.from(this.agents.values());\n  }\n\n  getRunningAgents(): Agent[] {\n    return Array.from(this.runningAgents)\n      .map(id => this.agents.get(id))\n      .filter((agent): agent is Agent => agent !== undefined);\n  }\n\n  async assignTask(agentId: string, task: any): Promise<any> {\n    const agent = this.agents.get(agentId);\n    \n    if (!agent) {\n      throw new Error(`Agent not found: ${agentId}`);\n    }\n\n    if (agent.status !== 'running') {\n      throw new Error(`Agent ${agent.name} is not running`);\n    }\n\n    this.emit('task:assigned', { agent, task });\n    logger.info('Task assigned to agent', { agentId, task });\n\n    // Simulate task execution\n    const startTime = Date.now();\n    \n    try {\n      const result = await this.executeTask(agent, task);\n      \n      // Update metrics\n      agent.lastTaskAt = new Date().toISOString();\n      agent.metrics.tasksCompleted++;\n      const responseTime = Date.now() - startTime;\n      agent.metrics.avgResponseTime = \n        (agent.metrics.avgResponseTime * (agent.metrics.tasksCompleted - 1) + responseTime) / \n        agent.metrics.tasksCompleted;\n      \n      this.emit('task:completed', { agent, task, result });\n      logger.info('Task completed', { agentId, duration: responseTime });\n      \n      return result;\n    } catch (error) {\n      // Update failure metrics\n      agent.metrics.successRate = \n        (agent.metrics.successRate * agent.metrics.tasksCompleted) / \n        (agent.metrics.tasksCompleted + 1);\n      \n      this.emit('task:failed', { agent, task, error });\n      logger.error('Task failed', { agentId, error: error.message });\n      \n      throw error;\n    }\n  }\n\n  private async simulateAgentWork(agent: Agent): Promise<void> {\n    // Simulate agent doing background work\n    const interval = setInterval(() => {\n      if (agent.status !== 'running') {\n        clearInterval(interval);\n        return;\n      }\n      \n      this.emit('agent:heartbeat', agent);\n    }, 5000);\n  }\n\n  private async waitForTaskCompletion(agent: Agent): Promise<void> {\n    // Wait for any ongoing tasks to complete\n    return new Promise(resolve => {\n      setTimeout(resolve, 1000); // Simulate graceful shutdown delay\n    });\n  }\n\n  private async executeTask(agent: Agent, task: any): Promise<any> {\n    // Simulate task execution based on agent type\n    await new Promise(resolve => setTimeout(resolve, Math.random() * 2000 + 1000));\n    \n    // Return simulated result based on agent type\n    switch (agent.type) {\n      case 'researcher':\n        return {\n          success: true,\n          findings: [`Research result for: ${task.description || task}`],\n          sources: ['source1', 'source2'],\n        };\n      \n      case 'developer':\n        return {\n          success: true,\n          code: `// Generated code for: ${task.description || task}\\nfunction solution() { return true; }`,\n          language: 'javascript',\n        };\n      \n      case 'analyst':\n        return {\n          success: true,\n          analysis: `Analysis of: ${task.description || task}`,\n          insights: ['insight1', 'insight2'],\n          recommendations: ['recommendation1'],\n        };\n      \n      default:\n        return {\n          success: true,\n          result: `Task completed: ${task.description || task}`,\n        };\n    }\n  }\n}","import { Tool } from '@mastra/core';\nimport { CoordinatorAgent } from '../agents/coordinator-agent';\nimport { ExecutorAgent } from '../agents/executor-agent';\nimport { WorkflowEngine } from '../workflows/workflow-engine';\nimport { AgentManager } from '../lib/agent-manager';\nimport { MessageBus } from '../communication/message-bus';\nimport { AgentType, MessagePriority } from '../types';\n\n// Initialize core agentic-flow components (singletons)\nlet messageBus: MessageBus;\nlet agentManager: AgentManager;\nlet workflowEngine: WorkflowEngine;\n\n// Lazy initialization to avoid circular dependencies\nconst getMessageBus = () => {\n  if (!messageBus) {\n    messageBus = MessageBus.getInstance();\n  }\n  return messageBus;\n};\n\nconst getAgentManager = () => {\n  if (!agentManager) {\n    agentManager = new AgentManager();\n  }\n  return agentManager;\n};\n\nconst getWorkflowEngine = () => {\n  if (!workflowEngine) {\n    workflowEngine = new WorkflowEngine();\n  }\n  return workflowEngine;\n};\n\nexport const createTeamTool = new Tool({\n  name: 'createTeam',\n  description: 'Create a new team of agents for a specific goal',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      teamName: { type: 'string' },\n      goal: { type: 'string' },\n      agentTypes: {\n        type: 'array',\n        items: { \n          type: 'string',\n          enum: ['coordinator', 'executor', 'researcher', 'analyst', 'architect', 'coder', 'tester', 'documenter', 'reviewer', 'monitor', 'optimizer', 'specialist']\n        }\n      },\n      teamSize: { type: 'number', minimum: 1, maximum: 10 }\n    },\n    required: ['teamName', 'goal', 'agentTypes']\n  },\n  execute: async ({ teamName, goal, agentTypes, teamSize = 3 }) => {\n    try {\n      const manager = getAgentManager();\n      \n      // Create a coordinator for the team\n      const coordinator = new CoordinatorAgent(teamName);\n      await manager.registerAgent(coordinator);\n      \n      // Create additional agents based on specified types\n      const teamMembers = [];\n      for (const agentType of agentTypes.slice(0, teamSize - 1)) {\n        let agent;\n        switch (agentType) {\n          case 'executor':\n            agent = new ExecutorAgent(`${teamName}-executor`);\n            break;\n          default:\n            agent = new ExecutorAgent(`${teamName}-${agentType}`);\n        }\n        await manager.registerAgent(agent);\n        teamMembers.push(agent.getId());\n      }\n      \n      return {\n        teamId: coordinator.getId(),\n        coordinator: coordinator.getId(),\n        members: teamMembers,\n        status: 'created',\n        message: `Team ${teamName} created successfully with ${teamMembers.length + 1} agents`,\n        goal: goal\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Failed to create team: ${error.message}`\n      };\n    }\n  },\n});\n\nexport const executeWorkflowTool = new Tool({\n  name: 'executeWorkflow',\n  description: 'Execute an agentic-flow workflow',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      workflowId: { type: 'string' },\n      input: { type: 'object' },\n      priority: {\n        type: 'string',\n        enum: ['low', 'medium', 'high', 'critical']\n      }\n    },\n    required: ['workflowId']\n  },\n  execute: async ({ workflowId, input = {}, priority = 'medium' }) => {\n    try {\n      const engine = getWorkflowEngine();\n      const execution = await engine.executeWorkflow(workflowId, input);\n      \n      return {\n        executionId: execution.id,\n        workflowId: execution.workflowId,\n        status: execution.status,\n        startTime: execution.startTime,\n        priority,\n        message: `Workflow ${workflowId} execution started successfully`\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Failed to execute workflow: ${error.message}`\n      };\n    }\n  },\n});\n\nexport const sendMessageTool = new Tool({\n  name: 'sendMessage',\n  description: 'Send a message through the agentic-flow message bus',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      type: { type: 'string' },\n      payload: { type: 'object' },\n      recipientId: { type: 'string' },\n      priority: { \n        type: 'string',\n        enum: ['low', 'medium', 'high', 'critical']\n      }\n    },\n    required: ['type', 'payload']\n  },\n  execute: async ({ type, payload, recipientId = 'broadcast', priority = 'medium' }) => {\n    try {\n      const bus = getMessageBus();\n      const message = {\n        type,\n        senderId: 'mastra-integration',\n        recipientId,\n        payload,\n        timestamp: new Date(),\n        priority: priority as MessagePriority\n      };\n      \n      await bus.publish(message);\n      \n      return {\n        messageId: `msg-${Date.now()}`,\n        status: 'sent',\n        type,\n        recipientId,\n        priority,\n        message: `Message of type ${type} published successfully`\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Failed to send message: ${error.message}`\n      };\n    }\n  },\n});\n\nexport const getAgentStatusTool = new Tool({\n  name: 'getAgentStatus',\n  description: 'Get the status of agents in the agentic-flow system',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      agentId: { type: 'string' },\n      teamId: { type: 'string' },\n      includeMetrics: { type: 'boolean' }\n    }\n  },\n  execute: async ({ agentId, teamId, includeMetrics = false }) => {\n    try {\n      const manager = getAgentManager();\n      \n      if (agentId) {\n        const agent = await manager.getAgent(agentId);\n        if (!agent) {\n          return { status: 'error', message: 'Agent not found' };\n        }\n        \n        return {\n          agentId: agent.getId(),\n          name: agent.getName(),\n          type: agent.getType(),\n          status: agent.getStatus(),\n          currentTask: agent.getCurrentTask()?.id || null,\n          capabilities: agent.getCapabilities(),\n          ...(includeMetrics && {\n            metrics: {\n              tasksCompleted: 0, // Would need to implement metrics tracking\n              averageResponseTime: 0,\n              successRate: 1.0\n            }\n          })\n        };\n      } else {\n        const agents = await manager.listAgents();\n        return {\n          totalAgents: agents.length,\n          agents: agents.map(agent => ({\n            agentId: agent.getId(),\n            name: agent.getName(),\n            type: agent.getType(),\n            status: agent.getStatus()\n          }))\n        };\n      }\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Failed to get agent status: ${error.message}`\n      };\n    }\n  },\n});\n\nexport const createGoalTool = new Tool({\n  name: 'createGoal',\n  description: 'Create a new goal in the agentic-flow system',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      description: { type: 'string' },\n      priority: {\n        type: 'string',\n        enum: ['low', 'medium', 'high', 'critical']\n      },\n      deadline: { type: 'string', format: 'date-time' },\n      assignedTeam: { type: 'string' },\n      requirements: {\n        type: 'array',\n        items: { type: 'string' }\n      }\n    },\n    required: ['description']\n  },\n  execute: async ({ description, priority = 'medium', deadline, assignedTeam, requirements = [] }) => {\n    try {\n      // This would integrate with the GoalEngine when available\n      const goalId = `goal-${Date.now()}`;\n      \n      return {\n        goalId,\n        description,\n        priority,\n        deadline,\n        assignedTeam,\n        requirements,\n        status: 'created',\n        createdAt: new Date().toISOString(),\n        message: 'Goal created successfully'\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Failed to create goal: ${error.message}`\n      };\n    }\n  },\n});\n\nexport const monitorSystemTool = new Tool({\n  name: 'monitorSystem',\n  description: 'Monitor the agentic-flow system health and performance',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      includeAgents: { type: 'boolean' },\n      includeWorkflows: { type: 'boolean' },\n      includeMessages: { type: 'boolean' }\n    }\n  },\n  execute: async ({ includeAgents = true, includeWorkflows = true, includeMessages = true }) => {\n    try {\n      const systemStatus = {\n        timestamp: new Date().toISOString(),\n        status: 'healthy',\n        uptime: process.uptime(),\n        memory: process.memoryUsage(),\n      };\n      \n      if (includeAgents) {\n        const manager = getAgentManager();\n        const agents = await manager.listAgents();\n        systemStatus['agents'] = {\n          total: agents.length,\n          active: agents.filter(a => a.getStatus() === 'active').length,\n          idle: agents.filter(a => a.getStatus() === 'idle').length,\n        };\n      }\n      \n      if (includeWorkflows) {\n        const engine = getWorkflowEngine();\n        // Would need to implement workflow status tracking\n        systemStatus['workflows'] = {\n          total: 0,\n          running: 0,\n          completed: 0,\n          failed: 0\n        };\n      }\n      \n      if (includeMessages) {\n        const bus = getMessageBus();\n        // Would need to implement message statistics\n        systemStatus['messages'] = {\n          sent: 0,\n          received: 0,\n          pending: 0\n        };\n      }\n      \n      return systemStatus;\n    } catch (error) {\n      return {\n        status: 'error',\n        message: `Failed to monitor system: ${error.message}`\n      };\n    }\n  },\n});\n\n// Export all tools\nexport const mastraTools = {\n  createTeam: createTeamTool,\n  executeWorkflow: executeWorkflowTool,\n  sendMessage: sendMessageTool,\n  getAgentStatus: getAgentStatusTool,\n  createGoal: createGoalTool,\n  monitorSystem: monitorSystemTool,\n};","import { Workflow } from '@mastra/core';\nimport { \n  coordinatorMastraAgent, \n  executorMastraAgent,\n  researcherAgent,\n  architectAgent,\n  coderAgent,\n  testerAgent,\n  reviewerAgent\n} from './agents';\nimport { \n  createTeamTool,\n  executeWorkflowTool,\n  sendMessageTool,\n  getAgentStatusTool,\n  createGoalTool,\n  monitorSystemTool\n} from './tools';\n\n/**\n * Software Development Workflow\n * Orchestrates the complete software development lifecycle using agentic-flow agents\n */\nexport const softwareDevelopmentWorkflow = new Workflow({\n  name: 'softwareDevelopment',\n  description: 'Complete software development workflow with research, architecture, coding, testing, and review',\n  steps: [\n    {\n      id: 'create-dev-team',\n      type: 'tool',\n      tool: createTeamTool,\n      input: {\n        teamName: 'dev-team-{{timestamp}}',\n        goal: '{{requirement}}',\n        agentTypes: ['coordinator', 'architect', 'coder', 'tester', 'reviewer'],\n        teamSize: 5\n      }\n    },\n    {\n      id: 'research-phase',\n      type: 'agent',\n      agent: researcherAgent,\n      prompt: `Research the following requirement and provide insights:\n      Requirement: {{requirement}}\n      \n      Please provide:\n      1. Technical feasibility analysis\n      2. Similar solutions or patterns\n      3. Potential challenges and risks\n      4. Recommended technologies or approaches\n      5. Timeline estimation`,\n      dependsOn: ['create-dev-team']\n    },\n    {\n      id: 'architecture-design',\n      type: 'agent',\n      agent: architectAgent,\n      prompt: `Based on the research findings, create a technical architecture:\n      Research: {{outputs.research-phase.response}}\n      Requirement: {{requirement}}\n      \n      Please provide:\n      1. System architecture diagram (text description)\n      2. Component breakdown\n      3. Technology stack recommendations\n      4. Database design considerations\n      5. API design specifications\n      6. Scalability and performance considerations`,\n      dependsOn: ['research-phase']\n    },\n    {\n      id: 'create-goal',\n      type: 'tool',\n      tool: createGoalTool,\n      input: {\n        description: 'Implement {{requirement}} based on architectural design',\n        priority: 'high',\n        assignedTeam: '{{outputs.create-dev-team.teamId}}',\n        requirements: ['{{outputs.architecture-design.response}}']\n      },\n      dependsOn: ['architecture-design']\n    },\n    {\n      id: 'implementation',\n      type: 'agent',\n      agent: coderAgent,\n      prompt: `Implement the following requirement based on the architecture:\n      Architecture: {{outputs.architecture-design.response}}\n      Requirement: {{requirement}}\n      \n      Please provide:\n      1. Main implementation code\n      2. Configuration files\n      3. Database schemas/migrations\n      4. API endpoints\n      5. Error handling\n      6. Documentation comments`,\n      dependsOn: ['create-goal']\n    },\n    {\n      id: 'testing',\n      type: 'agent',\n      agent: testerAgent,\n      prompt: `Create comprehensive tests for the implementation:\n      Implementation: {{outputs.implementation.response}}\n      Architecture: {{outputs.architecture-design.response}}\n      \n      Please provide:\n      1. Unit tests\n      2. Integration tests\n      3. End-to-end test scenarios\n      4. Performance test considerations\n      5. Edge cases and error scenarios\n      6. Test data setup`,\n      dependsOn: ['implementation']\n    },\n    {\n      id: 'code-review',\n      type: 'agent',\n      agent: reviewerAgent,\n      prompt: `Review the implementation and tests:\n      Implementation: {{outputs.implementation.response}}\n      Tests: {{outputs.testing.response}}\n      Architecture: {{outputs.architecture-design.response}}\n      \n      Please provide:\n      1. Code quality assessment\n      2. Architecture adherence review\n      3. Security considerations\n      4. Performance implications\n      5. Maintainability evaluation\n      6. Recommendations for improvements`,\n      dependsOn: ['testing']\n    },\n    {\n      id: 'notify-completion',\n      type: 'tool',\n      tool: sendMessageTool,\n      input: {\n        type: 'workflow.completed',\n        payload: {\n          workflowName: 'softwareDevelopment',\n          requirement: '{{requirement}}',\n          teamId: '{{outputs.create-dev-team.teamId}}',\n          research: '{{outputs.research-phase.response}}',\n          architecture: '{{outputs.architecture-design.response}}',\n          implementation: '{{outputs.implementation.response}}',\n          testing: '{{outputs.testing.response}}',\n          review: '{{outputs.code-review.response}}'\n        },\n        priority: 'high'\n      },\n      dependsOn: ['code-review']\n    }\n  ],\n});\n\n/**\n * Problem Analysis and Solution Workflow\n * Analyzes complex problems and creates solutions using coordinator and executor agents\n */\nexport const problemSolutionWorkflow = new Workflow({\n  name: 'problemSolution',\n  description: 'Analyze problems and create comprehensive solutions',\n  steps: [\n    {\n      id: 'problem-analysis',\n      type: 'agent',\n      agent: coordinatorMastraAgent,\n      prompt: `Analyze the following problem and break it down:\n      Problem: {{problem}}\n      \n      Please provide:\n      1. Problem decomposition into sub-problems\n      2. Priority ranking of issues\n      3. Dependencies between sub-problems\n      4. Resource requirements estimation\n      5. Recommended team composition\n      6. Success criteria definition`,\n    },\n    {\n      id: 'create-solution-team',\n      type: 'tool',\n      tool: createTeamTool,\n      input: {\n        teamName: 'solution-team-{{timestamp}}',\n        goal: 'Solve: {{problem}}',\n        agentTypes: ['coordinator', 'executor', 'researcher', 'specialist'],\n        teamSize: 4\n      },\n      dependsOn: ['problem-analysis']\n    },\n    {\n      id: 'solution-design',\n      type: 'agent',\n      agent: executorMastraAgent,\n      prompt: `Design a comprehensive solution based on the analysis:\n      Analysis: {{outputs.problem-analysis.response}}\n      Problem: {{problem}}\n      Team: {{outputs.create-solution-team.teamId}}\n      \n      Please provide:\n      1. Detailed solution approach\n      2. Step-by-step implementation plan\n      3. Risk mitigation strategies\n      4. Timeline and milestones\n      5. Required resources and tools\n      6. Success metrics and KPIs`,\n      dependsOn: ['create-solution-team']\n    },\n    {\n      id: 'solution-validation',\n      type: 'agent',\n      agent: reviewerAgent,\n      prompt: `Validate the proposed solution:\n      Solution: {{outputs.solution-design.response}}\n      Original Problem: {{problem}}\n      Analysis: {{outputs.problem-analysis.response}}\n      \n      Please provide:\n      1. Solution completeness assessment\n      2. Feasibility evaluation\n      3. Potential issues identification\n      4. Alternative approaches consideration\n      5. Recommendations for improvement\n      6. Implementation readiness assessment`,\n      dependsOn: ['solution-design']\n    },\n    {\n      id: 'monitor-solution',\n      type: 'tool',\n      tool: monitorSystemTool,\n      input: {\n        includeAgents: true,\n        includeWorkflows: true,\n        includeMessages: true\n      },\n      dependsOn: ['solution-validation']\n    },\n    {\n      id: 'notify-solution-ready',\n      type: 'tool',\n      tool: sendMessageTool,\n      input: {\n        type: 'solution.ready',\n        payload: {\n          problem: '{{problem}}',\n          analysis: '{{outputs.problem-analysis.response}}',\n          solution: '{{outputs.solution-design.response}}',\n          validation: '{{outputs.solution-validation.response}}',\n          teamId: '{{outputs.create-solution-team.teamId}}',\n          systemStatus: '{{outputs.monitor-solution}}'\n        },\n        priority: 'high'\n      },\n      dependsOn: ['monitor-solution']\n    }\n  ],\n});\n\n/**\n * Agent Coordination Workflow\n * Demonstrates multi-agent coordination and task distribution\n */\nexport const agentCoordinationWorkflow = new Workflow({\n  name: 'agentCoordination',\n  description: 'Coordinate multiple agents for complex task execution',\n  steps: [\n    {\n      id: 'task-decomposition',\n      type: 'agent',\n      agent: coordinatorMastraAgent,\n      prompt: `Decompose the following complex task:\n      Task: {{complexTask}}\n      \n      Break it down into:\n      1. Individual subtasks\n      2. Dependencies between tasks\n      3. Agent role assignments\n      4. Execution order and timing\n      5. Communication requirements\n      6. Success criteria for each subtask`,\n    },\n    {\n      id: 'create-coordination-team',\n      type: 'tool',\n      tool: createTeamTool,\n      input: {\n        teamName: 'coord-team-{{timestamp}}',\n        goal: '{{complexTask}}',\n        agentTypes: ['coordinator', 'executor', 'researcher', 'analyst', 'monitor'],\n        teamSize: 5\n      },\n      dependsOn: ['task-decomposition']\n    },\n    {\n      id: 'parallel-execution-1',\n      type: 'parallel',\n      steps: [\n        {\n          id: 'research-subtask',\n          type: 'agent',\n          agent: researcherAgent,\n          prompt: 'Research subtask: {{outputs.task-decomposition.subtask1}}'\n        },\n        {\n          id: 'analysis-subtask',\n          type: 'agent',\n          agent: coordinatorMastraAgent,\n          prompt: 'Analyze subtask: {{outputs.task-decomposition.subtask2}}'\n        }\n      ],\n      dependsOn: ['create-coordination-team']\n    },\n    {\n      id: 'execution-coordination',\n      type: 'agent',\n      agent: executorMastraAgent,\n      prompt: `Coordinate the execution of parallel results:\n      Research Results: {{outputs.parallel-execution-1.research-subtask.response}}\n      Analysis Results: {{outputs.parallel-execution-1.analysis-subtask.response}}\n      Original Task: {{complexTask}}\n      Team: {{outputs.create-coordination-team.teamId}}\n      \n      Provide:\n      1. Integrated execution plan\n      2. Resource allocation\n      3. Timeline coordination\n      4. Quality assurance steps\n      5. Communication protocol`,\n      dependsOn: ['parallel-execution-1']\n    },\n    {\n      id: 'monitor-progress',\n      type: 'tool',\n      tool: getAgentStatusTool,\n      input: {\n        teamId: '{{outputs.create-coordination-team.teamId}}',\n        includeMetrics: true\n      },\n      dependsOn: ['execution-coordination']\n    },\n    {\n      id: 'final-coordination',\n      type: 'tool',\n      tool: sendMessageTool,\n      input: {\n        type: 'coordination.completed',\n        payload: {\n          complexTask: '{{complexTask}}',\n          decomposition: '{{outputs.task-decomposition.response}}',\n          coordination: '{{outputs.execution-coordination.response}}',\n          teamStatus: '{{outputs.monitor-progress}}',\n          teamId: '{{outputs.create-coordination-team.teamId}}'\n        },\n        priority: 'high'\n      },\n      dependsOn: ['monitor-progress']\n    }\n  ],\n});\n\n/**\n * System Health and Monitoring Workflow\n * Monitors the agentic-flow system and provides health reports\n */\nexport const systemMonitoringWorkflow = new Workflow({\n  name: 'systemMonitoring',\n  description: 'Monitor system health and generate comprehensive reports',\n  steps: [\n    {\n      id: 'initial-health-check',\n      type: 'tool',\n      tool: monitorSystemTool,\n      input: {\n        includeAgents: true,\n        includeWorkflows: true,\n        includeMessages: true\n      }\n    },\n    {\n      id: 'agent-status-check',\n      type: 'tool',\n      tool: getAgentStatusTool,\n      input: {\n        includeMetrics: true\n      },\n      dependsOn: ['initial-health-check']\n    },\n    {\n      id: 'health-analysis',\n      type: 'agent',\n      agent: coordinatorMastraAgent,\n      prompt: `Analyze the system health data:\n      System Status: {{outputs.initial-health-check}}\n      Agent Status: {{outputs.agent-status-check}}\n      \n      Provide:\n      1. Overall system health assessment\n      2. Performance bottlenecks identification\n      3. Agent utilization analysis\n      4. Workflow efficiency evaluation\n      5. Recommendations for optimization\n      6. Alert conditions and thresholds`,\n      dependsOn: ['agent-status-check']\n    },\n    {\n      id: 'generate-health-report',\n      type: 'tool',\n      tool: sendMessageTool,\n      input: {\n        type: 'system.health.report',\n        payload: {\n          timestamp: '{{timestamp}}',\n          systemStatus: '{{outputs.initial-health-check}}',\n          agentStatus: '{{outputs.agent-status-check}}',\n          analysis: '{{outputs.health-analysis.response}}'\n        },\n        priority: 'medium'\n      },\n      dependsOn: ['health-analysis']\n    }\n  ],\n});\n\n// Export all workflows\nexport const mastraWorkflows = {\n  softwareDevelopment: softwareDevelopmentWorkflow,\n  problemSolution: problemSolutionWorkflow,\n  agentCoordination: agentCoordinationWorkflow,\n  systemMonitoring: systemMonitoringWorkflow,\n};","import { Mastra } from '@mastra/core';\nimport { mastraAgents } from './agents';\nimport { mastraTools } from './tools';\nimport { mastraWorkflows } from './workflows';\nimport { WorkflowEngine } from '../workflows/workflow-engine';\nimport { AgentManager } from '../lib/agent-manager';\nimport { MessageBus } from '../communication/message-bus';\n\n// Create Mastra instance with agentic-flow integration\nexport const mastra = new Mastra({\n  name: 'agentic-flow',\n  version: '1.0.0',\n  description: 'Agentic Flow - AI Orchestration Platform with Mastra Integration',\n  \n  // Configure server settings\n  server: {\n    port: process.env.MASTRA_PORT ? parseInt(process.env.MASTRA_PORT) : 4111,\n    baseUrl: process.env.MASTRA_BASE_URL || 'http://localhost:4111',\n  },\n  \n  // Configure telemetry (disabled to avoid configuration issues)\n  telemetry: {\n    enabled: false,\n  },\n  \n  // Configure logs\n  logs: {\n    enabled: true,\n    level: 'info',\n  },\n  \n  // Configure database (optional)\n  db: {\n    provider: 'sqlite',\n    uri: process.env.DATABASE_URL || 'sqlite:./data/mastra.db',\n  },\n});\n\n// Register all Mastra agents\nObject.values(mastraAgents).forEach(agent => {\n  mastra.registerAgent(agent);\n});\n\n// Register all Mastra tools\nObject.values(mastraTools).forEach(tool => {\n  mastra.registerTool(tool);\n});\n\n// Register all Mastra workflows\nObject.values(mastraWorkflows).forEach(workflow => {\n  mastra.registerWorkflow(workflow);\n});\n\n// Export utility functions for integration\nexport const initializeMastraIntegration = async () => {\n  console.log('🚀 Initializing Mastra integration with agentic-flow...');\n  \n  try {\n    // Initialize core agentic-flow components\n    const messageBus = MessageBus.getInstance();\n    const agentManager = new AgentManager();\n    const workflowEngine = new WorkflowEngine();\n    \n    // Start the workflow engine\n    console.log('📋 Starting workflow engine...');\n    await workflowEngine.start();\n    \n    // Initialize message bus subscriptions for Mastra integration\n    console.log('📨 Setting up message bus subscriptions...');\n    messageBus.subscribe('mastra.*', async (message) => {\n      console.log('📥 Received Mastra message:', {\n        type: message.type,\n        sender: message.senderId,\n        timestamp: message.timestamp\n      });\n    });\n    \n    // Subscribe to workflow events\n    messageBus.subscribe('workflow.*', async (message) => {\n      console.log('🔄 Workflow event:', {\n        type: message.type,\n        payload: message.payload\n      });\n    });\n    \n    // Subscribe to agent events\n    messageBus.subscribe('agent.*', async (message) => {\n      console.log('🤖 Agent event:', {\n        type: message.type,\n        agentId: message.payload?.agentId || 'unknown'\n      });\n    });\n    \n    // Initialize periodic health monitoring\n    console.log('🏥 Setting up health monitoring...');\n    setInterval(async () => {\n      try {\n        const healthData = {\n          timestamp: new Date().toISOString(),\n          uptime: process.uptime(),\n          memory: process.memoryUsage(),\n          agents: (await agentManager.listAgents()).length\n        };\n        \n        await messageBus.publish({\n          type: 'system.health.check',\n          senderId: 'mastra-integration',\n          recipientId: 'system-monitor',\n          payload: healthData,\n          timestamp: new Date(),\n          priority: 'low'\n        });\n      } catch (error) {\n        console.error('❌ Health check failed:', error.message);\n      }\n    }, 60000); // Every minute\n    \n    console.log('✅ Mastra integration initialized successfully');\n    console.log(`🌐 Mastra UI will be available at: http://localhost:${mastra.config.server?.port || 4111}`);\n    \n    return {\n      status: 'success',\n      message: 'Mastra integration initialized',\n      ui_url: `http://localhost:${mastra.config.server?.port || 4111}`,\n      agents: Object.keys(mastraAgents),\n      tools: Object.keys(mastraTools),\n      workflows: Object.keys(mastraWorkflows)\n    };\n    \n  } catch (error) {\n    console.error('❌ Failed to initialize Mastra integration:', error);\n    throw error;\n  }\n};\n\n// Export components for external use\nexport * from './agents';\nexport * from './tools';\nexport * from './workflows';\n\n// Export the configured mastra instance\nexport default mastra;\n"],"names":["AgentType","AgentState","GoalType","GoalPriority","GoalStatus","MessageType","MessagePriority","TeamFormation","TeamStatus","TaskStatus","PriorityQueue","uuidv4","AgentStateEnum","EventEmitter"],"mappings":"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"}