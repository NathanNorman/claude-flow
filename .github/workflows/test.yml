name: Test Suite

on:
  push:
    branches: [ main, develop, claude-flow-v2.0.0 ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test
  CLAUDE_FLOW_ENV: test
  CI: true

jobs:
  validate-test-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node${{ matrix.node-version }}-

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Validate test environment
      run: npm run test:unit -- --testPathPattern="test-environment|dependency-checks" --maxWorkers=2

  test:
    runs-on: ubuntu-latest
    needs: validate-test-environment
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node${{ matrix.node-version }}-

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Run type checking
      run: npm run typecheck || true
      continue-on-error: true

    - name: Run linting
      run: npm run lint || true
      continue-on-error: true

    - name: Run unit tests
      run: npm run test:unit -- --maxWorkers=2 --bail --forceExit
      timeout-minutes: 10

    - name: Run CLI tests
      run: npm run test:cli -- --maxWorkers=2 --bail --forceExit || true
      timeout-minutes: 10
      continue-on-error: true

    - name: Run integration tests
      run: npm run test:integration -- --maxWorkers=2 --bail --forceExit || true
      timeout-minutes: 10
      continue-on-error: true

    - name: Run performance tests
      run: npm run test:performance -- --maxWorkers=1 --bail --forceExit
      timeout-minutes: 5

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-deno:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Deno
      uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: Run Deno compatibility check
      run: |
        echo "Checking Deno compatibility..."
        deno --version
        # Skip actual tests for now but prepare for future
        echo "Deno tests not implemented yet - skipping"

  test-windows:
    runs-on: windows-latest
    timeout-minutes: 20
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        autocrlf: false

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      shell: powershell
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Run core tests
      shell: powershell
      run: |
        $env:NODE_ENV="test"
        $env:CLAUDE_FLOW_ENV="test"
        npm run test:unit -- --maxWorkers=2 --bail --forceExit

  test-macos:
    runs-on: macos-latest
    timeout-minutes: 20
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Run core tests
      run: |
        export NODE_ENV=test
        export CLAUDE_FLOW_ENV=test
        npm run test:unit -- --maxWorkers=2 --bail --forceExit

  e2e-test:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Build CLI
      run: |
        npm run build || npm run build:simple || echo "Build failed, trying fallback"
        ls -la bin/ || true

    - name: Test CLI binary
      run: |
        if [ -f ./bin/claude-flow ]; then
          chmod +x ./bin/claude-flow
          ./bin/claude-flow --version || echo "Version check failed"
          ./bin/claude-flow --help || echo "Help check failed"
        else
          echo "CLI binary not found, using fallback"
          node src/cli/simple-cli.js --version || true
          node src/cli/simple-cli.js --help || true
        fi

    - name: Test init command
      run: |
        mkdir -p test-project
        cd test-project
        if [ -f ../bin/claude-flow ]; then
          ../bin/claude-flow init --minimal || echo "Init failed"
        else
          node ../src/cli/simple-cli.js init --minimal || echo "Init failed"
        fi
        ls -la .claude/ || echo "No .claude directory created"

    - name: Test memory commands
      run: |
        cd test-project
        if [ -f ../bin/claude-flow ]; then
          ../bin/claude-flow memory store test-key "test value" || echo "Store failed"
          ../bin/claude-flow memory retrieve test-key || echo "Retrieve failed"
          ../bin/claude-flow memory list || echo "List failed"
        else
          echo "Memory commands skipped - no binary"
        fi

  docker-test:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 20
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        if [ -f Dockerfile ]; then
          docker build -t claude-flow:test . || echo "Docker build failed"
        else
          echo "No Dockerfile found, creating minimal one"
          cat > Dockerfile <<EOF
        FROM node:20-alpine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production --ignore-scripts || true
        COPY . .
        ENTRYPOINT ["node", "src/cli/simple-cli.js"]
        EOF
          docker build -t claude-flow:test .
        fi

    - name: Test Docker container
      run: |
        docker run --rm claude-flow:test --version || echo "Docker version test failed"
        docker run --rm claude-flow:test --help || echo "Docker help test failed"

  benchmark:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Run performance benchmarks
      run: |
        npm run test:performance
        echo "Performance tests completed"

    - name: Memory usage test
      run: |
        node -e "
          const { execSync } = require('child_process');
          const initialMemory = process.memoryUsage().heapUsed;
          
          // Run CLI commands multiple times
          for (let i = 0; i < 10; i++) {
            try {
              execSync('node src/cli/simple-cli.js --help', { stdio: 'ignore' });
            } catch (e) {
              console.log('CLI execution failed, skipping');
              break;
            }
          }
          
          const finalMemory = process.memoryUsage().heapUsed;
          const increase = (finalMemory - initialMemory) / 1024 / 1024;
          
          console.log(\`Memory increase: \${increase.toFixed(2)}MB\`);
          
          if (increase > 100) {
            console.warn('Memory usage high but not failing CI');
          }
        "

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --ignore-scripts --no-audit --no-fund || true

    - name: Run security audit
      run: npm audit --audit-level=critical || echo "Security audit has warnings"

    - name: Check for known vulnerabilities
      run: |
        if [ -f audit-ci.json ]; then
          npx audit-ci --config audit-ci.json || echo "Audit CI found issues"
        else
          echo "No audit-ci.json found, skipping"
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --ignore-scripts

    - name: Check code formatting
      run: |
        npm run format
        git diff --exit-code || (echo "Code formatting issues found" && exit 1)

    - name: Run linting with error reporting
      run: npm run lint -- --format=json --output-file=eslint-report.json || true

    - name: Upload lint results
      uses: actions/upload-artifact@v3
      with:
        name: eslint-report
        path: eslint-report.json

  coverage-report:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 20
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: |
        npm ci --ignore-scripts --no-audit --no-fund
        npm ls || true

    - name: Generate detailed coverage
      run: npm run test:coverage -- --maxWorkers=2 --bail || echo "Coverage generation failed"

    - name: Check coverage thresholds
      run: |
        if [ -f ./coverage/coverage-summary.json ]; then
          node -e "
            try {
              const coverage = require('./coverage/coverage-summary.json');
              const thresholds = {
                lines: 50,
                functions: 50,
                branches: 40,
                statements: 50
              };
              
              let failed = false;
              
              Object.keys(thresholds).forEach(key => {
                const actual = coverage.total[key].pct;
                const threshold = thresholds[key];
                
                console.log(\`\${key}: \${actual}% (threshold: \${threshold}%)\`);
                
                if (actual < threshold) {
                  console.warn(\`⚠️  \${key} coverage below threshold\`);
                } else {
                  console.log(\`✅ \${key} coverage meets threshold\`);
                }
              });
              
              console.log('Coverage report generated');
            } catch (e) {
              console.log('Could not parse coverage report');
            }
          "
        else
          echo "No coverage report found"
        fi

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage/
          !coverage/tmp/