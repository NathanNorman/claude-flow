version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agentic_flow
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Pub/Sub
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dist:/var/www/agentic-flow/dist:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - app1
      - app2
      - app3
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application instances
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      NODE_APP_INSTANCE: 0
      PORT: 3001
      WS_PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: agentic_flow
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./memory:/app/memory
    networks:
      default:
        aliases:
          - node1.internal

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      NODE_APP_INSTANCE: 1
      PORT: 3001
      WS_PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: agentic_flow
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./memory:/app/memory
    networks:
      default:
        aliases:
          - node2.internal

  app3:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      NODE_APP_INSTANCE: 2
      PORT: 3001
      WS_PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: agentic_flow
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_URL: redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./memory:/app/memory
    networks:
      default:
        aliases:
          - node3.internal

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # Redis Commander for debugging
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: redis:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis

volumes:
  postgres_data:
  redis_data:
  nginx_cache:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge