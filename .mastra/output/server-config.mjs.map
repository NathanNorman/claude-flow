{"version":3,"file":"server-config.mjs","sources":["../../src/mastra/index.ts"],"sourcesContent":["import { Mastra, Agent, Tool, Workflow } from '@mastra/core';\n\n// Create Mastra instance with basic configuration for agentic-flow\nexport const mastra = new Mastra({\n  name: 'agentic-flow',\n  version: '1.0.0',\n  description: 'Agentic Flow - AI Orchestration Platform with Mastra Integration',\n  \n  // Configure server settings\n  server: {\n    port: process.env.MASTRA_PORT ? parseInt(process.env.MASTRA_PORT) : 4111,\n    baseUrl: process.env.MASTRA_BASE_URL || 'http://localhost:4111',\n  },\n  \n  // Configure telemetry (disabled to avoid configuration issues)\n  telemetry: {\n    enabled: false,\n  },\n  \n  // Configure logs\n  logs: {\n    enabled: true,\n    level: 'info',\n  },\n});\n\n// Define basic agents for the agentic-flow system\nconst coordinatorAgent = new Agent({\n  name: 'coordinator',\n  description: 'Coordinator agent for team management and task delegation',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-sonnet-20240229',\n  },\n  instructions: `You are a coordinator agent responsible for:\n    - Forming teams of agents for complex goals\n    - Breaking down complex goals into manageable sub-goals\n    - Delegating tasks to appropriate agents or teams\n    - Monitoring team performance and adjusting strategies\n    - Resolving conflicts between agents`,\n  tools: [],\n});\n\nconst executorAgent = new Agent({\n  name: 'executor',\n  description: 'Executor agent for task execution and implementation',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-sonnet-20240229',\n  },\n  instructions: `You are an executor agent responsible for:\n    - Executing assigned tasks\n    - Implementing solutions based on specifications\n    - Reporting progress and results\n    - Handling errors and retries\n    - Collaborating with other agents`,\n  tools: [],\n});\n\nconst researcherAgent = new Agent({\n  name: 'researcher',\n  description: 'Research agent for information gathering and analysis',\n  model: {\n    provider: 'anthropic',\n    name: 'claude-3-sonnet-20240229',\n  },\n  instructions: `You are a research agent specialized in:\n    - Gathering information from various sources\n    - Analyzing and synthesizing data\n    - Identifying patterns and insights\n    - Providing comprehensive research reports\n    - Fact-checking and verification`,\n  tools: [],\n});\n\n// Define basic tools for agentic-flow integration\nconst createTeamTool = new Tool({\n  name: 'createTeam',\n  description: 'Create a new team of agents for a specific goal',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      teamName: { type: 'string' },\n      goal: { type: 'string' },\n      agentTypes: {\n        type: 'array',\n        items: { type: 'string' }\n      },\n      teamSize: { type: 'number', minimum: 1, maximum: 10 }\n    },\n    required: ['teamName', 'goal', 'agentTypes']\n  },\n  execute: async ({ teamName, goal, agentTypes, teamSize = 3 }) => {\n    return {\n      teamId: `team-${Date.now()}`,\n      teamName,\n      goal,\n      agentTypes,\n      teamSize,\n      status: 'created',\n      message: `Team ${teamName} created successfully with ${agentTypes.length} agent types`,\n      timestamp: new Date().toISOString()\n    };\n  },\n});\n\nconst sendMessageTool = new Tool({\n  name: 'sendMessage',\n  description: 'Send a message through the agentic-flow message system',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      type: { type: 'string' },\n      message: { type: 'string' },\n      priority: { \n        type: 'string',\n        enum: ['low', 'medium', 'high', 'critical']\n      }\n    },\n    required: ['type', 'message']\n  },\n  execute: async ({ type, message, priority = 'medium' }) => {\n    return {\n      messageId: `msg-${Date.now()}`,\n      type,\n      message,\n      priority,\n      status: 'sent',\n      timestamp: new Date().toISOString()\n    };\n  },\n});\n\n// Define a basic workflow\nconst taskProcessingWorkflow = new Workflow({\n  name: 'taskProcessing',\n  description: 'Process tasks using agentic-flow agents',\n  steps: [\n    {\n      id: 'coordinate',\n      type: 'agent',\n      agent: coordinatorAgent,\n      prompt: 'Coordinate the following task: {{task}}',\n    },\n    {\n      id: 'research',\n      type: 'agent',\n      agent: researcherAgent,\n      prompt: 'Research the task requirements: {{outputs.coordinate.response}}',\n    },\n    {\n      id: 'execute',\n      type: 'agent',\n      agent: executorAgent,\n      prompt: 'Execute based on coordination and research: {{outputs.coordinate.response}} | {{outputs.research.response}}',\n    },\n    {\n      id: 'notify',\n      type: 'tool',\n      tool: sendMessageTool,\n      input: {\n        type: 'task.completed',\n        message: 'Task completed: {{task}}',\n        priority: 'high'\n      }\n    }\n  ],\n});\n\n// Register all components\nmastra.registerAgent(coordinatorAgent);\nmastra.registerAgent(executorAgent);\nmastra.registerAgent(researcherAgent);\nmastra.registerTool(createTeamTool);\nmastra.registerTool(sendMessageTool);\nmastra.registerWorkflow(taskProcessingWorkflow);\n\nconsole.log('ðŸš€ Mastra configuration loaded with agentic-flow integration');\nconsole.log('ðŸ“Š Registered:', {\n  agents: 3,\n  tools: 2,\n  workflows: 1\n});\n\nexport default mastra;"],"names":[],"mappings":"AAGiC,eAC/B,MAAA;AACA,MAAA,MAAA,GAAA;AAAA,EACA,IAAA,EAAA,QAAa,GAAA,CAAA,WAAA,GAAA,SAAA,OAAA,CAAA,GAAA,CAAA,WAAA,CAAA,GAAA,IAAA;AAAA,EAAA,OAAA,EAAA,OAAA,CAAA,GAAA,CAAA,eAAA,IAAA;AAAA;;;;"}